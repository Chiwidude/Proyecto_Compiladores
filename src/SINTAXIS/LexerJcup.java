/* The following code was generated by JFlex 1.7.0 */

package SINTAXIS;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/PROYECTO_COMPILADORES/PROYECTO/src/SINTAXIS/LexerJcup.flex</tt>
 */
class LexerJcup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\1\71\1\71\1\3\22\0\1\44\1\56\1\0"+
    "\1\67\1\0\1\52\1\57\1\5\1\63\1\64\1\10\1\51\1\60"+
    "\1\6\1\46\1\7\12\2\1\0\1\45\1\53\1\54\1\55\1\0"+
    "\1\70\1\11\1\26\1\22\1\12\1\13\1\21\1\33\1\23\1\27"+
    "\1\42\1\35\1\20\1\36\1\17\1\31\1\24\1\43\1\16\1\30"+
    "\1\15\1\25\1\40\1\37\1\14\1\32\1\34\1\61\1\0\1\62"+
    "\1\0\1\41\1\0\4\1\1\50\25\1\1\65\1\47\1\66\7\0"+
    "\1\71\u1fa2\0\1\71\1\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\30\2\1\10\1\11\1\1\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\1\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\4"+
    "\1\1\1\2\1\33\6\2\1\34\22\2\1\35\2\2"+
    "\1\36\12\2\1\37\43\2\1\40\1\2\1\41\1\42"+
    "\1\43\15\2\1\44\1\45\1\46\11\2\1\47\1\50"+
    "\2\2\1\51\3\2\1\52\12\2\2\0\1\44\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\0\1\4\1\0\1\1\1\64\1\65\1\66\1\2"+
    "\1\57\1\67\1\2\1\70\3\2\1\71\1\2\1\72"+
    "\1\2\1\73\4\2\1\74\16\2\1\75\15\2\1\76"+
    "\24\2\1\77\26\2\1\100\24\2\1\101\21\2\1\102"+
    "\7\2\1\103\3\2\1\104\11\2\1\105\12\2\1\106"+
    "\4\2\1\107\2\2\1\110\3\2\1\111\3\2\1\112"+
    "\5\2\1\113\1\2\1\114\3\2\1\115\14\2\1\116"+
    "\1\0\1\4\1\0\1\4\10\2\1\117\1\2\1\120"+
    "\6\2\1\121\1\122\1\123\1\124\3\2\1\125\3\2"+
    "\1\126\3\2\1\127\2\2\1\0\1\2\1\130\4\2"+
    "\1\131\1\2\1\132\2\2\1\133\1\2\1\134\1\135"+
    "\3\2\1\136\1\137\10\2\1\140\3\2\1\141\3\2"+
    "\1\142\1\143\1\2\1\144\1\2\1\145\3\2\1\146"+
    "\1\2\1\147\2\2\1\150\1\151\6\2\1\152\2\2"+
    "\1\153\2\2\1\154\7\2\1\155\1\156\5\2\1\157"+
    "\20\2\1\160\12\2\1\161\1\162\13\2\1\163\6\2"+
    "\1\164\1\2\1\165\4\2\1\166\10\2\1\167\2\2"+
    "\1\170\13\2\1\171\1\172\7\2\1\173\2\2\1\174"+
    "\4\2\1\175\1\176\3\2\1\177\1\200\1\2\1\201"+
    "\2\2\1\202\7\2\1\203\1\2\1\204\1\205\3\2"+
    "\1\206\1\207\3\4\3\1\1\2\1\210\33\2\1\0"+
    "\2\2\1\211\31\2\1\212\5\2\1\213\1\214\6\2"+
    "\1\215\1\2\1\216\1\217\1\220\1\2\1\221\1\2"+
    "\1\222\1\2\1\223\5\2\1\224\4\2\1\225\1\2"+
    "\1\226\2\2\1\227\13\2\1\230\12\2\1\231\1\232"+
    "\4\2\1\233\3\2\1\234\3\2\1\235\1\236\1\237"+
    "\2\2\1\240\1\241\3\2\1\242\3\2\1\243\2\2"+
    "\1\244\20\2\1\245\4\2\1\246\3\2\1\247\10\2"+
    "\1\250\1\2\1\251\1\2\1\252\1\253\3\2\1\254"+
    "\1\255\2\2\1\256\1\2\1\257\1\260\1\2\1\261"+
    "\3\2\1\262\2\0\1\263\1\2\1\264\6\2\1\265"+
    "\11\2\1\266\1\267\4\2\1\270\1\271\1\272\1\0"+
    "\1\2\1\273\21\2\1\274\7\2\1\275\1\276\5\2"+
    "\1\277\5\2\1\300\11\2\1\301\1\302\1\2\1\303"+
    "\5\2\1\304\10\2\1\305\1\2\1\306\1\307\2\2"+
    "\1\310\7\2\1\311\3\2\1\312\1\2\1\313\1\314"+
    "\1\2\1\315\6\2\1\316\2\2\1\317\4\2\1\320"+
    "\2\2\1\321\2\2\1\322\1\2\1\323\1\324\16\2"+
    "\1\325\1\2\1\326\1\2\1\327\1\330\1\2\1\331"+
    "\1\332\6\2\1\333\7\2\1\334\2\2\1\335\1\336"+
    "\6\2\1\337\1\340\1\2\1\341\1\2\1\0\10\2"+
    "\1\342\3\2\1\343\5\2\1\344\6\2\1\345\3\2"+
    "\1\346\1\2\1\347\1\2\1\350\1\2\1\351\5\2"+
    "\1\352\1\353\1\2\1\354\1\355\4\2\1\356\4\2"+
    "\1\357\1\2\1\360\1\361\1\2\1\362\1\2\1\363"+
    "\1\364\1\2\1\365\1\2\1\366\4\2\1\367\1\370"+
    "\1\2\1\371\5\2\1\372\1\373\4\2\1\374\1\375"+
    "\1\2\1\376\11\2\1\377\2\2\1\u0100\2\2\1\u0101"+
    "\4\2\1\u0102\1\u0103\2\2\1\0\1\u0104\1\u0105\1\u0106"+
    "\1\2\1\u0107\1\2\1\u0108\3\2\1\u0109\1\2\1\u010a"+
    "\2\2\1\u010b\1\2\1\u010c\1\2\1\u010d\2\2\1\u010e"+
    "\3\2\1\u010f\1\u0110\5\2\1\u0111\1\u0112\1\2\1\u0113"+
    "\4\2\1\u0114\1\u0115\1\u0116\1\2\1\u0117\1\2\1\u0118"+
    "\1\2\1\u0119\1\u011a\1\u011b\2\2\1\u011c\5\2\1\u011d"+
    "\1\2\1\u011e\1\u011f\3\2\1\u0120\1\2\1\u0121\2\2"+
    "\1\u0122\3\2\1\u0123\2\2\1\u0124\12\2\1\u0125\2\2"+
    "\1\u0126\1\u0127\1\u0128\6\2\1\u0129\1\2\1\u012a\1\0"+
    "\1\2\1\u012b\7\2\1\u012c\2\2\1\u012d\1\2\1\u012e"+
    "\2\2\1\u012f\2\2\1\u0130\1\u0131\2\2\1\u0132\7\2"+
    "\1\u0133\1\u0134\11\2\1\u0135\1\u0136\1\2\1\u0137\1\u0138"+
    "\4\2\1\u0139\1\u013a\1\u013b\1\2\1\u013c\1\u013d\7\2"+
    "\1\u013e\5\2\1\u013f\1\2\1\u0140\1\0\1\2\1\u0141"+
    "\1\2\1\u0142\1\u0143\2\2\1\u0144\1\u0145\7\2\1\u0146"+
    "\2\2\1\u0147\3\2\1\u0148\3\2\1\u0149\5\2\1\u014a"+
    "\1\u014b\1\u014c\1\u014d\1\u014e\7\2\1\u014f\3\2\1\u0150"+
    "\2\2\1\u0151\1\u0152\1\0\2\2\1\u0153\1\u0154\1\u0155"+
    "\1\u0156\1\u0157\1\u0158\3\2\1\u0159\1\u015a\5\2\1\u015b"+
    "\5\2\1\u015c\1\u015d\1\2\1\u015e\6\2\1\u015f\2\2"+
    "\1\0\4\2\1\u0160\1\u0161\1\u0162\1\2\1\u0163\1\2"+
    "\1\u0164\1\u0165\1\u0166\4\2\1\u0167\2\2\1\u0168\1\2"+
    "\1\u0169\1\2\1\u016a\1\u016b\1\2\1\u016c\1\2\1\u016d"+
    "\2\2\1\u016e\1\u016f\1\2\1\u0170\2\2\1\u0171\10\2"+
    "\1\u0172\1\2\1\u0173\2\2\1\u0174\3\2\1\u0175\4\2"+
    "\1\u0176\2\2\1\u0177\15\2\1\u0178\1\2\1\u0179\6\2"+
    "\1\u017a";

  private static int [] zzUnpackAction() {
    int [] result = new int[1543];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\72\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c"+
    "\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc"+
    "\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc"+
    "\0\u0706\0\u0740\0\72\0\u077a\0\72\0\72\0\u07b4\0\u07ee"+
    "\0\u0828\0\u0862\0\u089c\0\72\0\u08d6\0\72\0\u0910\0\72"+
    "\0\u094a\0\72\0\u0984\0\72\0\u09be\0\72\0\u09f8\0\u0a32"+
    "\0\u0a6c\0\164\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\164\0\u1050\0\u108a\0\u10c4\0\u10fe"+
    "\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce"+
    "\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e"+
    "\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e"+
    "\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e"+
    "\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e"+
    "\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\164\0\u1b6a\0\u1ba4"+
    "\0\164\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a"+
    "\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a"+
    "\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da"+
    "\0\u2114\0\u214e\0\u2188\0\164\0\u21c2\0\u21fc\0\u2236\0\164"+
    "\0\u2270\0\u22aa\0\u22e4\0\164\0\u231e\0\u2358\0\u2392\0\u23cc"+
    "\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u0740\0\u2562"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\u259c\0\u25d6\0\u2610\0\u264a\0\164\0\164"+
    "\0\164\0\u2684\0\164\0\164\0\u26be\0\u26f8\0\u2732\0\u276c"+
    "\0\u27a6\0\164\0\u27e0\0\164\0\u281a\0\164\0\u2854\0\u288e"+
    "\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e"+
    "\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e"+
    "\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe"+
    "\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\164"+
    "\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164"+
    "\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334"+
    "\0\u336e\0\u33a8\0\u33e2\0\u341c\0\164\0\u3456\0\u3490\0\u34ca"+
    "\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a"+
    "\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6\0\u3830\0\u386a"+
    "\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a"+
    "\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a"+
    "\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda"+
    "\0\164\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\u3f70"+
    "\0\u3faa\0\u3fe4\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140"+
    "\0\u417a\0\u41b4\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310"+
    "\0\u434a\0\u4384\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0"+
    "\0\u451a\0\u4554\0\u458e\0\u45c8\0\u4602\0\u463c\0\u4676\0\u46b0"+
    "\0\u46ea\0\u4724\0\u475e\0\u4798\0\u47d2\0\u480c\0\u4846\0\u4880"+
    "\0\u48ba\0\u48f4\0\u492e\0\164\0\u4968\0\u49a2\0\u49dc\0\u4a16"+
    "\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe\0\u4b38\0\u4b72\0\u4bac\0\u4be6"+
    "\0\u4c20\0\u4c5a\0\u4c94\0\164\0\u4cce\0\u4d08\0\u4d42\0\u4d7c"+
    "\0\u4db6\0\u4df0\0\u4e2a\0\u4e64\0\u4e9e\0\u4ed8\0\u4f12\0\u4f4c"+
    "\0\u4f86\0\u4fc0\0\u4ffa\0\u5034\0\u506e\0\u50a8\0\u50e2\0\u511c"+
    "\0\u5156\0\u5190\0\u51ca\0\u5204\0\72\0\u523e\0\u5278\0\u52b2"+
    "\0\u52ec\0\u5326\0\u5360\0\u539a\0\u53d4\0\u540e\0\u5448\0\u5482"+
    "\0\u54bc\0\164\0\u54f6\0\164\0\u5530\0\u556a\0\u55a4\0\u55de"+
    "\0\u5618\0\u5652\0\u568c\0\164\0\164\0\164\0\u56c6\0\u5700"+
    "\0\u573a\0\164\0\u5774\0\u57ae\0\u57e8\0\u5822\0\u585c\0\u5896"+
    "\0\u58d0\0\164\0\u590a\0\u5944\0\u597e\0\u59b8\0\164\0\u59f2"+
    "\0\u5a2c\0\u5a66\0\u5aa0\0\u5ada\0\u5b14\0\164\0\u5b4e\0\u5b88"+
    "\0\164\0\u5bc2\0\164\0\u5bfc\0\u5c36\0\u5c70\0\u5caa\0\u5ce4"+
    "\0\164\0\u5d1e\0\u5d58\0\u5d92\0\u5dcc\0\u5e06\0\u5e40\0\u5e7a"+
    "\0\u5eb4\0\164\0\u5eee\0\u5f28\0\u5f62\0\164\0\u5f9c\0\u5fd6"+
    "\0\u6010\0\u604a\0\164\0\u6084\0\u60be\0\u60f8\0\164\0\u6132"+
    "\0\u616c\0\u61a6\0\164\0\u61e0\0\164\0\u621a\0\u6254\0\164"+
    "\0\164\0\u628e\0\u62c8\0\u6302\0\u633c\0\u6376\0\u63b0\0\164"+
    "\0\u63ea\0\u6424\0\164\0\u645e\0\u6498\0\164\0\u64d2\0\u650c"+
    "\0\u6546\0\u6580\0\u65ba\0\u65f4\0\u662e\0\164\0\164\0\u6668"+
    "\0\u66a2\0\u66dc\0\u6716\0\u6750\0\u678a\0\u67c4\0\u67fe\0\u6838"+
    "\0\u6872\0\u68ac\0\u68e6\0\u6920\0\u695a\0\u6994\0\u69ce\0\u6a08"+
    "\0\u6a42\0\u6a7c\0\u6ab6\0\u6af0\0\u6b2a\0\164\0\u6b64\0\u6b9e"+
    "\0\u6bd8\0\u6c12\0\u6c4c\0\u6c86\0\u6cc0\0\u6cfa\0\u6d34\0\u6d6e"+
    "\0\u6da8\0\164\0\u6de2\0\u6e1c\0\u6e56\0\u6e90\0\u6eca\0\u6f04"+
    "\0\u6f3e\0\u6f78\0\u6fb2\0\u6fec\0\u7026\0\164\0\u7060\0\u709a"+
    "\0\u70d4\0\u710e\0\u7148\0\u7182\0\164\0\u71bc\0\164\0\u71f6"+
    "\0\u7230\0\u726a\0\u72a4\0\164\0\u72de\0\u7318\0\u7352\0\u738c"+
    "\0\u73c6\0\u7400\0\u743a\0\u7474\0\164\0\u74ae\0\u74e8\0\164"+
    "\0\u7522\0\u755c\0\u7596\0\u75d0\0\u760a\0\u7644\0\u767e\0\u76b8"+
    "\0\u76f2\0\u772c\0\u7766\0\164\0\164\0\u77a0\0\u77da\0\u7814"+
    "\0\u784e\0\u7888\0\u78c2\0\u78fc\0\164\0\u7936\0\u7970\0\u79aa"+
    "\0\u79e4\0\u7a1e\0\u7a58\0\u7a92\0\u7acc\0\164\0\u7b06\0\u7b40"+
    "\0\u7b7a\0\164\0\164\0\u7bb4\0\164\0\u7bee\0\u7c28\0\164"+
    "\0\u7c62\0\u7c9c\0\u7cd6\0\u7d10\0\u7d4a\0\u7d84\0\u7dbe\0\u7df8"+
    "\0\u7e32\0\u7e6c\0\164\0\u7ea6\0\u7ee0\0\u7f1a\0\164\0\164"+
    "\0\u7f54\0\u7f8e\0\u7fc8\0\u8002\0\u803c\0\u8076\0\u80b0\0\164"+
    "\0\u80ea\0\u8124\0\u815e\0\u8198\0\u81d2\0\u820c\0\u8246\0\u8280"+
    "\0\u82ba\0\u82f4\0\u832e\0\u8368\0\u83a2\0\u83dc\0\u8416\0\u8450"+
    "\0\u848a\0\u84c4\0\u84fe\0\u8538\0\u8572\0\u85ac\0\u85e6\0\u8620"+
    "\0\u865a\0\u8694\0\u86ce\0\u8708\0\u8742\0\u877c\0\u87b6\0\u87f0"+
    "\0\u882a\0\u8864\0\u889e\0\u88d8\0\u8912\0\u894c\0\u8986\0\u89c0"+
    "\0\u89fa\0\u8a34\0\u8a6e\0\u8aa8\0\u8ae2\0\u8b1c\0\u8b56\0\u8b90"+
    "\0\u8bca\0\u8c04\0\u8c3e\0\u8c78\0\u8cb2\0\u8cec\0\u8d26\0\u8d60"+
    "\0\164\0\u8d9a\0\u8dd4\0\u8e0e\0\u8e48\0\u8e82\0\164\0\164"+
    "\0\u8ebc\0\u8ef6\0\u8f30\0\u8f6a\0\u8fa4\0\u8fde\0\164\0\u9018"+
    "\0\164\0\164\0\164\0\u9052\0\164\0\u908c\0\164\0\u90c6"+
    "\0\164\0\u9100\0\u913a\0\u9174\0\u91ae\0\u91e8\0\164\0\u9222"+
    "\0\u925c\0\u9296\0\u92d0\0\164\0\u930a\0\164\0\u9344\0\u937e"+
    "\0\u93b8\0\u93f2\0\u942c\0\u9466\0\u94a0\0\u94da\0\u9514\0\u954e"+
    "\0\u9588\0\u95c2\0\u95fc\0\u9636\0\164\0\u9670\0\u96aa\0\u96e4"+
    "\0\u971e\0\u9758\0\u9792\0\u97cc\0\u9806\0\u9840\0\u987a\0\164"+
    "\0\164\0\u98b4\0\u98ee\0\u9928\0\u9962\0\164\0\u999c\0\u99d6"+
    "\0\u9a10\0\164\0\u9a4a\0\u9a84\0\u9abe\0\164\0\164\0\164"+
    "\0\u9af8\0\u9b32\0\164\0\164\0\u9b6c\0\u9ba6\0\u9be0\0\164"+
    "\0\u9c1a\0\u9c54\0\u9c8e\0\164\0\u9cc8\0\u9d02\0\164\0\u9d3c"+
    "\0\u9d76\0\u9db0\0\u9dea\0\u9e24\0\u9e5e\0\u9e98\0\u9ed2\0\u9f0c"+
    "\0\u9f46\0\u9f80\0\u9fba\0\u9ff4\0\ua02e\0\ua068\0\ua0a2\0\164"+
    "\0\ua0dc\0\ua116\0\ua150\0\ua18a\0\164\0\ua1c4\0\ua1fe\0\ua238"+
    "\0\164\0\ua272\0\ua2ac\0\ua2e6\0\ua320\0\ua35a\0\ua394\0\ua3ce"+
    "\0\ua408\0\164\0\ua442\0\164\0\ua47c\0\164\0\164\0\ua4b6"+
    "\0\ua4f0\0\ua52a\0\164\0\164\0\ua564\0\ua59e\0\164\0\ua5d8"+
    "\0\ua612\0\164\0\ua64c\0\164\0\ua686\0\ua6c0\0\ua6fa\0\ua734"+
    "\0\u015c\0\ua76e\0\164\0\ua7a8\0\164\0\ua7e2\0\ua81c\0\ua856"+
    "\0\ua890\0\ua8ca\0\ua904\0\164\0\ua93e\0\ua978\0\ua9b2\0\ua9ec"+
    "\0\uaa26\0\uaa60\0\uaa9a\0\uaad4\0\uab0e\0\164\0\164\0\uab48"+
    "\0\uab82\0\uabbc\0\uabf6\0\uac30\0\164\0\164\0\uac6a\0\uaca4"+
    "\0\164\0\uacde\0\uad18\0\uad52\0\uad8c\0\uadc6\0\uae00\0\uae3a"+
    "\0\uae74\0\uaeae\0\uaee8\0\uaf22\0\uaf5c\0\uaf96\0\uafd0\0\ub00a"+
    "\0\ub044\0\ub07e\0\ub0b8\0\ub0f2\0\ub12c\0\ub166\0\ub1a0\0\ub1da"+
    "\0\ub214\0\ub24e\0\164\0\164\0\ub288\0\ub2c2\0\ub2fc\0\ub336"+
    "\0\ub370\0\164\0\ub3aa\0\ub3e4\0\ub41e\0\ub458\0\ub492\0\164"+
    "\0\ub4cc\0\ub506\0\ub540\0\ub57a\0\ub5b4\0\ub5ee\0\ub628\0\ub662"+
    "\0\ub69c\0\164\0\164\0\ub6d6\0\164\0\ub710\0\ub74a\0\ub784"+
    "\0\ub7be\0\ub7f8\0\164\0\ub832\0\ub86c\0\ub8a6\0\ub8e0\0\ub91a"+
    "\0\ub954\0\ub98e\0\ub9c8\0\164\0\uba02\0\164\0\164\0\uba3c"+
    "\0\uba76\0\164\0\ubab0\0\ubaea\0\ubb24\0\ubb5e\0\ubb98\0\ubbd2"+
    "\0\ubc0c\0\164\0\ubc46\0\ubc80\0\ubcba\0\164\0\ubcf4\0\ubd2e"+
    "\0\164\0\ubd68\0\164\0\ubda2\0\ubddc\0\ube16\0\ube50\0\ube8a"+
    "\0\ubec4\0\164\0\ubefe\0\ubf38\0\164\0\ubf72\0\ubfac\0\ubfe6"+
    "\0\uc020\0\164\0\uc05a\0\uc094\0\164\0\uc0ce\0\uc108\0\164"+
    "\0\uc142\0\uc17c\0\uc1b6\0\uc1f0\0\uc22a\0\uc264\0\uc29e\0\uc2d8"+
    "\0\uc312\0\uc34c\0\uc386\0\uc3c0\0\uc3fa\0\uc434\0\uc46e\0\uc4a8"+
    "\0\uc4e2\0\164\0\uc51c\0\164\0\uc556\0\164\0\164\0\uc590"+
    "\0\164\0\164\0\uc5ca\0\uc604\0\uc63e\0\uc678\0\uc6b2\0\uc6ec"+
    "\0\164\0\uc726\0\uc760\0\uc79a\0\uc7d4\0\uc80e\0\uc848\0\uc882"+
    "\0\164\0\uc8bc\0\uc8f6\0\164\0\164\0\uc930\0\uc96a\0\uc9a4"+
    "\0\uc9de\0\uca18\0\uca52\0\164\0\164\0\uca8c\0\164\0\ucac6"+
    "\0\ucb00\0\ucb3a\0\ucb74\0\ucbae\0\ucbe8\0\ucc22\0\ucc5c\0\ucc96"+
    "\0\uccd0\0\164\0\ucd0a\0\ucd44\0\ucd7e\0\164\0\ucdb8\0\ucdf2"+
    "\0\uce2c\0\uce66\0\ucea0\0\164\0\uceda\0\ucf14\0\ucf4e\0\ucf88"+
    "\0\ucfc2\0\ucffc\0\164\0\ud036\0\ud070\0\ud0aa\0\164\0\ud0e4"+
    "\0\164\0\ud11e\0\164\0\ud158\0\164\0\ud192\0\ud1cc\0\ud206"+
    "\0\ud240\0\ud27a\0\164\0\164\0\ud2b4\0\164\0\ud2ee\0\ud328"+
    "\0\ud362\0\ud39c\0\ud3d6\0\ud410\0\ud44a\0\ud484\0\ud4be\0\ud4f8"+
    "\0\ud532\0\ud56c\0\164\0\164\0\ud5a6\0\164\0\ud5e0\0\164"+
    "\0\164\0\ud61a\0\164\0\ud654\0\164\0\ud68e\0\ud6c8\0\ud702"+
    "\0\ud73c\0\164\0\164\0\ud776\0\164\0\ud7b0\0\ud7ea\0\ud824"+
    "\0\ud85e\0\ud898\0\164\0\164\0\ud8d2\0\ud90c\0\ud946\0\ud980"+
    "\0\164\0\164\0\ud9ba\0\ud9f4\0\uda2e\0\uda68\0\udaa2\0\udadc"+
    "\0\udb16\0\udb50\0\udb8a\0\udbc4\0\udbfe\0\164\0\udc38\0\udc72"+
    "\0\164\0\udcac\0\udce6\0\164\0\udd20\0\udd5a\0\udd94\0\uddce"+
    "\0\164\0\164\0\ude08\0\ude42\0\ude7c\0\164\0\164\0\164"+
    "\0\udeb6\0\164\0\udef0\0\164\0\udf2a\0\udf64\0\udf9e\0\164"+
    "\0\udfd8\0\164\0\ue012\0\ue04c\0\164\0\ue086\0\164\0\ue0c0"+
    "\0\72\0\ue0fa\0\ue134\0\164\0\ue16e\0\ue1a8\0\ue1e2\0\164"+
    "\0\164\0\ue21c\0\ue256\0\ue290\0\ue2ca\0\ue304\0\164\0\164"+
    "\0\ue33e\0\164\0\ue378\0\ue3b2\0\ue3ec\0\ue426\0\164\0\164"+
    "\0\164\0\ue460\0\164\0\ue49a\0\164\0\ue4d4\0\ue50e\0\164"+
    "\0\164\0\ue548\0\ue582\0\164\0\ue5bc\0\ue5f6\0\ue630\0\ue66a"+
    "\0\ue6a4\0\164\0\ue6de\0\ue718\0\164\0\ue752\0\ue78c\0\ue7c6"+
    "\0\164\0\ue800\0\164\0\ue83a\0\ue874\0\164\0\ue8ae\0\ue8e8"+
    "\0\ue922\0\ue95c\0\ue996\0\ue9d0\0\164\0\uea0a\0\uea44\0\uea7e"+
    "\0\ueab8\0\ueaf2\0\ueb2c\0\ueb66\0\ueba0\0\uebda\0\uec14\0\164"+
    "\0\uec4e\0\uec88\0\164\0\164\0\164\0\uecc2\0\uecfc\0\ued36"+
    "\0\ued70\0\uedaa\0\uede4\0\164\0\uee1e\0\164\0\uee58\0\uee92"+
    "\0\164\0\ueecc\0\uef06\0\uef40\0\uef7a\0\uefb4\0\uefee\0\uf028"+
    "\0\164\0\uf062\0\uf09c\0\164\0\uf0d6\0\164\0\uf110\0\uf14a"+
    "\0\164\0\uf184\0\uf1be\0\164\0\164\0\uf1f8\0\uf232\0\164"+
    "\0\uf26c\0\uf2a6\0\uf2e0\0\uf31a\0\uf354\0\uf38e\0\uf3c8\0\164"+
    "\0\uf402\0\uf43c\0\uf476\0\uf4b0\0\uf4ea\0\uf524\0\uf55e\0\uf598"+
    "\0\uf5d2\0\uf60c\0\164\0\164\0\uf646\0\164\0\164\0\uf680"+
    "\0\uf6ba\0\uf6f4\0\uf72e\0\164\0\164\0\164\0\uf768\0\164"+
    "\0\164\0\uf7a2\0\uf7dc\0\uf816\0\uf850\0\uf88a\0\uf8c4\0\uf8fe"+
    "\0\164\0\uf938\0\uf972\0\uf9ac\0\uf9e6\0\ufa20\0\164\0\ufa5a"+
    "\0\164\0\ufa94\0\uface\0\164\0\ufb08\0\164\0\164\0\ufb42"+
    "\0\ufb7c\0\164\0\164\0\ufbb6\0\ufbf0\0\ufc2a\0\ufc64\0\ufc9e"+
    "\0\ufcd8\0\ufd12\0\164\0\ufd4c\0\ufd86\0\164\0\ufdc0\0\ufdfa"+
    "\0\ufe34\0\164\0\ufe6e\0\ufea8\0\ufee2\0\164\0\uff1c\0\uff56"+
    "\0\uff90\0\uffca\1\4\0\164\1\76\0\164\0\164\0\164"+
    "\1\170\1\262\1\354\1\u0126\1\u0160\1\u019a\1\u01d4\0\164"+
    "\1\u020e\1\u0248\1\u0282\0\164\1\u02bc\1\u02f6\0\164\0\164"+
    "\1\u0330\1\u036a\1\u03a4\0\164\0\164\0\164\0\164\0\164"+
    "\0\164\1\u03de\1\u0418\1\u0452\0\164\0\164\1\u048c\1\u04c6"+
    "\1\u0500\1\u053a\1\u0574\0\164\1\u05ae\1\u05e8\1\u0622\1\u065c"+
    "\1\u0696\0\164\0\164\1\u06d0\0\164\1\u070a\1\u0744\1\u077e"+
    "\1\u07b8\1\u07f2\1\u082c\0\164\1\u0866\1\u08a0\1\u08da\1\u0914"+
    "\1\u094e\1\u0988\1\u09c2\0\164\0\164\0\164\1\u09fc\0\164"+
    "\1\u0a36\0\164\1\u0a70\0\164\1\u0aaa\1\u0ae4\1\u0b1e\1\u0b58"+
    "\0\164\1\u0b92\1\u0bcc\0\164\1\u0c06\0\164\1\u0c40\0\72"+
    "\0\164\1\u0c7a\0\164\1\u0cb4\0\164\1\u0cee\1\u0d28\0\164"+
    "\0\164\1\u0d62\0\164\1\u0d9c\1\u0dd6\0\164\1\u0e10\1\u0e4a"+
    "\1\u0e84\1\u0ebe\1\u0ef8\1\u0f32\1\u0f6c\1\u0fa6\0\164\1\u0fe0"+
    "\0\164\1\u101a\1\u1054\0\164\1\u108e\1\u10c8\1\u1102\0\164"+
    "\1\u113c\1\u1176\1\u11b0\1\u11ea\0\164\1\u1224\1\u125e\0\164"+
    "\1\u1298\1\u12d2\1\u130c\1\u1346\1\u1380\1\u13ba\1\u13f4\1\u142e"+
    "\1\u1468\1\u14a2\1\u14dc\1\u1516\1\u1550\0\164\1\u158a\0\164"+
    "\1\u15c4\1\u15fe\1\u1638\1\u1672\1\u16ac\1\u16e6\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1543];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\3\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\2\1\41\1\3\1\5\1\42\1\43\1\44\1\3"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\74\0\2\3\6\0\33\3\4\0\1\3\23\0\1\4"+
    "\43\0\1\65\26\0\2\5\37\0\1\5\25\0\3\6"+
    "\1\0\1\6\1\66\64\6\6\0\1\67\73\0\1\70"+
    "\62\0\2\3\6\0\1\3\1\71\2\3\1\72\1\73"+
    "\1\74\1\75\1\3\1\76\2\3\1\77\1\100\1\3"+
    "\1\101\7\3\1\102\3\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\103\1\3\1\104\2\3\1\105\6\3\1\106"+
    "\1\107\1\110\1\3\1\111\1\112\11\3\4\0\1\3"+
    "\22\0\2\3\6\0\3\3\1\113\1\3\1\114\1\115"+
    "\1\116\7\3\1\117\13\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\120\1\3\1\121\2\3\1\122\4\3\1\123"+
    "\2\3\1\124\1\125\1\126\1\127\1\130\11\3\4\0"+
    "\1\3\22\0\2\3\6\0\1\131\1\3\1\132\11\3"+
    "\1\133\1\3\1\134\1\3\1\135\12\3\4\0\1\3"+
    "\22\0\2\3\6\0\1\136\1\3\1\137\6\3\1\140"+
    "\2\3\1\141\3\3\1\142\12\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\143\1\3\1\144\13\3\1\145\1\3"+
    "\1\146\12\3\4\0\1\3\22\0\2\3\6\0\1\147"+
    "\1\3\1\150\2\3\1\151\1\3\1\152\4\3\1\153"+
    "\1\3\1\154\1\3\1\155\12\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\156\4\3\1\157\1\3\1\160\2\3"+
    "\1\161\1\3\1\162\3\3\1\163\12\3\4\0\1\3"+
    "\22\0\2\3\6\0\1\164\17\3\1\165\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\1\166\1\3\1\167\2\3"+
    "\1\170\1\3\1\171\4\3\1\172\1\3\1\173\1\3"+
    "\1\174\12\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\175\4\3\1\176\3\3\1\177\13\3\4\0\1\3"+
    "\22\0\2\3\6\0\1\200\1\3\1\201\2\3\1\202"+
    "\6\3\1\203\1\3\1\204\1\3\1\205\1\206\11\3"+
    "\4\0\1\3\22\0\2\3\6\0\1\3\1\207\4\3"+
    "\1\210\1\3\1\211\6\3\1\212\5\3\1\213\5\3"+
    "\4\0\1\3\22\0\2\3\6\0\1\214\1\3\1\215"+
    "\1\3\1\216\4\3\1\217\1\220\1\221\1\222\1\3"+
    "\1\223\1\3\1\224\1\225\3\3\1\226\4\3\1\227"+
    "\4\0\1\3\22\0\2\3\6\0\5\3\1\230\1\231"+
    "\1\3\1\232\1\233\1\3\1\234\1\235\11\3\1\236"+
    "\1\237\3\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\240\30\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\241\2\3\1\242\1\3\1\243\5\3\1\244\2\3"+
    "\1\245\12\3\4\0\1\3\22\0\2\3\6\0\20\3"+
    "\1\246\12\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\247\12\3\1\250\1\251\14\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\252\1\3\1\253\12\3\1\254\1\255"+
    "\1\3\1\256\12\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\257\4\3\1\260\4\3\1\261\3\3\1\262\1\3"+
    "\1\263\12\3\4\0\1\3\22\0\2\3\6\0\1\264"+
    "\15\3\1\265\14\3\4\0\1\3\22\0\2\3\6\0"+
    "\20\3\1\266\12\3\4\0\1\3\24\0\2\267\26\0"+
    "\1\270\10\0\1\267\74\0\1\271\76\0\1\272\71\0"+
    "\1\273\71\0\1\274\71\0\1\275\74\0\1\276\74\0"+
    "\1\277\73\0\1\300\73\0\1\301\72\0\1\302\4\0"+
    "\1\65\10\0\1\303\33\0\2\303\21\0\3\67\1\0"+
    "\1\67\1\0\1\67\1\304\62\67\3\70\1\305\1\70"+
    "\1\305\2\70\1\306\61\70\1\0\2\3\6\0\1\307"+
    "\1\310\31\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\311\16\3\1\312\11\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\3\1\313\17\3\1\314\11\3\4\0\1\3"+
    "\22\0\2\3\6\0\4\3\1\315\2\3\1\316\23\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\317\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\320\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\17\3\1\321\13\3"+
    "\4\0\1\3\22\0\2\3\6\0\11\3\1\322\5\3"+
    "\1\323\13\3\4\0\1\3\22\0\2\3\6\0\22\3"+
    "\1\324\10\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\325\14\3\1\326\11\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\327\5\3\1\330\1\331\1\332\1\333\5\3"+
    "\1\334\13\3\4\0\1\3\22\0\2\3\6\0\20\3"+
    "\1\335\12\3\4\0\1\3\22\0\2\3\6\0\25\3"+
    "\1\336\5\3\4\0\1\3\22\0\2\3\6\0\11\3"+
    "\1\337\21\3\4\0\1\3\22\0\2\3\6\0\1\340"+
    "\16\3\1\341\13\3\4\0\1\3\22\0\2\3\6\0"+
    "\14\3\1\342\10\3\1\343\5\3\4\0\1\3\22\0"+
    "\2\3\6\0\6\3\1\344\24\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\345\1\3\1\346\4\3\1\347"+
    "\4\3\1\350\14\3\4\0\1\3\22\0\2\3\6\0"+
    "\5\3\1\351\25\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\3\1\352\7\3\1\353\21\3\4\0\1\3\22\0"+
    "\2\3\6\0\17\3\1\354\13\3\4\0\1\3\22\0"+
    "\2\3\6\0\11\3\1\355\21\3\4\0\1\3\22\0"+
    "\2\3\6\0\15\3\1\356\15\3\4\0\1\3\22\0"+
    "\2\3\6\0\3\3\1\357\21\3\1\360\5\3\4\0"+
    "\1\3\22\0\2\3\6\0\1\361\13\3\1\362\1\3"+
    "\1\363\2\3\1\364\11\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\365\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\25\3\1\366\5\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\367\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\13\3\1\370\17\3\4\0\1\3\22\0\2\3"+
    "\6\0\13\3\1\371\17\3\4\0\1\3\22\0\2\3"+
    "\6\0\16\3\1\372\14\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\373\3\3\1\374\2\3\1\375\1\376\1\377"+
    "\1\3\1\u0100\3\3\1\u0101\7\3\1\u0102\3\3\4\0"+
    "\1\3\22\0\2\3\6\0\7\3\1\u0103\23\3\4\0"+
    "\1\3\22\0\2\3\6\0\22\3\1\u0104\10\3\4\0"+
    "\1\3\22\0\2\3\6\0\7\3\1\u0105\16\3\1\u0106"+
    "\4\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u0107"+
    "\20\3\1\u0108\5\3\4\0\1\3\22\0\2\3\6\0"+
    "\3\3\1\u0109\27\3\4\0\1\3\22\0\2\3\6\0"+
    "\12\3\1\u010a\20\3\4\0\1\3\22\0\2\3\6\0"+
    "\7\3\1\u010b\15\3\1\u010c\5\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u010d\1\3\1\u010e\2\3\1\u010f"+
    "\21\3\4\0\1\3\22\0\2\3\6\0\6\3\1\u0110"+
    "\10\3\1\u0111\13\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u0112\7\3\1\u0113\16\3\1\u0114\3\3\4\0\1\3"+
    "\22\0\2\3\6\0\6\3\1\u0115\15\3\1\u0116\6\3"+
    "\4\0\1\3\22\0\2\3\6\0\1\u0117\10\3\1\u0118"+
    "\14\3\1\u0119\4\3\4\0\1\3\22\0\2\3\6\0"+
    "\7\3\1\u011a\7\3\1\u011b\13\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u011c\26\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u011d\15\3\1\u011e\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u011f\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u0120\1\u0121\23\3"+
    "\4\0\1\3\22\0\2\3\6\0\5\3\1\u0122\1\3"+
    "\1\u0123\23\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u0124\6\3\1\u0125\16\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u0126\2\3\1\u0127\7\3\1\u0128\13\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u0129\15\3"+
    "\1\u012a\12\3\4\0\1\3\22\0\2\3\6\0\14\3"+
    "\1\u012b\3\3\1\u012c\12\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\u012d\1\3\1\u012e\30\3\4\0\1\3\22\0"+
    "\2\3\6\0\5\3\1\u012f\25\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\u0130\4\3\1\u0131\1\u0132\1\u0133\4\3"+
    "\1\u0134\10\3\1\u0135\5\3\4\0\1\3\22\0\2\3"+
    "\6\0\27\3\1\u0136\3\3\4\0\1\3\22\0\2\3"+
    "\6\0\7\3\1\u0137\4\3\1\u0138\16\3\4\0\1\3"+
    "\22\0\2\3\6\0\1\3\1\u0139\3\3\1\u013a\11\3"+
    "\1\u013b\13\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u013c\25\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u013d\13\3\1\u013e\1\3\1\u013f\12\3\4\0\1\3"+
    "\22\0\2\3\6\0\1\u0140\32\3\4\0\1\3\22\0"+
    "\2\3\6\0\15\3\1\u0141\15\3\4\0\1\3\22\0"+
    "\2\3\6\0\27\3\1\u0142\3\3\4\0\1\3\22\0"+
    "\2\3\6\0\17\3\1\u0143\13\3\4\0\1\3\22\0"+
    "\2\3\6\0\7\3\1\u0144\3\3\1\u0145\2\3\1\u0146"+
    "\5\3\1\u0147\6\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\3\1\u0148\11\3\1\u0149\17\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\u014a\1\3\1\u014b\13\3\1\u014c\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\11\3\1\u014d\21\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u014e\15\3"+
    "\1\u014f\10\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u0150\15\3\1\u0151\12\3\4\0\1\3\22\0\2\3"+
    "\6\0\7\3\1\u0152\23\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u0153\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u0154\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u0155\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\3\1\u0156\2\3\1\u0157\1\3\1\u0158\1\u0159"+
    "\1\3\1\u015a\1\3\1\u015b\2\3\1\u015c\1\u015d\13\3"+
    "\4\0\1\3\22\0\2\3\6\0\20\3\1\u015e\12\3"+
    "\4\0\1\3\22\0\2\3\6\0\25\3\1\u015f\5\3"+
    "\4\0\1\3\22\0\2\3\6\0\27\3\1\u0160\3\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u0161\2\3"+
    "\1\u0162\1\3\1\u0163\5\3\1\u0164\5\3\1\u0165\5\3"+
    "\4\0\1\3\22\0\2\3\6\0\1\u0166\32\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u0167\4\3\1\u0168"+
    "\20\3\4\0\1\3\22\0\2\3\6\0\14\3\1\u0169"+
    "\16\3\4\0\1\3\22\0\2\3\6\0\1\u016a\32\3"+
    "\4\0\1\3\22\0\2\3\6\0\15\3\1\u016b\7\3"+
    "\1\u016c\5\3\4\0\1\3\22\0\2\3\6\0\23\3"+
    "\1\u016d\7\3\4\0\1\3\22\0\2\3\6\0\25\3"+
    "\1\u016e\5\3\4\0\1\3\22\0\2\3\6\0\17\3"+
    "\1\u016f\13\3\4\0\1\3\22\0\2\3\6\0\1\u0170"+
    "\32\3\4\0\1\3\22\0\2\3\6\0\7\3\1\u0171"+
    "\23\3\4\0\1\3\22\0\2\3\6\0\1\3\1\u0172"+
    "\31\3\4\0\1\3\22\0\2\3\6\0\7\3\1\u0173"+
    "\23\3\4\0\1\3\22\0\2\3\6\0\10\3\1\u0174"+
    "\22\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u0175"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u0176"+
    "\1\3\1\u0177\26\3\4\0\1\3\22\0\2\3\6\0"+
    "\4\3\1\u0178\26\3\4\0\1\3\22\0\2\3\6\0"+
    "\6\3\1\u0179\24\3\4\0\1\3\22\0\2\3\6\0"+
    "\2\3\1\u017a\30\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u017b\32\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u017c\26\3\4\0\1\3\22\0\2\3\6\0\1\u017d"+
    "\17\3\1\u017e\12\3\4\0\1\3\22\0\2\3\6\0"+
    "\20\3\1\u017f\12\3\4\0\1\3\22\0\2\3\6\0"+
    "\4\3\1\u0180\26\3\4\0\1\3\22\0\2\3\6\0"+
    "\6\3\1\u0181\24\3\4\0\1\3\22\0\2\3\6\0"+
    "\21\3\1\u0182\11\3\4\0\1\3\22\0\2\3\6\0"+
    "\7\3\1\u0183\23\3\4\0\1\3\22\0\2\3\6\0"+
    "\3\3\1\u0184\1\u0185\1\u0186\25\3\4\0\1\3\22\0"+
    "\2\3\6\0\5\3\1\u0187\25\3\4\0\1\3\22\0"+
    "\2\3\6\0\6\3\1\u0188\24\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\3\1\u0189\4\3\1\u018a\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u018b\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u018c\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u018d\13\3\1\u018e"+
    "\14\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u018f"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\5\3\1\u0190"+
    "\25\3\4\0\1\3\22\0\2\3\6\0\5\3\1\u0191"+
    "\1\3\1\u0192\23\3\4\0\1\3\22\0\2\3\6\0"+
    "\2\3\1\u0193\30\3\4\0\1\3\22\0\2\3\6\0"+
    "\16\3\1\u0194\14\3\4\0\1\3\52\0\1\u0195\42\0"+
    "\1\65\3\0\1\u0196\40\0\1\u0196\1\0\1\u0196\20\0"+
    "\3\67\1\0\1\67\1\0\1\67\1\304\1\u0197\61\67"+
    "\10\305\1\u0198\61\305\3\70\1\305\1\70\1\305\1\70"+
    "\1\u0199\1\306\61\70\1\0\2\3\6\0\16\3\1\u019a"+
    "\14\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u019b"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\20\3\1\u019c"+
    "\12\3\4\0\1\3\22\0\2\3\6\0\16\3\1\u019d"+
    "\14\3\4\0\1\3\22\0\2\3\6\0\12\3\1\u019e"+
    "\20\3\4\0\1\3\22\0\2\3\6\0\20\3\1\u019f"+
    "\12\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u01a0"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\1\u01a1\1\3"+
    "\1\u01a2\30\3\4\0\1\3\22\0\2\3\6\0\7\3"+
    "\1\u01a3\23\3\4\0\1\3\22\0\2\3\6\0\21\3"+
    "\1\u01a4\11\3\4\0\1\3\22\0\2\3\6\0\1\u01a5"+
    "\1\3\1\u01a6\30\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u01a7\1\3\1\u01a8\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\7\3\1\u01a9\6\3\1\u01aa\14\3\4\0\1\3"+
    "\22\0\2\3\6\0\11\3\1\u01ab\21\3\4\0\1\3"+
    "\22\0\2\3\6\0\13\3\1\u01ac\17\3\4\0\1\3"+
    "\22\0\2\3\6\0\13\3\1\u01ad\17\3\4\0\1\3"+
    "\22\0\2\3\6\0\11\3\1\u01ae\21\3\4\0\1\3"+
    "\22\0\2\3\6\0\22\3\1\u01af\10\3\4\0\1\3"+
    "\22\0\2\3\6\0\4\3\1\u01b0\4\3\1\u01b1\12\3"+
    "\1\u01b2\6\3\4\0\1\3\22\0\2\3\6\0\15\3"+
    "\1\u01b3\15\3\4\0\1\3\22\0\2\3\6\0\1\u01b4"+
    "\32\3\4\0\1\3\22\0\2\3\6\0\1\u01b5\32\3"+
    "\4\0\1\3\22\0\2\3\6\0\11\3\1\u01b6\21\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u01b7\2\3"+
    "\1\u01b8\25\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u01b9\30\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u01ba\12\3\1\u01bb\13\3\4\0\1\3\22\0\2\3"+
    "\6\0\7\3\1\u01bc\23\3\4\0\1\3\22\0\2\3"+
    "\3\0\1\u01bd\2\0\33\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u01be\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u01bf\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\u01c0\32\3\4\0\1\3\22\0\2\3\6\0"+
    "\7\3\1\u01c1\23\3\4\0\1\3\22\0\2\3\6\0"+
    "\4\3\1\u01c2\26\3\4\0\1\3\22\0\2\3\6\0"+
    "\13\3\1\u01c3\17\3\4\0\1\3\22\0\2\3\6\0"+
    "\6\3\1\u01c4\7\3\1\u01c5\14\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u01c6\3\3\1\u01c7\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\22\3\1\u01c8\2\3\1\u01c9"+
    "\5\3\4\0\1\3\22\0\2\3\6\0\30\3\1\u01ca"+
    "\2\3\4\0\1\3\22\0\2\3\6\0\6\3\1\u01cb"+
    "\24\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u01cc"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\32\3\1\u01cd"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u01ce\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\17\3\1\u01cf\13\3"+
    "\4\0\1\3\22\0\2\3\6\0\1\3\1\u01d0\5\3"+
    "\1\u01d1\23\3\4\0\1\3\22\0\2\3\6\0\14\3"+
    "\1\u01d2\16\3\4\0\1\3\22\0\2\3\6\0\1\u01d3"+
    "\32\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u01d4"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\20\3\1\u01d5"+
    "\12\3\4\0\1\3\22\0\2\3\6\0\7\3\1\u01d6"+
    "\23\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u01d7"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u01d8"+
    "\15\3\1\u01d9\12\3\4\0\1\3\22\0\2\3\6\0"+
    "\2\3\1\u01da\30\3\4\0\1\3\22\0\2\3\6\0"+
    "\12\3\1\u01db\20\3\4\0\1\3\22\0\2\3\6\0"+
    "\7\3\1\u01dc\23\3\4\0\1\3\22\0\2\3\6\0"+
    "\11\3\1\u01dd\5\3\1\u01de\2\3\1\u01df\10\3\4\0"+
    "\1\3\22\0\2\3\6\0\14\3\1\u01e0\1\3\1\u01e1"+
    "\14\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u01e2"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u01e3"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\1\u01e4\32\3"+
    "\4\0\1\3\22\0\2\3\6\0\7\3\1\u01e5\23\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u01e6\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u01e7\6\3"+
    "\1\u01e8\21\3\4\0\1\3\22\0\2\3\6\0\12\3"+
    "\1\u01e9\20\3\4\0\1\3\22\0\2\3\6\0\22\3"+
    "\1\u01ea\10\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u01eb\26\3\4\0\1\3\22\0\2\3\6\0\1\3"+
    "\1\u01ec\31\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u01ed\26\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u01ee\30\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u01ef\30\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u01f0\30\3\4\0\1\3\22\0\2\3\6\0\1\3"+
    "\1\u01f1\31\3\4\0\1\3\22\0\2\3\6\0\1\u01f2"+
    "\32\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u01f3"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\17\3\1\u01f4"+
    "\13\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u01f5"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\11\3\1\u01f6"+
    "\21\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u01f7"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\25\3\1\u01f8"+
    "\5\3\4\0\1\3\22\0\2\3\6\0\1\u01f9\32\3"+
    "\4\0\1\3\22\0\2\3\6\0\11\3\1\u01fa\21\3"+
    "\4\0\1\3\22\0\2\3\6\0\7\3\1\u01fb\23\3"+
    "\4\0\1\3\22\0\2\3\6\0\17\3\1\u01fc\13\3"+
    "\4\0\1\3\22\0\2\3\6\0\1\u01fd\1\3\1\u01fe"+
    "\4\3\1\u01ff\23\3\4\0\1\3\22\0\2\3\6\0"+
    "\2\3\1\u0200\1\3\1\u0201\21\3\1\u0202\4\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u0203\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\1\u0204\32\3\4\0\1\3"+
    "\22\0\2\3\6\0\7\3\1\u0205\23\3\4\0\1\3"+
    "\22\0\2\3\6\0\2\3\1\u0206\1\3\1\u0207\4\3"+
    "\1\u0208\21\3\4\0\1\3\22\0\2\3\6\0\1\u0209"+
    "\32\3\4\0\1\3\22\0\2\3\6\0\17\3\1\u020a"+
    "\13\3\4\0\1\3\22\0\2\3\6\0\17\3\1\u020b"+
    "\13\3\4\0\1\3\22\0\2\3\6\0\17\3\1\u020c"+
    "\13\3\4\0\1\3\22\0\2\3\6\0\5\3\1\u020d"+
    "\25\3\4\0\1\3\22\0\2\3\6\0\11\3\1\u020e"+
    "\21\3\4\0\1\3\22\0\2\3\6\0\5\3\1\u020f"+
    "\11\3\1\u0210\13\3\4\0\1\3\22\0\2\3\6\0"+
    "\7\3\1\u0211\23\3\4\0\1\3\22\0\2\3\6\0"+
    "\5\3\1\u0212\25\3\4\0\1\3\22\0\2\3\6\0"+
    "\4\3\1\u0213\1\3\1\u0214\10\3\1\u0215\7\3\1\u0216"+
    "\3\3\4\0\1\3\22\0\2\3\6\0\7\3\1\u0217"+
    "\4\3\1\u0218\16\3\4\0\1\3\22\0\2\3\6\0"+
    "\6\3\1\u0219\24\3\4\0\1\3\22\0\2\3\6\0"+
    "\13\3\1\u021a\11\3\1\u021b\5\3\4\0\1\3\22\0"+
    "\2\3\6\0\16\3\1\u021c\14\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\3\1\u021d\31\3\4\0\1\3\22\0"+
    "\2\3\6\0\5\3\1\u021e\25\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u021f\26\3\4\0\1\3\22\0"+
    "\2\3\6\0\11\3\1\u0220\21\3\4\0\1\3\22\0"+
    "\2\3\6\0\11\3\1\u0221\21\3\4\0\1\3\22\0"+
    "\2\3\6\0\11\3\1\u0222\1\3\1\u0223\3\3\1\u0224"+
    "\13\3\4\0\1\3\22\0\2\3\6\0\6\3\1\u0225"+
    "\11\3\1\u0226\4\3\1\u0227\1\3\1\u0228\3\3\4\0"+
    "\1\3\22\0\2\3\6\0\11\3\1\u0229\21\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u022a\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\7\3\1\u022b\23\3\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u022c\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u022d\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u022e\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u022f\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u0230\11\3\1\u0231"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u0232\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\1\u0233\32\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u0234\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\22\3\1\u0235\10\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u0236\25\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u0237\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\24\3\1\u0238\6\3\4\0"+
    "\1\3\22\0\2\3\6\0\26\3\1\u0239\4\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u023a\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\1\u023b\32\3\4\0\1\3"+
    "\22\0\2\3\6\0\26\3\1\u023c\4\3\4\0\1\3"+
    "\22\0\2\3\6\0\24\3\1\u023d\6\3\4\0\1\3"+
    "\22\0\2\3\6\0\30\3\1\u023e\2\3\4\0\1\3"+
    "\22\0\2\3\6\0\12\3\1\u023f\20\3\4\0\1\3"+
    "\22\0\2\3\6\0\6\3\1\u0240\24\3\4\0\1\3"+
    "\22\0\2\3\6\0\2\3\1\u0241\13\3\1\u0242\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u0243\15\3"+
    "\1\u0244\12\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u0245\30\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u0246\14\3\4\0\1\3\22\0\2\3\6\0\7\3"+
    "\1\u0247\23\3\4\0\1\3\22\0\2\3\6\0\14\3"+
    "\1\u0248\16\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u0249\26\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u024a\30\3\4\0\1\3\22\0\2\3\6\0\7\3"+
    "\1\u024b\23\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u024c\30\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u024d\30\3\4\0\1\3\22\0\2\3\6\0\14\3"+
    "\1\u024e\16\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u024f\5\3\1\u0250\22\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u0251\7\3\1\u0252\3\3\1\u0253\12\3"+
    "\4\0\1\3\22\0\2\3\6\0\17\3\1\u0254\13\3"+
    "\4\0\1\3\22\0\2\3\6\0\1\u0255\32\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u0256\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u0257\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u0258\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u0259\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\11\3\1\u025a\21\3\4\0"+
    "\1\3\22\0\2\3\6\0\17\3\1\u025b\13\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u025c\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u025d\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u025e\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\7\3\1\u025f\23\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u0260\6\3\1\u0261"+
    "\5\3\1\u0262\6\3\1\u0263\4\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u0264\30\3\4\0\1\3\22\0"+
    "\2\3\6\0\21\3\1\u0265\11\3\4\0\1\3\22\0"+
    "\2\3\6\0\17\3\1\u0266\13\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u0267\30\3\4\0\1\3\22\0"+
    "\2\3\6\0\6\3\1\u0268\24\3\4\0\1\3\22\0"+
    "\2\3\6\0\16\3\1\u0269\14\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u026a\10\3\1\u026b\17\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u026c\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u026d\25\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u026e\25\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u026f\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\14\3\1\u0270\16\3\4\0"+
    "\1\3\22\0\2\3\6\0\15\3\1\u0271\15\3\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u0272\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u0273\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\17\3\1\u0274\13\3\4\0"+
    "\1\3\22\0\2\3\6\0\7\3\1\u0275\23\3\4\0"+
    "\1\3\22\0\2\3\6\0\17\3\1\u0276\13\3\4\0"+
    "\1\3\22\0\2\3\6\0\11\3\1\u0277\21\3\4\0"+
    "\1\3\22\0\2\3\6\0\24\3\1\u0278\6\3\4\0"+
    "\1\3\22\0\2\3\6\0\22\3\1\u0279\10\3\4\0"+
    "\1\3\22\0\2\3\6\0\14\3\1\u027a\16\3\4\0"+
    "\1\3\22\0\2\3\6\0\14\3\1\u027b\16\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u027c\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u027d\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u027e\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u027f\1\u0280\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\7\3\1\u0281\23\3"+
    "\4\0\1\3\22\0\2\3\6\0\12\3\1\u0282\20\3"+
    "\4\0\1\3\22\0\2\3\6\0\24\3\1\u0283\6\3"+
    "\4\0\1\3\22\0\2\3\6\0\11\3\1\u0284\7\3"+
    "\1\u0285\11\3\4\0\1\3\22\0\2\3\6\0\14\3"+
    "\1\u0286\16\3\4\0\1\3\22\0\2\3\6\0\26\3"+
    "\1\u0287\4\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u0288\24\3\4\0\1\3\23\0\1\65\67\0\3\u0197"+
    "\1\305\1\u0197\1\305\1\u0197\1\u0289\1\u028a\61\u0197\7\305"+
    "\1\u028b\1\u0198\61\305\3\u028c\1\0\1\u028c\1\0\1\u028d"+
    "\1\u028e\62\u028c\1\0\2\3\6\0\6\3\1\u028f\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\5\3\1\u0290\25\3"+
    "\4\0\1\3\22\0\2\3\6\0\11\3\1\u0291\21\3"+
    "\4\0\1\3\22\0\2\3\6\0\20\3\1\u0292\12\3"+
    "\4\0\1\3\22\0\2\3\6\0\20\3\1\u0293\12\3"+
    "\4\0\1\3\22\0\2\3\6\0\7\3\1\u0294\23\3"+
    "\4\0\1\3\22\0\2\3\6\0\5\3\1\u0295\25\3"+
    "\4\0\1\3\22\0\2\3\6\0\15\3\1\u0296\15\3"+
    "\4\0\1\3\22\0\2\3\6\0\7\3\1\u0297\23\3"+
    "\4\0\1\3\22\0\2\3\6\0\21\3\1\u0298\11\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u0299\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\14\3\1\u029a\16\3"+
    "\4\0\1\3\22\0\2\3\6\0\5\3\1\u029b\25\3"+
    "\4\0\1\3\22\0\2\3\6\0\1\u029c\32\3\4\0"+
    "\1\3\22\0\2\3\6\0\25\3\1\u029d\5\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u029e\25\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u029f\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u02a0\10\3\1\u02a1"+
    "\14\3\4\0\1\3\22\0\2\3\6\0\20\3\1\u02a2"+
    "\12\3\4\0\1\3\22\0\2\3\6\0\7\3\1\u02a3"+
    "\23\3\4\0\1\3\22\0\2\3\6\0\16\3\1\u02a4"+
    "\14\3\4\0\1\3\22\0\2\3\6\0\25\3\1\u02a5"+
    "\5\3\4\0\1\3\22\0\2\3\6\0\14\3\1\u02a6"+
    "\16\3\4\0\1\3\22\0\2\3\6\0\5\3\1\u02a7"+
    "\25\3\4\0\1\3\22\0\2\3\6\0\1\u02a8\32\3"+
    "\4\0\1\3\22\0\2\3\6\0\13\3\1\u02a9\17\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u02aa\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\27\3\1\u02ab\3\3"+
    "\4\0\1\3\34\0\1\u02ac\57\0\2\3\6\0\21\3"+
    "\1\u02ad\11\3\4\0\1\3\22\0\2\3\6\0\13\3"+
    "\1\u02ae\17\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u02af\30\3\4\0\1\3\22\0\2\3\6\0\17\3"+
    "\1\u02b0\13\3\4\0\1\3\22\0\2\3\6\0\20\3"+
    "\1\u02b1\12\3\4\0\1\3\22\0\2\3\6\0\17\3"+
    "\1\u02b2\13\3\4\0\1\3\22\0\2\3\6\0\7\3"+
    "\1\u02b3\23\3\4\0\1\3\22\0\2\3\6\0\11\3"+
    "\1\u02b4\21\3\4\0\1\3\22\0\2\3\6\0\22\3"+
    "\1\u02b5\10\3\4\0\1\3\22\0\2\3\6\0\11\3"+
    "\1\u02b6\21\3\4\0\1\3\22\0\2\3\6\0\17\3"+
    "\1\u02b7\3\3\1\u02b8\7\3\4\0\1\3\22\0\2\3"+
    "\6\0\14\3\1\u02b9\16\3\4\0\1\3\22\0\2\3"+
    "\6\0\30\3\1\u02ba\2\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u02bb\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u02bc\13\3\1\u02bd\7\3\1\u02be\2\3"+
    "\4\0\1\3\22\0\2\3\6\0\5\3\1\u02bf\25\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u02c0\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\5\3\1\u02c1\25\3"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u02c2\16\3"+
    "\1\u02c3\5\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u02c4\14\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u02c5\12\3\1\u02c6\12\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u02c7\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\24\3\1\u02c8\6\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u02c9\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\15\3\1\u02ca\15\3\4\0\1\3\22\0\2\3"+
    "\6\0\20\3\1\u02cb\12\3\4\0\1\3\22\0\2\3"+
    "\6\0\14\3\1\u02cc\16\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u02cd\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\20\3\1\u02ce\12\3\4\0\1\3\22\0\2\3"+
    "\6\0\17\3\1\u02cf\13\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u02d0\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\16\3\1\u02d1\14\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u02d2\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\7\3\1\u02d3\23\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u02d4\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\14\3\1\u02d5\16\3\4\0\1\3\22\0\2\3"+
    "\6\0\16\3\1\u02d6\14\3\4\0\1\3\22\0\2\3"+
    "\6\0\7\3\1\u02d7\23\3\4\0\1\3\22\0\2\3"+
    "\6\0\6\3\1\u02d8\24\3\4\0\1\3\22\0\2\3"+
    "\6\0\7\3\1\u02d9\23\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u02da\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u02db\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\30\3\1\u02dc\2\3\4\0\1\3\22\0\2\3"+
    "\6\0\12\3\1\u02dd\20\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u02de\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u02df\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u02e0\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u02e1\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\6\3\1\u02e2\24\3\4\0\1\3\22\0\2\3"+
    "\6\0\10\3\1\u02e3\22\3\4\0\1\3\22\0\2\3"+
    "\6\0\16\3\1\u02e4\14\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u02e5\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\u02e6\32\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\3\1\u02e7\31\3\4\0\1\3\22\0\2\3\6\0"+
    "\7\3\1\u02e8\23\3\4\0\1\3\22\0\2\3\6\0"+
    "\2\3\1\u02e9\30\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u02ea\32\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u02eb\26\3\4\0\1\3\22\0\2\3\6\0\17\3"+
    "\1\u02ec\13\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u02ed\26\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u02ee\30\3\4\0\1\3\22\0\2\3\6\0\1\u02ef"+
    "\27\3\1\u02f0\2\3\4\0\1\3\22\0\2\3\6\0"+
    "\24\3\1\u02f1\6\3\4\0\1\3\22\0\2\3\6\0"+
    "\2\3\1\u02f2\30\3\4\0\1\3\22\0\2\3\6\0"+
    "\20\3\1\u02f3\12\3\4\0\1\3\22\0\2\3\6\0"+
    "\2\3\1\u02f4\30\3\4\0\1\3\22\0\2\3\6\0"+
    "\2\3\1\u02f5\30\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u02f6\15\3\1\u02f7\14\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u02f8\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u02f9\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u02fa\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\u02fb\32\3\4\0\1\3\22\0\2\3\6\0"+
    "\25\3\1\u02fc\5\3\4\0\1\3\22\0\2\3\6\0"+
    "\4\3\1\u02fd\26\3\4\0\1\3\22\0\2\3\6\0"+
    "\14\3\1\u02fe\16\3\4\0\1\3\22\0\2\3\6\0"+
    "\16\3\1\u02ff\14\3\4\0\1\3\22\0\2\3\6\0"+
    "\6\3\1\u0300\24\3\4\0\1\3\22\0\2\3\6\0"+
    "\7\3\1\u0301\23\3\4\0\1\3\22\0\2\3\6\0"+
    "\16\3\1\u0302\14\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u0303\32\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u0304\30\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u0305\14\3\4\0\1\3\22\0\2\3\6\0\1\u0306"+
    "\32\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u0307"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u0308"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\5\3\1\u0309"+
    "\25\3\4\0\1\3\22\0\2\3\6\0\1\u030a\32\3"+
    "\4\0\1\3\22\0\2\3\6\0\16\3\1\u030b\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u030c\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\16\3\1\u030d\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u030e\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u030f\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\25\3\1\u0310\5\3"+
    "\4\0\1\3\22\0\2\3\6\0\27\3\1\u0311\3\3"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u0312\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\14\3\1\u0313\16\3"+
    "\4\0\1\3\22\0\2\3\6\0\20\3\1\u0314\12\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u0315\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\5\3\1\u0316\25\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u0317\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\22\3\1\u0318\10\3"+
    "\4\0\1\3\22\0\2\3\6\0\14\3\1\u0319\16\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u031a\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u031b\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\24\3\1\u031c\6\3"+
    "\4\0\1\3\22\0\2\3\6\0\17\3\1\u031d\13\3"+
    "\4\0\1\3\22\0\2\3\6\0\7\3\1\u031e\23\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u031f\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\3\3\1\u0320\27\3"+
    "\4\0\1\3\22\0\2\3\6\0\11\3\1\u0321\21\3"+
    "\4\0\1\3\22\0\2\3\6\0\5\3\1\u0322\14\3"+
    "\1\u0323\10\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u0324\25\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u0325\24\3\4\0\1\3\22\0\2\3\6\0\14\3"+
    "\1\u0326\16\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u0327\26\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u0328\14\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u0329\1\u032a\24\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u032b\32\3\4\0\1\3\22\0\2\3\6\0\1\3"+
    "\1\u032c\31\3\4\0\1\3\22\0\2\3\6\0\17\3"+
    "\1\u032d\13\3\4\0\1\3\22\0\2\3\6\0\11\3"+
    "\1\u032e\21\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u032f\14\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u0330\25\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u0331\24\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u0332\14\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u0333\24\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u0334\14\3\4\0\1\3\22\0\2\3\6\0\7\3"+
    "\1\u0335\23\3\4\0\1\3\22\0\2\3\6\0\25\3"+
    "\1\u0336\5\3\4\0\1\3\22\0\2\3\6\0\1\3"+
    "\1\u0337\31\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u0338\30\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u0339\26\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u033a\30\3\4\0\1\3\22\0\2\3\6\0\7\3"+
    "\1\u033b\23\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u033c\25\3\4\0\1\3\22\0\2\3\6\0\1\u033d"+
    "\17\3\1\u033e\12\3\4\0\1\3\22\0\2\3\6\0"+
    "\4\3\1\u033f\26\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u0340\32\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u0341\25\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u0342\30\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u0343\26\3\4\0\1\3\22\0\2\3\6\0\1\3"+
    "\1\u0344\1\3\1\u0345\1\3\1\u0346\24\3\1\u0347\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u0348\4\3\1\u0349"+
    "\5\3\4\0\1\3\22\0\2\3\6\0\5\3\1\u034a"+
    "\25\3\4\0\1\3\22\0\2\3\6\0\14\3\1\u034b"+
    "\16\3\4\0\1\3\22\0\2\3\6\0\5\3\1\u034c"+
    "\25\3\4\0\1\3\22\0\2\3\6\0\7\3\1\u034d"+
    "\23\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u034e"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\13\3\1\u034f"+
    "\17\3\4\0\1\3\22\0\2\3\6\0\1\u0350\32\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u0351\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\16\3\1\u0352\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\12\3\1\u0353\20\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u0354\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u0355\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\7\3\1\u0356\23\3"+
    "\4\0\1\3\22\0\2\3\6\0\12\3\1\u0357\20\3"+
    "\4\0\1\3\22\0\2\3\6\0\10\3\1\u0358\22\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u0359\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u035a\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u035b\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u035c\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\16\3\1\u035d\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\12\3\1\u035e\20\3"+
    "\4\0\1\3\22\0\2\3\6\0\16\3\1\u035f\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u0360\30\3"+
    "\4\0\1\3\21\0\3\u0197\1\305\1\u0197\1\305\1\u0197"+
    "\1\u0289\65\u0197\1\305\1\u0197\1\305\1\u0197\1\304\1\u028a"+
    "\61\u0197\6\0\1\u0361\1\u0362\62\0\3\u028c\1\0\1\u028c"+
    "\1\0\67\u028c\1\0\1\u028c\1\0\1\67\66\u028c\1\0"+
    "\1\u028c\1\0\2\u028c\1\70\61\u028c\1\0\2\3\6\0"+
    "\22\3\1\u0363\10\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u0364\32\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u0365\24\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u0366\25\3\4\0\1\3\22\0\2\3\6\0\14\3"+
    "\1\u0367\16\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u0368\26\3\4\0\1\3\22\0\2\3\6\0\1\u0369"+
    "\32\3\4\0\1\3\22\0\2\3\6\0\20\3\1\u036a"+
    "\12\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u036b"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u036c"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\7\3\1\u036d"+
    "\23\3\4\0\1\3\22\0\2\3\6\0\5\3\1\u036e"+
    "\25\3\4\0\1\3\22\0\2\3\6\0\5\3\1\u036f"+
    "\25\3\4\0\1\3\22\0\2\3\6\0\1\u0370\32\3"+
    "\4\0\1\3\22\0\2\3\6\0\16\3\1\u0371\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\20\3\1\u0372\12\3"+
    "\4\0\1\3\22\0\2\3\6\0\16\3\1\u0373\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u0374\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u0375\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u0376\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u0377\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\16\3\1\u0378\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u0379\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u037a\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\11\3\1\u037b\21\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u037c\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\17\3\1\u037d\13\3"+
    "\4\0\1\3\22\0\2\3\6\0\7\3\1\u037e\23\3"+
    "\4\0\1\3\35\0\1\u037f\56\0\2\3\6\0\13\3"+
    "\1\u0380\17\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u0381\30\3\4\0\1\3\22\0\2\3\6\0\17\3"+
    "\1\u0382\13\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u0383\14\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u0384\25\3\4\0\1\3\22\0\2\3\6\0\1\u0385"+
    "\6\3\1\u0386\23\3\4\0\1\3\22\0\2\3\6\0"+
    "\16\3\1\u0387\14\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u0388\32\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u0389\30\3\4\0\1\3\22\0\2\3\6\0\20\3"+
    "\1\u038a\12\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u038b\26\3\4\0\1\3\22\0\2\3\6\0\20\3"+
    "\1\u038c\12\3\4\0\1\3\22\0\2\3\6\0\1\u038d"+
    "\32\3\4\0\1\3\22\0\2\3\6\0\26\3\1\u038e"+
    "\4\3\4\0\1\3\22\0\2\3\6\0\5\3\1\u038f"+
    "\25\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u0390"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\6\3\1\u0391"+
    "\24\3\4\0\1\3\22\0\2\3\6\0\20\3\1\u0392"+
    "\12\3\4\0\1\3\22\0\2\3\6\0\6\3\1\u0393"+
    "\24\3\4\0\1\3\22\0\2\3\6\0\16\3\1\u0394"+
    "\14\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u0395"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\10\3\1\u0396"+
    "\22\3\4\0\1\3\22\0\2\3\6\0\13\3\1\u0397"+
    "\17\3\4\0\1\3\22\0\2\3\6\0\11\3\1\u0398"+
    "\21\3\4\0\1\3\22\0\2\3\6\0\16\3\1\u0399"+
    "\14\3\4\0\1\3\22\0\2\3\6\0\5\3\1\u039a"+
    "\25\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u039b"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u039c"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\1\u039d\32\3"+
    "\4\0\1\3\22\0\2\3\6\0\14\3\1\u039e\16\3"+
    "\4\0\1\3\22\0\2\3\6\0\16\3\1\u039f\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\1\u03a0\32\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u03a1\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\10\3\1\u03a2\22\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u03a3\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\14\3\1\u03a4\16\3\4\0"+
    "\1\3\22\0\2\3\6\0\11\3\1\u03a5\21\3\4\0"+
    "\1\3\22\0\2\3\6\0\1\u03a6\32\3\4\0\1\3"+
    "\22\0\2\3\6\0\6\3\1\u03a7\24\3\4\0\1\3"+
    "\22\0\2\3\6\0\20\3\1\u03a8\12\3\4\0\1\3"+
    "\22\0\2\3\6\0\10\3\1\u03a9\22\3\4\0\1\3"+
    "\22\0\2\3\6\0\2\3\1\u03aa\30\3\4\0\1\3"+
    "\22\0\2\3\6\0\16\3\1\u03ab\14\3\4\0\1\3"+
    "\22\0\2\3\6\0\1\u03ac\32\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\u03ad\32\3\4\0\1\3\22\0\2\3"+
    "\6\0\22\3\1\u03ae\10\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\u03af\32\3\4\0\1\3\22\0\2\3\6\0"+
    "\5\3\1\u03b0\25\3\4\0\1\3\22\0\2\3\6\0"+
    "\20\3\1\u03b1\12\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\3\1\u03b2\3\3\1\u03b3\25\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\3\1\u03b4\31\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u03b5\30\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u03b6\30\3\4\0\1\3\22\0"+
    "\2\3\6\0\11\3\1\u03b7\21\3\4\0\1\3\22\0"+
    "\2\3\6\0\7\3\1\u03b8\23\3\4\0\1\3\22\0"+
    "\2\3\6\0\13\3\1\u03b9\17\3\4\0\1\3\22\0"+
    "\2\3\6\0\6\3\1\u03ba\24\3\4\0\1\3\22\0"+
    "\2\3\6\0\5\3\1\u03bb\25\3\4\0\1\3\22\0"+
    "\2\3\6\0\17\3\1\u03bc\13\3\4\0\1\3\22\0"+
    "\2\3\6\0\17\3\1\u03bd\13\3\4\0\1\3\22\0"+
    "\2\3\6\0\16\3\1\u03be\14\3\4\0\1\3\22\0"+
    "\2\3\6\0\6\3\1\u03bf\24\3\4\0\1\3\22\0"+
    "\2\3\6\0\11\3\1\u03c0\21\3\4\0\1\3\22\0"+
    "\2\3\6\0\5\3\1\u03c1\25\3\4\0\1\3\22\0"+
    "\2\3\6\0\5\3\1\u03c2\25\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u03c3\26\3\4\0\1\3\22\0"+
    "\2\3\6\0\6\3\1\u03c4\24\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u03c5\26\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u03c6\26\3\4\0\1\3\22\0"+
    "\2\3\6\0\22\3\1\u03c7\10\3\4\0\1\3\22\0"+
    "\2\3\6\0\20\3\1\u03c8\12\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\u03c9\32\3\4\0\1\3\22\0\2\3"+
    "\6\0\7\3\1\u03ca\23\3\4\0\1\3\22\0\2\3"+
    "\6\0\6\3\1\u03cb\24\3\4\0\1\3\22\0\2\3"+
    "\6\0\17\3\1\u03cc\13\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u03cd\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u03ce\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u03cf\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\7\3\1\u03d0\23\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\3\1\u03d1\31\3\4\0\1\3\22\0\2\3"+
    "\6\0\11\3\1\u03d2\21\3\4\0\1\3\22\0\2\3"+
    "\6\0\16\3\1\u03d3\14\3\4\0\1\3\22\0\2\3"+
    "\6\0\16\3\1\u03d4\14\3\4\0\1\3\22\0\2\3"+
    "\6\0\20\3\1\u03d5\12\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u03d6\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\26\3\1\u03d7\4\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u03d8\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\13\3\1\u03d9\17\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u03da\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u03db\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u03dc\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\16\3\1\u03dd\14\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\u03de\32\3\4\0\1\3\22\0\2\3\6\0"+
    "\17\3\1\u03df\7\3\1\u03e0\3\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u03e1\30\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u03e2\30\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\3\1\u03e3\31\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\u03e4\32\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u03e5\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\17\3\1\u03e6\13\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u03e7\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\16\3\1\u03e8\14\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u03e9\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u03ea\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\20\3\1\u03eb\12\3\4\0\1\3\22\0\2\3"+
    "\6\0\16\3\1\u03ec\14\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\3\1\u03ed\31\3\4\0\1\3\22\0\2\3"+
    "\6\0\20\3\1\u03ee\12\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u03ef\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\11\3\1\u03f0\5\3\1\u03f1\13\3\4\0\1\3"+
    "\22\0\2\3\6\0\7\3\1\u03f2\23\3\4\0\1\3"+
    "\22\0\2\3\6\0\1\u03f3\32\3\4\0\1\3\22\0"+
    "\2\3\6\0\20\3\1\u03f4\12\3\4\0\1\3\22\0"+
    "\2\3\6\0\5\3\1\u03f5\25\3\4\0\1\3\22\0"+
    "\2\3\6\0\25\3\1\u03f6\5\3\4\0\1\3\22\0"+
    "\2\3\6\0\16\3\1\u03f7\14\3\4\0\1\3\22\0"+
    "\2\3\6\0\5\3\1\u03f8\25\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\3\1\u03f9\31\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\u03fa\32\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u03fb\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u03fc\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\30\3\1\u03fd\2\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\u03fe\32\3\4\0\1\3\22\0\2\3\6\0"+
    "\25\3\1\u03ff\5\3\4\0\1\3\22\0\2\3\6\0"+
    "\20\3\1\u0400\12\3\4\0\1\3\22\0\2\3\6\0"+
    "\14\3\1\u0401\16\3\4\0\1\3\22\0\2\3\6\0"+
    "\6\3\1\u0402\24\3\4\0\1\3\22\0\2\3\6\0"+
    "\16\3\1\u0403\14\3\4\0\1\3\22\0\2\3\6\0"+
    "\4\3\1\u0404\26\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u0405\32\3\4\0\1\3\22\0\2\3\6\0\7\3"+
    "\1\u0406\23\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u0407\26\3\4\0\1\3\22\0\2\3\6\0\23\3"+
    "\1\u0408\7\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u0409\30\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u040a\30\3\4\0\1\3\22\0\2\3\6\0\20\3"+
    "\1\u040b\12\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u040c\26\3\4\0\1\3\22\0\2\3\6\0\27\3"+
    "\1\u040d\3\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u040e\24\3\4\0\1\3\22\0\2\3\6\0\1\u040f"+
    "\32\3\4\0\1\3\22\0\2\3\6\0\6\3\1\u0410"+
    "\24\3\4\0\1\3\22\0\2\3\6\0\17\3\1\u0411"+
    "\13\3\4\0\1\3\31\0\1\305\62\0\2\3\6\0"+
    "\4\3\1\u0412\26\3\4\0\1\3\22\0\2\3\6\0"+
    "\16\3\1\u0413\14\3\4\0\1\3\22\0\2\3\6\0"+
    "\4\3\1\u0414\26\3\4\0\1\3\22\0\2\3\6\0"+
    "\16\3\1\u0415\14\3\4\0\1\3\22\0\2\3\6\0"+
    "\17\3\1\u0416\13\3\4\0\1\3\22\0\2\3\6\0"+
    "\11\3\1\u0417\21\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\3\1\u0418\31\3\4\0\1\3\22\0\2\3\6\0"+
    "\4\3\1\u0419\26\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u041a\1\3\1\u041b\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u041c\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\7\3\1\u041d\23\3\4\0\1\3\22\0\2\3"+
    "\6\0\13\3\1\u041e\1\3\1\u041f\15\3\4\0\1\3"+
    "\22\0\2\3\6\0\17\3\1\u0420\13\3\4\0\1\3"+
    "\22\0\2\3\6\0\15\3\1\u0421\15\3\4\0\1\3"+
    "\22\0\2\3\6\0\11\3\1\u0422\21\3\4\0\1\3"+
    "\22\0\2\3\6\0\6\3\1\u0423\24\3\4\0\1\3"+
    "\22\0\2\3\6\0\11\3\1\u0424\21\3\4\0\1\3"+
    "\22\0\2\3\6\0\2\3\1\u0425\30\3\4\0\1\3"+
    "\22\0\2\3\6\0\1\u0426\32\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u0427\26\3\4\0\1\3\22\0"+
    "\2\3\6\0\16\3\1\u0428\14\3\4\0\1\3\34\0"+
    "\1\u0429\57\0\2\3\6\0\4\3\1\u042a\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\1\u042b\32\3\4\0\1\3"+
    "\22\0\2\3\6\0\23\3\1\u042c\7\3\4\0\1\3"+
    "\22\0\2\3\6\0\1\u042d\32\3\4\0\1\3\22\0"+
    "\2\3\6\0\11\3\1\u042e\21\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\u042f\32\3\4\0\1\3\22\0\2\3"+
    "\6\0\6\3\1\u0430\24\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u0431\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u0432\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\6\3\1\u0433\24\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\u0434\32\3\4\0\1\3\22\0\2\3\6\0"+
    "\6\3\1\u0435\24\3\4\0\1\3\22\0\2\3\6\0"+
    "\7\3\1\u0436\23\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u0437\32\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u0438\25\3\4\0\1\3\22\0\2\3\6\0\3\3"+
    "\1\u0439\27\3\4\0\1\3\22\0\2\3\6\0\7\3"+
    "\1\u043a\23\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u043b\24\3\4\0\1\3\22\0\2\3\6\0\17\3"+
    "\1\u043c\13\3\4\0\1\3\22\0\2\3\6\0\27\3"+
    "\1\u043d\3\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u043e\24\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u043f\14\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u0440\14\3\4\0\1\3\22\0\2\3\6\0\1\u0441"+
    "\32\3\4\0\1\3\22\0\2\3\6\0\11\3\1\u0442"+
    "\21\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u0443"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\11\3\1\u0444"+
    "\21\3\4\0\1\3\22\0\2\3\6\0\6\3\1\u0445"+
    "\24\3\4\0\1\3\22\0\2\3\6\0\1\3\1\u0446"+
    "\31\3\4\0\1\3\22\0\2\3\6\0\7\3\1\u0447"+
    "\23\3\4\0\1\3\22\0\2\3\6\0\1\u0448\32\3"+
    "\4\0\1\3\22\0\2\3\6\0\11\3\1\u0449\21\3"+
    "\4\0\1\3\22\0\2\3\6\0\17\3\1\u044a\13\3"+
    "\4\0\1\3\22\0\2\3\6\0\24\3\1\u044b\6\3"+
    "\4\0\1\3\22\0\2\3\6\0\22\3\1\u044c\10\3"+
    "\4\0\1\3\22\0\2\3\6\0\22\3\1\u044d\10\3"+
    "\4\0\1\3\22\0\2\3\6\0\20\3\1\u044e\12\3"+
    "\4\0\1\3\22\0\2\3\6\0\3\3\1\u044f\27\3"+
    "\4\0\1\3\22\0\2\3\6\0\20\3\1\u0450\12\3"+
    "\4\0\1\3\22\0\2\3\6\0\25\3\1\u0451\5\3"+
    "\4\0\1\3\22\0\2\3\6\0\11\3\1\u0452\21\3"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u0453\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u0454\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\1\3\1\u0455\31\3"+
    "\4\0\1\3\22\0\2\3\6\0\22\3\1\u0456\10\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u0457\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\5\3\1\u0458\25\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u0459\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u045a\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\20\3\1\u045b\12\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u045c\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\11\3\1\u045d\21\3"+
    "\4\0\1\3\22\0\2\3\6\0\13\3\1\u045e\17\3"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u045f\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\14\3\1\u0460\16\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u0461\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\1\u0462\32\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u0463\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u0464\13\3\1\u0465"+
    "\14\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u0466"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\11\3\1\u0467"+
    "\21\3\4\0\1\3\22\0\2\3\6\0\7\3\1\u0468"+
    "\23\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u0469"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\16\3\1\u046a"+
    "\14\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u046b"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\27\3\1\u046c"+
    "\3\3\4\0\1\3\22\0\2\3\6\0\21\3\1\u046d"+
    "\11\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u046e"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\14\3\1\u046f"+
    "\16\3\4\0\1\3\22\0\2\3\6\0\20\3\1\u0470"+
    "\12\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u0471"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u0472"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\6\3\1\u0473"+
    "\24\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u0474"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\6\3\1\u0475"+
    "\24\3\4\0\1\3\22\0\2\3\6\0\6\3\1\u0476"+
    "\24\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u0477"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u0478"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u0479"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\1\u047a\32\3"+
    "\4\0\1\3\22\0\2\3\6\0\5\3\1\u047b\25\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u047c\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\7\3\1\u047d\23\3"+
    "\4\0\1\3\22\0\2\3\6\0\16\3\1\u047e\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\16\3\1\u047f\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\1\u0480\32\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u0481\25\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u0482\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u0483\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u0484\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u0485\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u0486\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\30\3\1\u0487\2\3\4\0"+
    "\1\3\22\0\2\3\6\0\15\3\1\u0488\15\3\4\0"+
    "\1\3\22\0\2\3\6\0\26\3\1\u0489\4\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u048a\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\30\3\1\u048b\2\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u048c\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u048d\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u048e\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u048f\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u0490\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\17\3\1\u0491\13\3\4\0"+
    "\1\3\22\0\2\3\6\0\7\3\1\u0492\23\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u0493\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\7\3\1\u0494\23\3\4\0"+
    "\1\3\22\0\2\3\6\0\26\3\1\u0495\4\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u0496\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\17\3\1\u0497\13\3\4\0"+
    "\1\3\22\0\2\3\6\0\13\3\1\u0498\17\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u0499\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u049a\25\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u049b\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u049c\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\33\3\1\u049d\3\0\1\3"+
    "\22\0\2\3\6\0\5\3\1\u049e\25\3\4\0\1\3"+
    "\22\0\2\3\6\0\22\3\1\u049f\10\3\4\0\1\3"+
    "\22\0\2\3\6\0\2\3\1\u04a0\30\3\4\0\1\3"+
    "\22\0\2\3\6\0\23\3\1\u04a1\7\3\4\0\1\3"+
    "\22\0\2\3\6\0\2\3\1\u04a2\30\3\4\0\1\3"+
    "\22\0\2\3\6\0\20\3\1\u04a3\12\3\4\0\1\3"+
    "\22\0\2\3\6\0\2\3\1\u04a4\30\3\4\0\1\3"+
    "\22\0\2\3\6\0\1\u04a5\32\3\4\0\1\3\22\0"+
    "\2\3\6\0\30\3\1\u04a6\2\3\4\0\1\3\22\0"+
    "\2\3\6\0\15\3\1\u04a7\15\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\3\1\u04a8\31\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u04a9\26\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u04aa\30\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u04ab\26\3\4\0\1\3\22\0"+
    "\2\3\6\0\14\3\1\u04ac\16\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u04ad\26\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u04ae\30\3\4\0\1\3\22\0"+
    "\2\3\6\0\7\3\1\u04af\23\3\4\0\1\3\22\0"+
    "\2\3\6\0\20\3\1\u04b0\12\3\4\0\1\3\43\0"+
    "\1\u04b1\50\0\2\3\6\0\16\3\1\u04b2\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\25\3\1\u04b3\5\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04b4\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u04b5\25\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u04b6\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u04b7\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\22\3\1\u04b8\10\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04b9\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\27\3\1\u04ba\3\3\4\0"+
    "\1\3\22\0\2\3\6\0\25\3\1\u04bb\5\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04bc\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u04bd\25\3\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u04be\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u04bf\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\21\3\1\u04c0\11\3\4\0"+
    "\1\3\22\0\2\3\6\0\7\3\1\u04c1\23\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04c2\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\11\3\1\u04c3\21\3\4\0"+
    "\1\3\22\0\2\3\6\0\22\3\1\u04c4\10\3\4\0"+
    "\1\3\22\0\2\3\6\0\7\3\1\u04c5\23\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u04c6\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u04c7\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\24\3\1\u04c8\6\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u04c9\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\11\3\1\u04ca\21\3\4\0"+
    "\1\3\22\0\2\3\6\0\7\3\1\u04cb\23\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u04cc\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04cd\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u04ce\25\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u04cf\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u04d0\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04d1\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u04d2\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\30\3\1\u04d3\2\3\4\0"+
    "\1\3\22\0\2\3\6\0\1\3\1\u04d4\31\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04d5\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04d6\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u04d7\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u04d8\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\30\3\1\u04d9\2\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04da\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u04db\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\17\3\1\u04dc\13\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04dd\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u04de\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u04df\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u04e0\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\24\3\1\u04e1\6\3\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u04e2\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04e3\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\22\3\1\u04e4\10\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u04e5\25\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u04e6\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04e7\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04e8\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\22\3\1\u04e9\10\3\4\0"+
    "\1\3\22\0\2\3\6\0\21\3\1\u04ea\11\3\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u04eb\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\11\3\1\u04ec\21\3\4\0"+
    "\1\3\22\0\2\3\6\0\7\3\1\u04ed\23\3\4\0"+
    "\1\3\22\0\2\3\6\0\7\3\1\u04ee\23\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u04ef\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u04f0\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u04f1\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\21\3\1\u04f2\11\3\4\0"+
    "\1\3\22\0\2\3\6\0\30\3\1\u04f3\2\3\4\0"+
    "\1\3\22\0\2\3\6\0\11\3\1\u04f4\21\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u04f5\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\7\3\1\u04f6\23\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u04f7\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u04f8\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u04f9\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\14\3\1\u04fa\16\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u04fb\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u04fc\25\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04fd\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u04fe\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u04ff\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\1\u0500\32\3\4\0\1\3"+
    "\22\0\2\3\6\0\17\3\1\u0501\13\3\4\0\1\3"+
    "\22\0\2\3\6\0\5\3\1\u0502\25\3\4\0\1\3"+
    "\22\0\2\3\6\0\4\3\1\u0503\26\3\4\0\1\3"+
    "\22\0\2\3\6\0\17\3\1\u0504\13\3\4\0\1\3"+
    "\22\0\2\3\6\0\3\3\1\u0505\27\3\4\0\1\3"+
    "\22\0\2\3\6\0\5\3\1\u0506\25\3\4\0\1\3"+
    "\54\0\1\u0507\37\0\2\3\6\0\1\u0508\32\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u0509\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u050a\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\1\3\1\u050b\31\3\4\0"+
    "\1\3\22\0\2\3\6\0\7\3\1\u050c\23\3\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u050d\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u050e\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u050f\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\11\3\1\u0510\21\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u0511\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\20\3\1\u0512\12\3\4\0"+
    "\1\3\22\0\2\3\6\0\13\3\1\u0513\17\3\4\0"+
    "\1\3\22\0\2\3\6\0\21\3\1\u0514\11\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u0515\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u0516\13\3\1\u0517"+
    "\14\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u0518"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\13\3\1\u0519"+
    "\17\3\4\0\1\3\22\0\2\3\6\0\30\3\1\u051a"+
    "\2\3\4\0\1\3\22\0\2\3\6\0\6\3\1\u051b"+
    "\24\3\4\0\1\3\22\0\2\3\6\0\5\3\1\u051c"+
    "\25\3\4\0\1\3\22\0\2\3\6\0\21\3\1\u051d"+
    "\11\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u051e"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\14\3\1\u051f"+
    "\16\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u0520"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\16\3\1\u0521"+
    "\14\3\4\0\1\3\22\0\2\3\6\0\20\3\1\u0522"+
    "\12\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u0523"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\26\3\1\u0524"+
    "\4\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u0525"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\20\3\1\u0526"+
    "\12\3\4\0\1\3\22\0\2\3\6\0\20\3\1\u0527"+
    "\12\3\4\0\1\3\22\0\2\3\6\0\1\3\1\u0528"+
    "\31\3\4\0\1\3\22\0\2\3\6\0\5\3\1\u0529"+
    "\25\3\4\0\1\3\22\0\2\3\6\0\22\3\1\u052a"+
    "\10\3\4\0\1\3\22\0\2\3\6\0\6\3\1\u052b"+
    "\24\3\4\0\1\3\22\0\2\3\6\0\1\3\1\u052c"+
    "\2\3\1\u052d\7\3\1\u052e\16\3\4\0\1\3\22\0"+
    "\2\3\6\0\6\3\1\u052f\24\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u0530\26\3\4\0\1\3\22\0"+
    "\2\3\6\0\20\3\1\u0531\12\3\4\0\1\3\22\0"+
    "\2\3\6\0\6\3\1\u0532\24\3\4\0\1\3\22\0"+
    "\2\3\6\0\6\3\1\u0533\24\3\4\0\1\3\22\0"+
    "\2\3\6\0\6\3\1\u0534\24\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u0535\30\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u0536\30\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\3\1\u0537\31\3\4\0\1\3\22\0"+
    "\2\3\6\0\3\3\1\u0538\27\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u0539\26\3\4\0\1\3\22\0"+
    "\2\3\6\0\11\3\1\u053a\16\3\1\u053b\2\3\4\0"+
    "\1\3\22\0\2\3\6\0\5\3\1\u053c\25\3\4\0"+
    "\1\3\22\0\2\3\6\0\4\3\1\u053d\26\3\4\0"+
    "\1\3\22\0\2\3\6\0\21\3\1\u053e\11\3\4\0"+
    "\1\3\22\0\2\3\6\0\16\3\1\u053f\14\3\4\0"+
    "\1\3\22\0\2\3\6\0\6\3\1\u0540\24\3\4\0"+
    "\1\3\22\0\2\3\6\0\2\3\1\u0541\30\3\4\0"+
    "\1\3\22\0\2\3\6\0\1\u0542\32\3\4\0\1\3"+
    "\22\0\2\3\6\0\14\3\1\u0543\16\3\4\0\1\3"+
    "\22\0\2\3\6\0\17\3\1\u0544\4\3\1\u0545\6\3"+
    "\4\0\1\3\22\0\2\3\6\0\11\3\1\u0546\21\3"+
    "\4\0\1\3\22\0\2\3\6\0\20\3\1\u0547\12\3"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u0548\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\22\3\1\u0549\10\3"+
    "\4\0\1\3\22\0\2\3\6\0\17\3\1\u054a\13\3"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u054b\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u054c\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\17\3\1\u054d\13\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u054e\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\21\3\1\u054f\11\3"+
    "\4\0\1\3\22\0\2\3\6\0\16\3\1\u0550\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u0551\26\3"+
    "\4\0\1\3\37\0\1\u0552\54\0\2\3\6\0\4\3"+
    "\1\u0553\26\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u0554\30\3\4\0\1\3\22\0\2\3\6\0\14\3"+
    "\1\u0555\16\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u0556\30\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u0557\25\3\4\0\1\3\22\0\2\3\6\0\11\3"+
    "\1\u0558\21\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u0559\30\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u055a\26\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u055b\24\3\4\0\1\3\22\0\2\3\6\0\7\3"+
    "\1\u055c\23\3\4\0\1\3\22\0\2\3\6\0\20\3"+
    "\1\u055d\12\3\4\0\1\3\22\0\2\3\6\0\20\3"+
    "\1\u055e\12\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u055f\25\3\4\0\1\3\22\0\2\3\6\0\12\3"+
    "\1\u0560\12\3\1\u0561\5\3\4\0\1\3\22\0\2\3"+
    "\6\0\16\3\1\u0562\14\3\4\0\1\3\22\0\2\3"+
    "\6\0\17\3\1\u0563\13\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u0564\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\20\3\1\u0565\12\3\4\0\1\3\22\0\2\3"+
    "\6\0\7\3\1\u0566\23\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u0567\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\u0568\32\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u0569\32\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u056a\25\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u056b\24\3\4\0\1\3\22\0\2\3\6\0\30\3"+
    "\1\u056c\2\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u056d\26\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u056e\26\3\4\0\1\3\22\0\2\3\6\0\1\u056f"+
    "\32\3\4\0\1\3\22\0\2\3\6\0\16\3\1\u0570"+
    "\14\3\4\0\1\3\22\0\2\3\6\0\17\3\1\u0571"+
    "\13\3\4\0\1\3\22\0\2\3\6\0\1\3\1\u0572"+
    "\31\3\4\0\1\3\22\0\2\3\6\0\1\u0573\32\3"+
    "\4\0\1\3\22\0\2\3\6\0\6\3\1\u0574\24\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u0575\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\17\3\1\u0576\13\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u0577\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\12\3\1\u0578\20\3"+
    "\4\0\1\3\22\0\2\3\6\0\20\3\1\u0579\12\3"+
    "\4\0\1\3\22\0\2\3\6\0\16\3\1\u057a\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\27\3\1\u057b\3\3"+
    "\4\0\1\3\22\0\2\3\6\0\14\3\1\u057c\16\3"+
    "\4\0\1\3\22\0\2\3\6\0\17\3\1\u057d\13\3"+
    "\4\0\1\3\22\0\2\3\6\0\16\3\1\u057e\14\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u057f\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\17\3\1\u0580\13\3"+
    "\4\0\1\3\22\0\2\3\6\0\11\3\1\u0581\21\3"+
    "\4\0\1\3\22\0\2\3\6\0\1\3\1\u0582\31\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u0583\30\3"+
    "\4\0\1\3\22\0\2\3\6\0\22\3\1\u0584\10\3"+
    "\4\0\1\3\22\0\2\3\6\0\22\3\1\u0585\10\3"+
    "\4\0\1\3\22\0\2\3\6\0\20\3\1\u0586\12\3"+
    "\4\0\1\3\22\0\2\3\6\0\4\3\1\u0587\26\3"+
    "\4\0\1\3\22\0\2\3\6\0\11\3\1\u0588\21\3"+
    "\4\0\1\3\52\0\1\u0589\41\0\2\3\6\0\16\3"+
    "\1\u058a\14\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u058b\25\3\4\0\1\3\22\0\2\3\6\0\17\3"+
    "\1\u058c\13\3\4\0\1\3\22\0\2\3\6\0\1\3"+
    "\1\u058d\31\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u058e\30\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u058f\24\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u0590\24\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u0591\26\3\4\0\1\3\22\0\2\3\6\0\20\3"+
    "\1\u0592\12\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u0593\14\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u0594\24\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u0595\30\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u0596\24\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u0597\30\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u0598\25\3\4\0\1\3\22\0\2\3\6\0\15\3"+
    "\1\u0599\15\3\4\0\1\3\22\0\2\3\6\0\7\3"+
    "\1\u059a\23\3\4\0\1\3\22\0\2\3\6\0\7\3"+
    "\1\u059b\23\3\4\0\1\3\22\0\2\3\6\0\12\3"+
    "\1\u059c\20\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u059d\26\3\4\0\1\3\22\0\2\3\6\0\25\3"+
    "\1\u059e\5\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u059f\30\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u05a0\14\3\4\0\1\3\22\0\2\3\6\0\15\3"+
    "\1\u05a1\15\3\4\0\1\3\22\0\2\3\6\0\17\3"+
    "\1\u05a2\13\3\4\0\1\3\22\0\2\3\6\0\7\3"+
    "\1\u05a3\23\3\4\0\1\3\22\0\2\3\6\0\6\3"+
    "\1\u05a4\24\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u05a5\30\3\4\0\1\3\22\0\2\3\6\0\1\3"+
    "\1\u05a6\31\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u05a7\30\3\4\0\1\3\22\0\2\3\6\0\25\3"+
    "\1\u05a8\5\3\4\0\1\3\22\0\2\3\6\0\21\3"+
    "\1\u05a9\11\3\4\0\1\3\22\0\2\3\6\0\24\3"+
    "\1\u05aa\6\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u05ab\14\3\4\0\1\3\22\0\2\3\6\0\5\3"+
    "\1\u05ac\25\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u05ad\26\3\4\0\1\3\22\0\2\3\6\0\14\3"+
    "\1\u05ae\16\3\4\0\1\3\46\0\1\u05af\45\0\2\3"+
    "\6\0\20\3\1\u05b0\12\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\u05b1\32\3\4\0\1\3\22\0\2\3\6\0"+
    "\14\3\1\u05b2\16\3\4\0\1\3\22\0\2\3\6\0"+
    "\6\3\1\u05b3\24\3\4\0\1\3\22\0\2\3\6\0"+
    "\22\3\1\u05b4\10\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\3\1\u05b5\31\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\3\1\u05b6\31\3\4\0\1\3\22\0\2\3\6\0"+
    "\7\3\1\u05b7\23\3\4\0\1\3\22\0\2\3\6\0"+
    "\21\3\1\u05b8\11\3\4\0\1\3\22\0\2\3\6\0"+
    "\2\3\1\u05b9\30\3\4\0\1\3\22\0\2\3\6\0"+
    "\2\3\1\u05ba\30\3\4\0\1\3\22\0\2\3\6\0"+
    "\2\3\1\u05bb\30\3\4\0\1\3\22\0\2\3\6\0"+
    "\5\3\1\u05bc\25\3\4\0\1\3\22\0\2\3\6\0"+
    "\6\3\1\u05bd\24\3\4\0\1\3\22\0\2\3\6\0"+
    "\7\3\1\u05be\23\3\4\0\1\3\22\0\2\3\6\0"+
    "\17\3\1\u05bf\13\3\4\0\1\3\22\0\2\3\6\0"+
    "\16\3\1\u05c0\14\3\4\0\1\3\22\0\2\3\6\0"+
    "\5\3\1\u05c1\25\3\4\0\1\3\22\0\2\3\6\0"+
    "\16\3\1\u05c2\14\3\4\0\1\3\22\0\2\3\6\0"+
    "\13\3\1\u05c3\17\3\4\0\1\3\22\0\2\3\6\0"+
    "\17\3\1\u05c4\13\3\4\0\1\3\22\0\2\3\6\0"+
    "\6\3\1\u05c5\24\3\4\0\1\3\22\0\2\3\6\0"+
    "\12\3\1\u05c6\20\3\4\0\1\3\22\0\2\3\6\0"+
    "\5\3\1\u05c7\25\3\4\0\1\3\45\0\1\u05c8\46\0"+
    "\2\3\6\0\6\3\1\u05c9\24\3\4\0\1\3\22\0"+
    "\2\3\6\0\15\3\1\u05ca\15\3\4\0\1\3\22\0"+
    "\2\3\6\0\5\3\1\u05cb\25\3\4\0\1\3\22\0"+
    "\2\3\6\0\14\3\1\u05cc\16\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u05cd\30\3\4\0\1\3\22\0"+
    "\2\3\6\0\6\3\1\u05ce\24\3\4\0\1\3\22\0"+
    "\2\3\6\0\17\3\1\u05cf\13\3\4\0\1\3\22\0"+
    "\2\3\6\0\22\3\1\u05d0\10\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u05d1\30\3\4\0\1\3\22\0"+
    "\2\3\6\0\2\3\1\u05d2\30\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u05d3\26\3\4\0\1\3\22\0"+
    "\2\3\6\0\7\3\1\u05d4\23\3\4\0\1\3\22\0"+
    "\2\3\6\0\12\3\1\u05d5\20\3\4\0\1\3\22\0"+
    "\2\3\6\0\22\3\1\u05d6\10\3\4\0\1\3\22\0"+
    "\2\3\6\0\11\3\1\u05d7\21\3\4\0\1\3\22\0"+
    "\2\3\6\0\16\3\1\u05d8\14\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u05d9\26\3\4\0\1\3\22\0"+
    "\2\3\6\0\22\3\1\u05da\10\3\4\0\1\3\22\0"+
    "\2\3\6\0\4\3\1\u05db\26\3\4\0\1\3\22\0"+
    "\2\3\6\0\5\3\1\u05dc\25\3\4\0\1\3\22\0"+
    "\2\3\6\0\1\u05dd\32\3\4\0\1\3\22\0\2\3"+
    "\6\0\5\3\1\u05de\25\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u05df\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\7\3\1\u05e0\23\3\4\0\1\3\22\0\2\3"+
    "\6\0\2\3\1\u05e1\30\3\4\0\1\3\22\0\2\3"+
    "\6\0\4\3\1\u05e2\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\u05e3\32\3\4\0\1\3\22\0\2\3\6\0"+
    "\4\3\1\u05e4\26\3\4\0\1\3\22\0\2\3\6\0"+
    "\5\3\1\u05e5\25\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u05e6\32\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u05e7\14\3\4\0\1\3\22\0\2\3\6\0\12\3"+
    "\1\u05e8\20\3\4\0\1\3\22\0\2\3\6\0\25\3"+
    "\1\u05e9\5\3\4\0\1\3\22\0\2\3\6\0\16\3"+
    "\1\u05ea\14\3\4\0\1\3\22\0\2\3\6\0\17\3"+
    "\1\u05eb\13\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u05ec\26\3\4\0\1\3\22\0\2\3\6\0\13\3"+
    "\1\u05ed\17\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u05ee\26\3\4\0\1\3\22\0\2\3\6\0\2\3"+
    "\1\u05ef\30\3\4\0\1\3\22\0\2\3\6\0\21\3"+
    "\1\u05f0\11\3\4\0\1\3\22\0\2\3\6\0\21\3"+
    "\1\u05f1\11\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u05f2\26\3\4\0\1\3\22\0\2\3\6\0\1\3"+
    "\1\u05f3\2\3\1\u05f4\26\3\4\0\1\3\22\0\2\3"+
    "\6\0\1\u05f5\32\3\4\0\1\3\22\0\2\3\6\0"+
    "\2\3\1\u05f6\30\3\4\0\1\3\22\0\2\3\6\0"+
    "\1\u05f7\32\3\4\0\1\3\22\0\2\3\6\0\15\3"+
    "\1\u05f8\15\3\4\0\1\3\22\0\2\3\6\0\4\3"+
    "\1\u05f9\26\3\4\0\1\3\22\0\2\3\6\0\15\3"+
    "\1\u05fa\15\3\4\0\1\3\22\0\2\3\6\0\7\3"+
    "\1\u05fb\23\3\4\0\1\3\22\0\2\3\6\0\1\u05fc"+
    "\32\3\4\0\1\3\22\0\2\3\6\0\7\3\1\u05fd"+
    "\23\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u05fe"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\16\3\1\u05ff"+
    "\14\3\4\0\1\3\22\0\2\3\6\0\2\3\1\u0600"+
    "\30\3\4\0\1\3\22\0\2\3\6\0\7\3\1\u0601"+
    "\23\3\4\0\1\3\22\0\2\3\6\0\17\3\1\u0602"+
    "\13\3\4\0\1\3\22\0\2\3\6\0\4\3\1\u0603"+
    "\26\3\4\0\1\3\22\0\2\3\6\0\1\u0604\32\3"+
    "\4\0\1\3\22\0\2\3\6\0\15\3\1\u0605\15\3"+
    "\4\0\1\3\22\0\2\3\6\0\7\3\1\u0606\23\3"+
    "\4\0\1\3\22\0\2\3\6\0\2\3\1\u0607\30\3"+
    "\4\0\1\3\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[71456];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\31\1\1\11\1\1\2\11"+
    "\5\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\200\1\2\0\12\11\1\0"+
    "\1\1\1\0\317\1\1\11\1\0\1\1\1\0\44\1"+
    "\1\0\356\1\1\0\264\1\2\0\34\1\1\0\251\1"+
    "\1\0\163\1\1\0\23\1\1\11\125\1\1\0\112\1"+
    "\1\0\66\1\1\0\45\1\1\0\30\1\1\11\77\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1543];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   private Symbol symbol(int type, Object value){
       return new Symbol(type, yyline, yycolumn, value);
   }
    private Symbol symbol(int type){
           return new Symbol(type, yyline, yycolumn);
       }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerJcup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol (sym.ERROR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 379: break;
          case 2: 
            { return new Symbol (sym.IDENTIFICADOR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 380: break;
          case 3: 
            { return new Symbol (sym.CONSTANTE_ENTERA,yycolumn,yyline, yytext());
            } 
            // fall through
          case 381: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 382: break;
          case 5: 
            { return new Symbol (sym.RESTA,yycolumn,yyline, yytext());
            } 
            // fall through
          case 383: break;
          case 6: 
            { return new Symbol (sym.DIVISION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 384: break;
          case 7: 
            { return new Symbol (sym.MULTIPLICACION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 385: break;
          case 8: 
            { return new Symbol (sym.PUNTO_COMA,yycolumn,yyline, yytext());
            } 
            // fall through
          case 386: break;
          case 9: 
            { return new Symbol (sym.PUNTO,yycolumn,yyline, yytext());
            } 
            // fall through
          case 387: break;
          case 10: 
            { return new Symbol (sym.SUMA,yycolumn,yyline, yytext());
            } 
            // fall through
          case 388: break;
          case 11: 
            { return new Symbol (sym.MOD,yycolumn,yyline, yytext());
            } 
            // fall through
          case 389: break;
          case 12: 
            { return new Symbol (sym.MENOR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 390: break;
          case 13: 
            { return new Symbol (sym.ASIGNACION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 391: break;
          case 14: 
            { return new Symbol (sym.MAYOR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 392: break;
          case 15: 
            { return new Symbol (sym.EXCLAMACION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 393: break;
          case 16: 
            { return new Symbol (sym.COMA,yycolumn,yyline, yytext());
            } 
            // fall through
          case 394: break;
          case 17: 
            { return new Symbol (sym.CORCHETEA,yycolumn,yyline, yytext());
            } 
            // fall through
          case 395: break;
          case 18: 
            { return new Symbol (sym.CORCHETEC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 396: break;
          case 19: 
            { return new Symbol (sym.PARENTESISA,yycolumn,yyline, yytext());
            } 
            // fall through
          case 397: break;
          case 20: 
            { return new Symbol (sym.PARENTESISC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 398: break;
          case 21: 
            { return new Symbol (sym.LLAVEA,yycolumn,yyline, yytext());
            } 
            // fall through
          case 399: break;
          case 22: 
            { return new Symbol (sym.LLAVEC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 400: break;
          case 23: 
            { return new Symbol (sym.NUMERAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 401: break;
          case 24: 
            { return new Symbol (sym.ARROBA,yycolumn,yyline, yytext());
            } 
            // fall through
          case 402: break;
          case 25: 
            { return new Symbol (sym.CONSTANTE_DECIMAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 403: break;
          case 26: 
            { return new Symbol (sym.CADENA,yycolumn,yyline, yytext());
            } 
            // fall through
          case 404: break;
          case 27: 
            { return new Symbol (sym.AT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 405: break;
          case 28: 
            { return new Symbol (sym.AS,yycolumn,yyline, yytext());
            } 
            // fall through
          case 406: break;
          case 29: 
            { return new Symbol (sym.TB,yycolumn,yyline, yytext());
            } 
            // fall through
          case 407: break;
          case 30: 
            { return new Symbol (sym.TO,yycolumn,yyline, yytext());
            } 
            // fall through
          case 408: break;
          case 31: 
            { return new Symbol (sym.NO,yycolumn,yyline, yytext());
            } 
            // fall through
          case 409: break;
          case 32: 
            { return new Symbol (sym.BY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 410: break;
          case 33: 
            { return new Symbol (sym.IN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 411: break;
          case 34: 
            { return new Symbol (sym.IF,yycolumn,yyline, yytext());
            } 
            // fall through
          case 412: break;
          case 35: 
            { return new Symbol (sym.IS,yycolumn,yyline, yytext());
            } 
            // fall through
          case 413: break;
          case 36: 
            { return new Symbol (sym.OR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 414: break;
          case 37: 
            { return new Symbol (sym.ON,yycolumn,yyline, yytext());
            } 
            // fall through
          case 415: break;
          case 38: 
            { return new Symbol (sym.OF,yycolumn,yyline, yytext());
            } 
            // fall through
          case 416: break;
          case 39: 
            { return new Symbol (sym.GB,yycolumn,yyline, yytext());
            } 
            // fall through
          case 417: break;
          case 40: 
            { return new Symbol (sym.GO,yycolumn,yyline, yytext());
            } 
            // fall through
          case 418: break;
          case 41: 
            { return new Symbol (sym.KB,yycolumn,yyline, yytext());
            } 
            // fall through
          case 419: break;
          case 42: 
            { return new Symbol (sym.MB,yycolumn,yyline, yytext());
            } 
            // fall through
          case 420: break;
          case 43: 
            { return new Symbol (sym.MENOR_IGUAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 421: break;
          case 44: 
            { return new Symbol (sym.IGUALACION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 422: break;
          case 45: 
            { return new Symbol (sym.MAYOR_IGUAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 423: break;
          case 46: 
            { return new Symbol (sym.DIFERENCIA,yycolumn,yyline, yytext());
            } 
            // fall through
          case 424: break;
          case 47: 
            { return new Symbol (sym.AND,yycolumn,yyline, yytext());
            } 
            // fall through
          case 425: break;
          case 48: 
            { return new Symbol (sym.CORCHETES,yycolumn,yyline, yytext());
            } 
            // fall through
          case 426: break;
          case 49: 
            { return new Symbol (sym.PARENTESIS,yycolumn,yyline, yytext());
            } 
            // fall through
          case 427: break;
          case 50: 
            { return new Symbol (sym.LLAVES,yycolumn,yyline, yytext());
            } 
            // fall through
          case 428: break;
          case 51: 
            { return new Symbol (sym.NUMERALES,yycolumn,yyline, yytext());
            } 
            // fall through
          case 429: break;
          case 52: 
            { return new Symbol (sym.ADA,yycolumn,yyline, yytext());
            } 
            // fall through
          case 430: break;
          case 53: 
            { return new Symbol (sym.ADD,yycolumn,yyline, yytext());
            } 
            // fall through
          case 431: break;
          case 54: 
            { return new Symbol (sym.ARE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 432: break;
          case 55: 
            { return new Symbol (sym.ANY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 433: break;
          case 56: 
            { return new Symbol (sym.ALL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 434: break;
          case 57: 
            { return new Symbol (sym.ASC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 435: break;
          case 58: 
            { return new Symbol (sym.AVG,yycolumn,yyline, yytext());
            } 
            // fall through
          case 436: break;
          case 59: 
            { return new Symbol (sym.DAY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 437: break;
          case 60: 
            { return new Symbol (sym.DEC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 438: break;
          case 61: 
            { return new Symbol (sym.END,yycolumn,yyline, yytext());
            } 
            // fall through
          case 439: break;
          case 62: 
            { return new Symbol (sym.TOP,yycolumn,yyline, yytext());
            } 
            // fall through
          case 440: break;
          case 63: 
            { return new Symbol (sym.NOT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 441: break;
          case 64: 
            { return new Symbol (sym.FOR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 442: break;
          case 65: 
            { return new Symbol (sym.PAD,yycolumn,yyline, yytext());
            } 
            // fall through
          case 443: break;
          case 66: 
            { return new Symbol (sym.USE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 444: break;
          case 67: 
            { return new Symbol (sym.BIT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 445: break;
          case 68: 
            { return new Symbol (sym.INT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 446: break;
          case 69: 
            { return new Symbol (sym.SET,yycolumn,yyline, yytext());
            } 
            // fall through
          case 447: break;
          case 70: 
            { return new Symbol (sym.SUM,yycolumn,yyline, yytext());
            } 
            // fall through
          case 448: break;
          case 71: 
            { return new Symbol (sym.SQL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 449: break;
          case 72: 
            { return new Symbol (sym.OFF,yycolumn,yyline, yytext());
            } 
            // fall through
          case 450: break;
          case 73: 
            { return new Symbol (sym.OUT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 451: break;
          case 74: 
            { return new Symbol (sym.GET,yycolumn,yyline, yytext());
            } 
            // fall through
          case 452: break;
          case 75: 
            { return new Symbol (sym.KEY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 453: break;
          case 76: 
            { return new Symbol (sym.MAX,yycolumn,yyline, yytext());
            } 
            // fall through
          case 454: break;
          case 77: 
            { return new Symbol (sym.MIN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 455: break;
          case 78: 
            { return new Symbol (sym.PGO,yycolumn,yyline, yytext());
            } 
            // fall through
          case 456: break;
          case 79: 
            { return new Symbol (sym.DATE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 457: break;
          case 80: 
            { return new Symbol (sym.DENY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 458: break;
          case 81: 
            { return new Symbol (sym.DESC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 459: break;
          case 82: 
            { return new Symbol (sym.DROP,yycolumn,yyline, yytext());
            } 
            // fall through
          case 460: break;
          case 83: 
            { return new Symbol (sym.DUMP,yycolumn,yyline, yytext());
            } 
            // fall through
          case 461: break;
          case 84: 
            { return new Symbol (sym.DBCC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 462: break;
          case 85: 
            { return new Symbol (sym.DISK,yycolumn,yyline, yytext());
            } 
            // fall through
          case 463: break;
          case 86: 
            { return new Symbol (sym.EXEC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 464: break;
          case 87: 
            { return new Symbol (sym.EXIT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 465: break;
          case 88: 
            { return new Symbol (sym.ELSE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 466: break;
          case 89: 
            { return new Symbol (sym.TRAN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 467: break;
          case 90: 
            { return new Symbol (sym.TRUE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 468: break;
          case 91: 
            { return new Symbol (sym.TRIM,yycolumn,yyline, yytext());
            } 
            // fall through
          case 469: break;
          case 92: 
            { return new Symbol (sym.THEN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 470: break;
          case 93: 
            { return new Symbol (sym.TIME,yycolumn,yyline, yytext());
            } 
            // fall through
          case 471: break;
          case 94: 
            { return new Symbol (sym.READ,yycolumn,yyline, yytext());
            } 
            // fall through
          case 472: break;
          case 95: 
            { return new Symbol (sym.REAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 473: break;
          case 96: 
            { return new Symbol (sym.RULE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 474: break;
          case 97: 
            { return new Symbol (sym.ROWS,yycolumn,yyline, yytext());
            } 
            // fall through
          case 475: break;
          case 98: 
            { return new Symbol (sym.NAME,yycolumn,yyline, yytext());
            } 
            // fall through
          case 476: break;
          case 99: 
            { return new Symbol (sym.NEXT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 477: break;
          case 100: 
            { return new Symbol (sym.NULL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 478: break;
          case 101: 
            { return new Symbol (sym.NONE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 479: break;
          case 102: 
            { return new Symbol (sym.LAST,yycolumn,yyline, yytext());
            } 
            // fall through
          case 480: break;
          case 103: 
            { return new Symbol (sym.LEFT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 481: break;
          case 104: 
            { return new Symbol (sym.LIKE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 482: break;
          case 105: 
            { return new Symbol (sym.LOAD,yycolumn,yyline, yytext());
            } 
            // fall through
          case 483: break;
          case 106: 
            { return new Symbol (sym.FROM,yycolumn,yyline, yytext());
            } 
            // fall through
          case 484: break;
          case 107: 
            { return new Symbol (sym.FULL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 485: break;
          case 108: 
            { return new Symbol (sym.FILE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 486: break;
          case 109: 
            { return new Symbol (sym.CASE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 487: break;
          case 110: 
            { return new Symbol (sym.CAST,yycolumn,yyline, yytext());
            } 
            // fall through
          case 488: break;
          case 111: 
            { return new Symbol (sym.CHAR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 489: break;
          case 112: 
            { return new Symbol (sym.HOUR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 490: break;
          case 113: 
            { return new Symbol (sym.PROC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 491: break;
          case 114: 
            { return new Symbol (sym.PLAN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 492: break;
          case 115: 
            { return new Symbol (sym.USER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 493: break;
          case 116: 
            { return new Symbol (sym.BULK,yycolumn,yyline, yytext());
            } 
            // fall through
          case 494: break;
          case 117: 
            { return new Symbol (sym.BOTH,yycolumn,yyline, yytext());
            } 
            // fall through
          case 495: break;
          case 118: 
            { return new Symbol (sym.INTO,yycolumn,yyline, yytext());
            } 
            // fall through
          case 496: break;
          case 119: 
            { return new Symbol (sym.SAVE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 497: break;
          case 120: 
            { return new Symbol (sym.SELF,yycolumn,yyline, yytext());
            } 
            // fall through
          case 498: break;
          case 121: 
            { return new Symbol (sym.SIZE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 499: break;
          case 122: 
            { return new Symbol (sym.SOME,yycolumn,yyline, yytext());
            } 
            // fall through
          case 500: break;
          case 123: 
            { return new Symbol (sym.ONLY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 501: break;
          case 124: 
            { return new Symbol (sym.OPEN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 502: break;
          case 125: 
            { return new Symbol (sym.OVER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 503: break;
          case 126: 
            { return new Symbol (sym.YEAR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 504: break;
          case 127: 
            { return new Symbol (sym.GOTO,yycolumn,yyline, yytext());
            } 
            // fall through
          case 505: break;
          case 128: 
            { return new Symbol (sym.ZONE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 506: break;
          case 129: 
            { return new Symbol (sym.KILL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 507: break;
          case 130: 
            { return new Symbol (sym.MARK,yycolumn,yyline, yytext());
            } 
            // fall through
          case 508: break;
          case 131: 
            { return new Symbol (sym.WHEN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 509: break;
          case 132: 
            { return new Symbol (sym.WITH,yycolumn,yyline, yytext());
            } 
            // fall through
          case 510: break;
          case 133: 
            { return new Symbol (sym.WORK,yycolumn,yyline, yytext());
            } 
            // fall through
          case 511: break;
          case 134: 
            { return new Symbol (sym.VIEW,yycolumn,yyline, yytext());
            } 
            // fall through
          case 512: break;
          case 135: 
            { return new Symbol (sym.JOIN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 513: break;
          case 136: 
            { return new Symbol (sym.ALTER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 514: break;
          case 137: 
            { return new Symbol (sym.TABLE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 515: break;
          case 138: 
            { return new Symbol (sym.RIGHT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 516: break;
          case 139: 
            { return new Symbol (sym.NAMES,yycolumn,yyline, yytext());
            } 
            // fall through
          case 517: break;
          case 140: 
            { return new Symbol (sym.NCHAR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 518: break;
          case 141: 
            { return new Symbol (sym.LEVEL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 519: break;
          case 142: 
            { return new Symbol (sym.LOCAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 520: break;
          case 143: 
            { return new Symbol (sym.LOWER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 521: break;
          case 144: 
            { return new Symbol (sym.FALSE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 522: break;
          case 145: 
            { return new Symbol (sym.FETCH,yycolumn,yyline, yytext());
            } 
            // fall through
          case 523: break;
          case 146: 
            { return new Symbol (sym.FLOAT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 524: break;
          case 147: 
            { return new Symbol (sym.FIRST,yycolumn,yyline, yytext());
            } 
            // fall through
          case 525: break;
          case 148: 
            { return new Symbol (sym.FOUND,yycolumn,yyline, yytext());
            } 
            // fall through
          case 526: break;
          case 149: 
            { return new Symbol (sym.CROSS,yycolumn,yyline, yytext());
            } 
            // fall through
          case 527: break;
          case 150: 
            { return new Symbol (sym.CLOSE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 528: break;
          case 151: 
            { return new Symbol (sym.CHECK,yycolumn,yyline, yytext());
            } 
            // fall through
          case 529: break;
          case 152: 
            { return new Symbol (sym.COUNT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 530: break;
          case 153: 
            { return new Symbol (sym.PRINT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 531: break;
          case 154: 
            { return new Symbol (sym.PRIOR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 532: break;
          case 155: 
            { return new Symbol (sym.PIVOT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 533: break;
          case 156: 
            { return new Symbol (sym.UNION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 534: break;
          case 157: 
            { return new Symbol (sym.UPPER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 535: break;
          case 158: 
            { return new Symbol (sym.USAGE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 536: break;
          case 159: 
            { return new Symbol (sym.USING,yycolumn,yyline, yytext());
            } 
            // fall through
          case 537: break;
          case 160: 
            { return new Symbol (sym.BEGIN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 538: break;
          case 161: 
            { return new Symbol (sym.BREAK,yycolumn,yyline, yytext());
            } 
            // fall through
          case 539: break;
          case 162: 
            { return new Symbol (sym.INDEX,yycolumn,yyline, yytext());
            } 
            // fall through
          case 540: break;
          case 163: 
            { return new Symbol (sym.INNER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 541: break;
          case 164: 
            { return new Symbol (sym.INPUT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 542: break;
          case 165: 
            { return new Symbol (sym.SPACE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 543: break;
          case 166: 
            { return new Symbol (sym.SQLCA,yycolumn,yyline, yytext());
            } 
            // fall through
          case 544: break;
          case 167: 
            { return new Symbol (sym.ORDER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 545: break;
          case 168: 
            { return new Symbol (sym.OUTER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 546: break;
          case 169: 
            { return new Symbol (sym.OWNER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 547: break;
          case 170: 
            { return new Symbol (sym.GRANT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 548: break;
          case 171: 
            { return new Symbol (sym.GROUP,yycolumn,yyline, yytext());
            } 
            // fall through
          case 549: break;
          case 172: 
            { return new Symbol (sym.MATCH,yycolumn,yyline, yytext());
            } 
            // fall through
          case 550: break;
          case 173: 
            { return new Symbol (sym.MERGE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 551: break;
          case 174: 
            { return new Symbol (sym.MONTH,yycolumn,yyline, yytext());
            } 
            // fall through
          case 552: break;
          case 175: 
            { return new Symbol (sym.WRITE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 553: break;
          case 176: 
            { return new Symbol (sym.WHERE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 554: break;
          case 177: 
            { return new Symbol (sym.WHILE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 555: break;
          case 178: 
            { return new Symbol (sym.VALUE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 556: break;
          case 179: 
            { return new Symbol (sym.ARYING,yycolumn,yyline, yytext());
            } 
            // fall through
          case 557: break;
          case 180: 
            { return new Symbol (sym.ACTION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 558: break;
          case 181: 
            { return new Symbol (sym.DELETE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 559: break;
          case 182: 
            { return new Symbol (sym.DOUBLE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 560: break;
          case 183: 
            { return new Symbol (sym.DOMAIN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 561: break;
          case 184: 
            { return new Symbol (sym.EXCEPT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 562: break;
          case 185: 
            { return new Symbol (sym.EXISTS,yycolumn,yyline, yytext());
            } 
            // fall through
          case 563: break;
          case 186: 
            { return new Symbol (sym.ERRLVL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 564: break;
          case 187: 
            { return new Symbol (sym.ESCAPE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 565: break;
          case 188: 
            { return new Symbol (sym.RETURN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 566: break;
          case 189: 
            { return new Symbol (sym.REVERT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 567: break;
          case 190: 
            { return new Symbol (sym.REVOKE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 568: break;
          case 191: 
            { return new Symbol (sym.NULLIF,yycolumn,yyline, yytext());
            } 
            // fall through
          case 569: break;
          case 192: 
            { return new Symbol (sym.LINENO,yycolumn,yyline, yytext());
            } 
            // fall through
          case 570: break;
          case 193: 
            { return new Symbol (sym.CALLED,yycolumn,yyline, yytext());
            } 
            // fall through
          case 571: break;
          case 194: 
            { return new Symbol (sym.CALLER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 572: break;
          case 195: 
            { return new Symbol (sym.CREATE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 573: break;
          case 196: 
            { return new Symbol (sym.CURSOR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 574: break;
          case 197: 
            { return new Symbol (sym.COLUMN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 575: break;
          case 198: 
            { return new Symbol (sym.COMMIT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 576: break;
          case 199: 
            { return new Symbol (sym.HAVING,yycolumn,yyline, yytext());
            } 
            // fall through
          case 577: break;
          case 200: 
            { return new Symbol (sym.PASCAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 578: break;
          case 201: 
            { return new Symbol (sym.PUBLIC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 579: break;
          case 202: 
            { return new Symbol (sym.UNIQUE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 580: break;
          case 203: 
            { return new Symbol (sym.UPDATE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 581: break;
          case 204: 
            { return new Symbol (sym.BACKUP,yycolumn,yyline, yytext());
            } 
            // fall through
          case 582: break;
          case 205: 
            { return new Symbol (sym.BROWSE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 583: break;
          case 206: 
            { return new Symbol (sym.INLINE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 584: break;
          case 207: 
            { return new Symbol (sym.INSERT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 585: break;
          case 208: 
            { return new Symbol (sym.SELECT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 586: break;
          case 209: 
            { return new Symbol (sym.SECOND,yycolumn,yyline, yytext());
            } 
            // fall through
          case 587: break;
          case 210: 
            { return new Symbol (sym.STATIC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 588: break;
          case 211: 
            { return new Symbol (sym.SCROLL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 589: break;
          case 212: 
            { return new Symbol (sym.SCHEMA,yycolumn,yyline, yytext());
            } 
            // fall through
          case 590: break;
          case 213: 
            { return new Symbol (sym.OPTION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 591: break;
          case 214: 
            { return new Symbol (sym.OUTPUT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 592: break;
          case 215: 
            { return new Symbol (sym.GLOBAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 593: break;
          case 216: 
            { return new Symbol (sym.KEYSET,yycolumn,yyline, yytext());
            } 
            // fall through
          case 594: break;
          case 217: 
            { return new Symbol (sym.MINUTE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 595: break;
          case 218: 
            { return new Symbol (sym.MODULE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 596: break;
          case 219: 
            { return new Symbol (sym.VALUES,yycolumn,yyline, yytext());
            } 
            // fall through
          case 597: break;
          case 220: 
            { return new Symbol (sym.DEFAULT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 598: break;
          case 221: 
            { return new Symbol (sym.DECLARE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 599: break;
          case 222: 
            { return new Symbol (sym.DECIMAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 600: break;
          case 223: 
            { return new Symbol (sym.DYNAMIC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 601: break;
          case 224: 
            { return new Symbol (sym.EXECUTE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 602: break;
          case 225: 
            { return new Symbol (sym.EXTRACT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 603: break;
          case 226: 
            { return new Symbol (sym.TRIGGER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 604: break;
          case 227: 
            { return new Symbol (sym.TSEQUAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 605: break;
          case 228: 
            { return new Symbol (sym.RETURNS,yycolumn,yyline, yytext());
            } 
            // fall through
          case 606: break;
          case 229: 
            { return new Symbol (sym.RESTORE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 607: break;
          case 230: 
            { return new Symbol (sym.NATURAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 608: break;
          case 231: 
            { return new Symbol (sym.NUMERIC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 609: break;
          case 232: 
            { return new Symbol (sym.NOCHECK,yycolumn,yyline, yytext());
            } 
            // fall through
          case 610: break;
          case 233: 
            { return new Symbol (sym.LEADING,yycolumn,yyline, yytext());
            } 
            // fall through
          case 611: break;
          case 234: 
            { return new Symbol (sym.FOREIGN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 612: break;
          case 235: 
            { return new Symbol (sym.FORTRAN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 613: break;
          case 236: 
            { return new Symbol (sym.CATALOG,yycolumn,yyline, yytext());
            } 
            // fall through
          case 614: break;
          case 237: 
            { return new Symbol (sym.CASCADE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 615: break;
          case 238: 
            { return new Symbol (sym.CURRENT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 616: break;
          case 239: 
            { return new Symbol (sym.CONNECT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 617: break;
          case 240: 
            { return new Symbol (sym.CONVERT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 618: break;
          case 241: 
            { return new Symbol (sym.COLLATE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 619: break;
          case 242: 
            { return new Symbol (sym.COMPUTE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 620: break;
          case 243: 
            { return new Symbol (sym.PARTIAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 621: break;
          case 244: 
            { return new Symbol (sym.PERCENT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 622: break;
          case 245: 
            { return new Symbol (sym.PREPARE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 623: break;
          case 246: 
            { return new Symbol (sym.PRIMARY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 624: break;
          case 247: 
            { return new Symbol (sym.UNPIVOT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 625: break;
          case 248: 
            { return new Symbol (sym.UNKNOWN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 626: break;
          case 249: 
            { return new Symbol (sym.BETWEEN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 627: break;
          case 250: 
            { return new Symbol (sym.INTEGER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 628: break;
          case 251: 
            { return new Symbol (sym.INCLUDE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 629: break;
          case 252: 
            { return new Symbol (sym.SETUSER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 630: break;
          case 253: 
            { return new Symbol (sym.SECTION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 631: break;
          case 254: 
            { return new Symbol (sym.SESSION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 632: break;
          case 255: 
            { return new Symbol (sym.SQLCODE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 633: break;
          case 256: 
            { return new Symbol (sym.OFFSETS,yycolumn,yyline, yytext());
            } 
            // fall through
          case 634: break;
          case 257: 
            { return new Symbol (sym.OPENXML,yycolumn,yyline, yytext());
            } 
            // fall through
          case 635: break;
          case 258: 
            { return new Symbol (sym.MAXSIZE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 636: break;
          case 259: 
            { return new Symbol (sym.WAITFOR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 637: break;
          case 260: 
            { return new Symbol (sym.VARCHAR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 638: break;
          case 261: 
            { return new Symbol (sym.VARYING,yycolumn,yyline, yytext());
            } 
            // fall through
          case 639: break;
          case 262: 
            { return new Symbol (sym.ALLOCATE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 640: break;
          case 263: 
            { return new Symbol (sym.ABSOLUTE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 641: break;
          case 264: 
            { return new Symbol (sym.DATABASE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 642: break;
          case 265: 
            { return new Symbol (sym.DEFERRED,yycolumn,yyline, yytext());
            } 
            // fall through
          case 643: break;
          case 266: 
            { return new Symbol (sym.DESCRIBE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 644: break;
          case 267: 
            { return new Symbol (sym.DISTINCT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 645: break;
          case 268: 
            { return new Symbol (sym.EXTERNAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 646: break;
          case 269: 
            { return new Symbol (sym.END_EXEC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 647: break;
          case 270: 
            { return new Symbol (sym.TEXTSIZE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 648: break;
          case 271: 
            { return new Symbol (sym.TRAILING,yycolumn,yyline, yytext());
            } 
            // fall through
          case 649: break;
          case 272: 
            { return new Symbol (sym.TRUNCATE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 650: break;
          case 273: 
            { return new Symbol (sym.READTEXT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 651: break;
          case 274: 
            { return new Symbol (sym.READONLY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 652: break;
          case 275: 
            { return new Symbol (sym.RELATIVE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 653: break;
          case 276: 
            { return new Symbol (sym.RESTRICT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 654: break;
          case 277: 
            { return new Symbol (sym.ROLLBACK,yycolumn,yyline, yytext());
            } 
            // fall through
          case 655: break;
          case 278: 
            { return new Symbol (sym.ROWCOUNT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 656: break;
          case 279: 
            { return new Symbol (sym.NATIONAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 657: break;
          case 280: 
            { return new Symbol (sym.LANGUAGE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 658: break;
          case 281: 
            { return new Symbol (sym.FREETEXT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 659: break;
          case 282: 
            { return new Symbol (sym.FUNCTION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 660: break;
          case 283: 
            { return new Symbol (sym.FILENAME,yycolumn,yyline, yytext());
            } 
            // fall through
          case 661: break;
          case 284: 
            { return new Symbol (sym.CASCADED,yycolumn,yyline, yytext());
            } 
            // fall through
          case 662: break;
          case 285: 
            { return new Symbol (sym.COALESCE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 663: break;
          case 286: 
            { return new Symbol (sym.CONTAINS,yycolumn,yyline, yytext());
            } 
            // fall through
          case 664: break;
          case 287: 
            { return new Symbol (sym.CONTINUE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 665: break;
          case 288: 
            { return new Symbol (sym.HOLDLOCK,yycolumn,yyline, yytext());
            } 
            // fall through
          case 666: break;
          case 289: 
            { return new Symbol (sym.PRESERVE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 667: break;
          case 290: 
            { return new Symbol (sym.POSITION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 668: break;
          case 291: 
            { return new Symbol (sym.IDENTITY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 669: break;
          case 292: 
            { return new Symbol (sym.INTERVAL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 670: break;
          case 293: 
            { return new Symbol (sym.SHUTDOWN,yycolumn,yyline, yytext());
            } 
            // fall through
          case 671: break;
          case 294: 
            { return new Symbol (sym.SMALLINT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 672: break;
          case 295: 
            { return new Symbol (sym.SQLERROR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 673: break;
          case 296: 
            { return new Symbol (sym.SQLSTATE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 674: break;
          case 297: 
            { return new Symbol (sym.OVERLAPS,yycolumn,yyline, yytext());
            } 
            // fall through
          case 675: break;
          case 298: 
            { return new Symbol (sym.WHENEVER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 676: break;
          case 299: 
            { return new Symbol (sym.ASSERTION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 677: break;
          case 300: 
            { return new Symbol (sym.EXCEPTION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 678: break;
          case 301: 
            { return new Symbol (sym.TEMPORARY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 679: break;
          case 302: 
            { return new Symbol (sym.TRANSLATE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 680: break;
          case 303: 
            { return new Symbol (sym.TIMESTAMP,yycolumn,yyline, yytext());
            } 
            // fall through
          case 681: break;
          case 304: 
            { return new Symbol (sym.RAISERROR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 682: break;
          case 305: 
            { return new Symbol (sym.READ_ONLY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 683: break;
          case 306: 
            { return new Symbol (sym.RECOMPILE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 684: break;
          case 307: 
            { return new Symbol (sym.CLUSTERED,yycolumn,yyline, yytext());
            } 
            // fall through
          case 685: break;
          case 308: 
            { return new Symbol (sym.CHARACTER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 686: break;
          case 309: 
            { return new Symbol (sym.COLLATION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 687: break;
          case 310: 
            { return new Symbol (sym.PRECISION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 688: break;
          case 311: 
            { return new Symbol (sym.PROCEDURE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 689: break;
          case 312: 
            { return new Symbol (sym.UNLIMITED,yycolumn,yyline, yytext());
            } 
            // fall through
          case 690: break;
          case 313: 
            { return new Symbol (sym.INDICATOR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 691: break;
          case 314: 
            { return new Symbol (sym.INTERSECT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 692: break;
          case 315: 
            { return new Symbol (sym.INITIALLY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 693: break;
          case 316: 
            { return new Symbol (sym.ISOLATION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 694: break;
          case 317: 
            { return new Symbol (sym.IMMEDIATE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 695: break;
          case 318: 
            { return new Symbol (sym.SUBSTRING,yycolumn,yyline, yytext());
            } 
            // fall through
          case 696: break;
          case 319: 
            { return new Symbol (sym.OPENQUERY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 697: break;
          case 320: 
            { return new Symbol (sym.WRITETEXT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 698: break;
          case 321: 
            { return new Symbol (sym.DEALLOCATE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 699: break;
          case 322: 
            { return new Symbol (sym.DEFERRABLE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 700: break;
          case 323: 
            { return new Symbol (sym.DESCRIPTOR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 701: break;
          case 324: 
            { return new Symbol (sym.DISCONNECT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 702: break;
          case 325: 
            { return new Symbol (sym.ENCRYPTION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 703: break;
          case 326: 
            { return new Symbol (sym.REFERENCES,yycolumn,yyline, yytext());
            } 
            // fall through
          case 704: break;
          case 327: 
            { return new Symbol (sym.ROWGUIDCOL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 705: break;
          case 328: 
            { return new Symbol (sym.FILLFACTOR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 706: break;
          case 329: 
            { return new Symbol (sym.CHECKPOINT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 707: break;
          case 330: 
            { return new Symbol (sym.CONNECTION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 708: break;
          case 331: 
            { return new Symbol (sym.CONSTRAINT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 709: break;
          case 332: 
            { return new Symbol (sym.PRIVILEGES,yycolumn,yyline, yytext());
            } 
            // fall through
          case 710: break;
          case 333: 
            { return new Symbol (sym.UPDATETEXT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 711: break;
          case 334: 
            { return new Symbol (sym.BIT_LENGTH,yycolumn,yyline, yytext());
            } 
            // fall through
          case 712: break;
          case 335: 
            { return new Symbol (sym.STATISTICS,yycolumn,yyline, yytext());
            } 
            // fall through
          case 713: break;
          case 336: 
            { return new Symbol (sym.SQLWARNING,yycolumn,yyline, yytext());
            } 
            // fall through
          case 714: break;
          case 337: 
            { return new Symbol (sym.OPENROWSET,yycolumn,yyline, yytext());
            } 
            // fall through
          case 715: break;
          case 338: 
            { return new Symbol (sym.OPTIMISTIC,yycolumn,yyline, yytext());
            } 
            // fall through
          case 716: break;
          case 339: 
            { return new Symbol (sym.DIAGNOSTICS,yycolumn,yyline, yytext());
            } 
            // fall through
          case 717: break;
          case 340: 
            { return new Symbol (sym.DISTRIBUTED,yycolumn,yyline, yytext());
            } 
            // fall through
          case 718: break;
          case 341: 
            { return new Symbol (sym.TABLESAMPLE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 719: break;
          case 342: 
            { return new Symbol (sym.TRANSACTION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 720: break;
          case 343: 
            { return new Symbol (sym.TRANSLATION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 721: break;
          case 344: 
            { return new Symbol (sym.TRY_CONVERT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 722: break;
          case 345: 
            { return new Symbol (sym.RECONFIGURE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 723: break;
          case 346: 
            { return new Symbol (sym.REPLICATION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 724: break;
          case 347: 
            { return new Symbol (sym.CHAR_LENGTH,yycolumn,yyline, yytext());
            } 
            // fall through
          case 725: break;
          case 348: 
            { return new Symbol (sym.CONSTRAINTS,yycolumn,yyline, yytext());
            } 
            // fall through
          case 726: break;
          case 349: 
            { return new Symbol (sym.IDENTITYCOL,yycolumn,yyline, yytext());
            } 
            // fall through
          case 727: break;
          case 350: 
            { return new Symbol (sym.INSENSITIVE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 728: break;
          case 351: 
            { return new Symbol (sym.SYSTEM_USER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 729: break;
          case 352: 
            { return new Symbol (sym.TYPE_WARNING,yycolumn,yyline, yytext());
            } 
            // fall through
          case 730: break;
          case 353: 
            { return new Symbol (sym.NONCLUSTERED,yycolumn,yyline, yytext());
            } 
            // fall through
          case 731: break;
          case 354: 
            { return new Symbol (sym.FAST_FORWARD,yycolumn,yyline, yytext());
            } 
            // fall through
          case 732: break;
          case 355: 
            { return new Symbol (sym.FORWARD_ONLY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 733: break;
          case 356: 
            { return new Symbol (sym.CURRENT_DATE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 734: break;
          case 357: 
            { return new Symbol (sym.CURRENT_TIME,yycolumn,yyline, yytext());
            } 
            // fall through
          case 735: break;
          case 358: 
            { return new Symbol (sym.CURRENT_USER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 736: break;
          case 359: 
            { return new Symbol (sym.SESSION_USER,yycolumn,yyline, yytext());
            } 
            // fall through
          case 737: break;
          case 360: 
            { return new Symbol (sym.SCROLL_LOCKS,yycolumn,yyline, yytext());
            } 
            // fall through
          case 738: break;
          case 361: 
            { return new Symbol (sym.OCTET_LENGTH,yycolumn,yyline, yytext());
            } 
            // fall through
          case 739: break;
          case 362: 
            { return new Symbol (sym.WITHIN_GROUP,yycolumn,yyline, yytext());
            } 
            // fall through
          case 740: break;
          case 363: 
            { return new Symbol (sym.AUTHORIZATION,yycolumn,yyline, yytext());
            } 
            // fall through
          case 741: break;
          case 364: 
            { return new Symbol (sym.TIMEZONE_HOUR,yycolumn,yyline, yytext());
            } 
            // fall through
          case 742: break;
          case 365: 
            { return new Symbol (sym.FREETEXTTABLE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 743: break;
          case 366: 
            { return new Symbol (sym.CORRESPONDING,yycolumn,yyline, yytext());
            } 
            // fall through
          case 744: break;
          case 367: 
            { return new Symbol (sym.CONTAINSTABLE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 745: break;
          case 368: 
            { return new Symbol (sym.SECURITYAUDIT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 746: break;
          case 369: 
            { return new Symbol (sym.SCHEMABINDING,yycolumn,yyline, yytext());
            } 
            // fall through
          case 747: break;
          case 370: 
            { return new Symbol (sym.OPENDATASOURCE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 748: break;
          case 371: 
            { return new Symbol (sym.TIMEZONE_MINUTE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 749: break;
          case 372: 
            { return new Symbol (sym.IDENTITY_INSERT,yycolumn,yyline, yytext());
            } 
            // fall through
          case 750: break;
          case 373: 
            { return new Symbol (sym.CHARACTER_LENGTH,yycolumn,yyline, yytext());
            } 
            // fall through
          case 751: break;
          case 374: 
            { return new Symbol (sym.CURRENT_TIMESTAMP,yycolumn,yyline, yytext());
            } 
            // fall through
          case 752: break;
          case 375: 
            { return new Symbol (sym.DELAYED_DURABILITY,yycolumn,yyline, yytext());
            } 
            // fall through
          case 753: break;
          case 376: 
            { return new Symbol (sym.SEMANTICKEYPHRASETABLE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 754: break;
          case 377: 
            { return new Symbol (sym.SEMANTICSIMILARITYTABLE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 755: break;
          case 378: 
            { return new Symbol (sym.SEMANTICSIMILARITYDETAILSTABLE,yycolumn,yyline, yytext());
            } 
            // fall through
          case 756: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
