/* The following code was generated by JFlex 1.7.0 */

package SINTAXIS;
import static SINTAXIS.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/PROYECTO_COMPILADORES/PROYECTO/src/SINTAXIS/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\1\76\1\76\1\3\22\0\1\67\1\16\1\0"+
    "\1\33\1\0\1\12\1\17\1\5\1\26\1\27\1\10\1\11\1\22"+
    "\1\6\1\23\1\7\12\2\1\0\1\21\1\13\1\14\1\15\1\0"+
    "\1\32\1\34\1\51\1\45\1\35\1\36\1\44\1\56\1\46\1\52"+
    "\1\65\1\60\1\43\1\61\1\42\1\54\1\47\1\66\1\41\1\53"+
    "\1\40\1\50\1\63\1\62\1\37\1\55\1\57\1\24\1\0\1\25"+
    "\1\0\1\64\1\0\4\1\1\70\1\1\1\75\1\1\1\73\4\1"+
    "\1\74\3\1\1\72\1\1\1\71\6\1\1\30\1\20\1\31\7\0"+
    "\1\76\u1fa2\0\1\76\1\76\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\1"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\30\2\1\31\2\1\1\4\1\1"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\2\1\44\6\2\1\45\23\2\1\46"+
    "\11\2\1\47\43\2\1\50\1\2\1\51\1\52\1\53"+
    "\15\2\1\37\1\54\1\55\10\2\1\56\17\2\1\0"+
    "\1\1\1\4\1\0\1\1\1\57\1\60\1\61\1\2"+
    "\1\36\1\62\1\2\1\63\3\2\1\64\1\2\1\65"+
    "\1\2\1\66\4\2\1\67\15\2\1\70\14\2\1\71"+
    "\23\2\1\72\25\2\1\73\23\2\1\74\20\2\1\75"+
    "\7\2\1\76\3\2\1\77\10\2\1\100\12\2\1\101"+
    "\4\2\1\102\2\2\1\103\6\2\1\104\5\2\1\105"+
    "\1\2\1\106\2\2\1\107\14\2\1\0\1\1\1\4"+
    "\1\0\1\4\10\2\1\110\1\2\1\111\5\2\1\112"+
    "\1\113\1\114\1\115\3\2\1\116\2\2\1\117\3\2"+
    "\1\120\2\2\1\0\1\121\4\2\1\122\1\2\1\123"+
    "\2\2\1\124\1\2\1\125\1\126\2\2\1\127\1\130"+
    "\10\2\1\131\3\2\1\132\4\2\1\133\1\2\1\134"+
    "\1\2\1\135\3\2\1\136\1\2\1\137\2\2\1\140"+
    "\1\141\5\2\1\142\2\2\1\143\1\2\1\144\5\2"+
    "\1\145\1\146\5\2\1\147\20\2\1\150\12\2\1\151"+
    "\1\152\12\2\1\153\6\2\1\154\1\2\1\155\4\2"+
    "\1\156\7\2\1\157\15\2\1\160\1\161\7\2\1\162"+
    "\2\2\1\163\3\2\1\164\1\165\3\2\1\166\1\167"+
    "\1\170\10\2\1\171\1\2\1\172\1\173\3\2\1\174"+
    "\1\175\1\1\3\4\2\1\1\2\1\176\31\2\1\0"+
    "\1\2\1\177\25\2\1\200\5\2\1\201\1\202\6\2"+
    "\1\203\1\2\1\204\1\205\1\206\1\207\1\2\1\210"+
    "\1\2\1\211\3\2\1\212\3\2\1\213\1\2\1\214"+
    "\2\2\1\215\13\2\1\216\12\2\1\217\1\220\4\2"+
    "\1\221\2\2\1\222\3\2\1\223\1\224\1\225\2\2"+
    "\1\226\1\227\3\2\1\230\3\2\1\231\1\2\1\232"+
    "\20\2\1\233\4\2\1\234\3\2\1\235\7\2\1\236"+
    "\2\2\1\237\1\240\1\2\1\241\1\242\2\2\1\243"+
    "\1\2\1\244\1\245\1\2\1\246\3\2\1\247\1\1"+
    "\2\0\1\250\1\2\1\251\5\2\1\252\11\2\1\253"+
    "\1\254\3\2\1\255\1\256\1\257\1\0\1\260\16\2"+
    "\1\261\6\2\1\262\1\263\5\2\1\264\5\2\1\265"+
    "\7\2\1\266\5\2\1\267\10\2\1\270\1\2\1\271"+
    "\1\272\2\2\1\273\7\2\1\274\2\2\1\275\1\2"+
    "\1\276\1\277\1\2\1\300\10\2\1\301\4\2\1\302"+
    "\2\2\1\303\3\2\1\304\1\305\16\2\1\306\1\307"+
    "\1\2\1\310\1\311\1\312\6\2\1\313\1\1\6\2"+
    "\1\314\2\2\1\315\1\316\6\2\1\317\1\2\1\320"+
    "\1\2\1\0\7\2\1\321\3\2\1\322\7\2\1\323"+
    "\3\2\1\324\1\2\1\325\1\2\1\326\1\2\1\327"+
    "\3\2\1\330\1\331\1\332\1\333\4\2\1\334\4\2"+
    "\1\335\1\2\1\336\1\337\1\2\1\340\1\2\1\341"+
    "\1\342\1\2\1\343\1\2\1\344\3\2\1\345\1\346"+
    "\1\2\1\347\5\2\1\350\1\351\4\2\1\352\1\353"+
    "\1\2\1\354\7\2\1\355\2\2\1\356\2\2\1\357"+
    "\3\2\1\360\2\2\1\0\1\361\1\362\1\363\1\364"+
    "\1\2\1\365\1\2\1\366\2\2\1\367\1\2\1\370"+
    "\2\2\1\371\1\2\1\372\1\2\1\373\1\2\1\374"+
    "\3\2\1\375\1\376\4\2\1\377\1\u0100\3\2\1\u0101"+
    "\1\u0102\1\u0103\1\2\1\u0104\1\2\1\u0105\1\u0106\1\u0107"+
    "\1\2\1\u0108\5\2\1\u0109\1\2\1\u010a\1\u010b\3\2"+
    "\1\u010c\1\2\1\u010d\2\2\1\u010e\2\2\1\u010f\2\2"+
    "\1\u0110\10\2\1\u0111\2\2\1\u0112\1\u0113\1\u0114\5\2"+
    "\1\u0115\1\2\1\u0116\1\0\1\2\1\u0117\6\2\1\u0118"+
    "\1\2\1\u0119\1\2\1\u011a\2\2\1\u011b\1\2\1\u011c"+
    "\7\2\1\u011d\1\u011e\11\2\1\u011f\1\u0120\1\2\1\u0121"+
    "\4\2\1\u0122\1\u0123\1\u0124\1\2\1\u0125\1\u0126\5\2"+
    "\1\u0127\5\2\1\u0128\1\u0129\1\0\1\2\1\u012a\1\u012b"+
    "\1\u012c\2\2\1\u012d\6\2\1\u012e\2\2\1\u012f\2\2"+
    "\1\u0130\2\2\1\u0131\5\2\1\u0132\1\u0133\1\u0134\1\u0135"+
    "\1\u0136\7\2\1\u0137\1\2\1\u0138\2\2\1\u0139\1\0"+
    "\1\2\1\u013a\1\u013b\1\u013c\1\u013d\1\u013e\1\u013f\2\2"+
    "\1\u0140\1\u0141\3\2\1\u0142\5\2\1\u0143\1\u0144\1\2"+
    "\1\u0145\4\2\1\u0146\2\2\1\0\3\2\1\u0147\2\2"+
    "\1\u0148\1\u0149\1\u014a\4\2\1\u014b\2\2\1\u014c\1\2"+
    "\1\u014d\1\u014e\1\u014f\1\2\1\u0150\2\2\1\u0151\1\u0152"+
    "\1\2\1\u0153\11\2\1\u0154\1\u0155\2\2\1\u0156\2\2"+
    "\1\u0157\3\2\1\u0158\17\2\1\u0159\1\2\1\u015a\6\2"+
    "\1\u015b";

  private static int [] zzUnpackAction() {
    int [] result = new int[1413];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\77\0\77\0\77\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4"+
    "\0\u0333\0\77\0\77\0\77\0\u0372\0\77\0\u03b1\0\77"+
    "\0\u03f0\0\77\0\77\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b"+
    "\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723"+
    "\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b"+
    "\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13"+
    "\0\u0b52\0\77\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\u0b91\0\176\0\u0bd0\0\u0c0f\0\u0c4e"+
    "\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46"+
    "\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e"+
    "\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e"+
    "\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626"+
    "\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e"+
    "\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e"+
    "\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\176\0\u1d88\0\u1dc7"+
    "\0\176\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80"+
    "\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178"+
    "\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370"+
    "\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568"+
    "\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760"+
    "\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\176"+
    "\0\176\0\176\0\u2958\0\176\0\176\0\u2997\0\u29d6\0\u2a15"+
    "\0\u2a54\0\u2a93\0\176\0\u2ad2\0\176\0\u2b11\0\176\0\u2b50"+
    "\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48"+
    "\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40"+
    "\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138"+
    "\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\176\0\u32f1"+
    "\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9"+
    "\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2\0\u36e1"+
    "\0\u3720\0\u375f\0\176\0\u379e\0\u37dd\0\u381c\0\u385b\0\u389a"+
    "\0\u38d9\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14\0\u3a53\0\u3a92"+
    "\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a"+
    "\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u3e04\0\u3e43\0\u3e82"+
    "\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b\0\u407a"+
    "\0\u40b9\0\u40f8\0\u4137\0\u4176\0\176\0\u41b5\0\u41f4\0\u4233"+
    "\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b"+
    "\0\u446a\0\u44a9\0\u44e8\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623"+
    "\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc\0\u481b"+
    "\0\u485a\0\u4899\0\u48d8\0\u4917\0\u4956\0\u4995\0\u49d4\0\u4a13"+
    "\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e\0\u4b8d\0\u4bcc\0\u4c0b"+
    "\0\u4c4a\0\u4c89\0\u4cc8\0\u4d07\0\u4d46\0\176\0\u4d85\0\u4dc4"+
    "\0\u4e03\0\u4e42\0\u4e81\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc"+
    "\0\u4ffb\0\u503a\0\u5079\0\u50b8\0\176\0\u50f7\0\u5136\0\u5175"+
    "\0\u51b4\0\u51f3\0\176\0\u5232\0\176\0\u5271\0\u52b0\0\u52ef"+
    "\0\u532e\0\u536d\0\u53ac\0\u53eb\0\u542a\0\u5469\0\u54a8\0\u54e7"+
    "\0\u5526\0\u5565\0\u55a4\0\u55e3\0\u5622\0\u5661\0\u56a0\0\u56df"+
    "\0\u571e\0\u575d\0\u579c\0\u57db\0\u581a\0\u5859\0\u5898\0\u58d7"+
    "\0\u5916\0\176\0\u5955\0\176\0\u5994\0\u59d3\0\u5a12\0\u5a51"+
    "\0\u5a90\0\u5acf\0\176\0\176\0\176\0\u5b0e\0\u5b4d\0\u5b8c"+
    "\0\176\0\u5bcb\0\u5c0a\0\u5c49\0\u5c88\0\u5cc7\0\u5d06\0\176"+
    "\0\u5d45\0\u5d84\0\u5dc3\0\176\0\u5e02\0\u5e41\0\u5e80\0\u5ebf"+
    "\0\u5efe\0\u5f3d\0\176\0\u5f7c\0\u5fbb\0\176\0\u5ffa\0\176"+
    "\0\u6039\0\u6078\0\u60b7\0\u60f6\0\176\0\u6135\0\u6174\0\u61b3"+
    "\0\u61f2\0\u6231\0\u6270\0\u62af\0\u62ee\0\176\0\u632d\0\u636c"+
    "\0\u63ab\0\176\0\u63ea\0\u6429\0\u6468\0\u64a7\0\176\0\u64e6"+
    "\0\u6525\0\u6564\0\176\0\u65a3\0\u65e2\0\u6621\0\176\0\u6660"+
    "\0\176\0\u669f\0\u66de\0\176\0\176\0\u671d\0\u675c\0\u679b"+
    "\0\u67da\0\u6819\0\176\0\u6858\0\u6897\0\176\0\u68d6\0\176"+
    "\0\u6915\0\u6954\0\u6993\0\u69d2\0\u6a11\0\176\0\176\0\u6a50"+
    "\0\u6a8f\0\u6ace\0\u6b0d\0\u6b4c\0\u6b8b\0\u6bca\0\u6c09\0\u6c48"+
    "\0\u6c87\0\u6cc6\0\u6d05\0\u6d44\0\u6d83\0\u6dc2\0\u6e01\0\u6e40"+
    "\0\u6e7f\0\u6ebe\0\u6efd\0\u6f3c\0\u6f7b\0\176\0\u6fba\0\u6ff9"+
    "\0\u7038\0\u7077\0\u70b6\0\u70f5\0\u7134\0\u7173\0\u71b2\0\u71f1"+
    "\0\u7230\0\176\0\u726f\0\u72ae\0\u72ed\0\u732c\0\u736b\0\u73aa"+
    "\0\u73e9\0\u7428\0\u7467\0\u74a6\0\176\0\u74e5\0\u7524\0\u7563"+
    "\0\u75a2\0\u75e1\0\u7620\0\176\0\u765f\0\176\0\u769e\0\u76dd"+
    "\0\u771c\0\u775b\0\176\0\u779a\0\u77d9\0\u7818\0\u7857\0\u7896"+
    "\0\u78d5\0\u7914\0\176\0\u7953\0\u7992\0\u79d1\0\u7a10\0\u7a4f"+
    "\0\u7a8e\0\u7acd\0\u7b0c\0\u7b4b\0\u7b8a\0\u7bc9\0\u7c08\0\u7c47"+
    "\0\176\0\176\0\u7c86\0\u7cc5\0\u7d04\0\u7d43\0\u7d82\0\u7dc1"+
    "\0\u7e00\0\176\0\u7e3f\0\u7e7e\0\u7ebd\0\u7efc\0\u7f3b\0\u7f7a"+
    "\0\u7fb9\0\176\0\u7ff8\0\u8037\0\u8076\0\176\0\176\0\176"+
    "\0\u80b5\0\u80f4\0\u8133\0\u8172\0\u81b1\0\u81f0\0\u822f\0\u826e"+
    "\0\u82ad\0\u82ec\0\u832b\0\176\0\u836a\0\u83a9\0\u83e8\0\176"+
    "\0\176\0\u8427\0\u8466\0\u84a5\0\u84e4\0\u8523\0\u8562\0\u85a1"+
    "\0\176\0\u85e0\0\u861f\0\u865e\0\u869d\0\u86dc\0\u871b\0\u875a"+
    "\0\u8799\0\u87d8\0\u8817\0\u8856\0\u8895\0\u88d4\0\u8913\0\u8952"+
    "\0\u8991\0\u89d0\0\u8a0f\0\u8a4e\0\u8a8d\0\u8acc\0\u8b0b\0\u8b4a"+
    "\0\u8b89\0\u8bc8\0\u8c07\0\u8c46\0\u8c85\0\u8cc4\0\u8d03\0\u8d42"+
    "\0\u8d81\0\u8dc0\0\u8dff\0\u8e3e\0\u8e7d\0\u8ebc\0\u8efb\0\u8f3a"+
    "\0\u8f79\0\u8fb8\0\u8ff7\0\u9036\0\u9075\0\u90b4\0\u90f3\0\u9132"+
    "\0\u9171\0\u91b0\0\176\0\u91ef\0\u922e\0\u926d\0\u92ac\0\u92eb"+
    "\0\176\0\176\0\u932a\0\u9369\0\u93a8\0\u93e7\0\u9426\0\u9465"+
    "\0\176\0\u94a4\0\176\0\176\0\176\0\176\0\u94e3\0\176"+
    "\0\u9522\0\176\0\u9561\0\u95a0\0\u95df\0\176\0\u961e\0\u965d"+
    "\0\u969c\0\176\0\u96db\0\176\0\u971a\0\u9759\0\u9798\0\u97d7"+
    "\0\u9816\0\u9855\0\u9894\0\u98d3\0\u9912\0\u9951\0\u9990\0\u99cf"+
    "\0\u9a0e\0\u9a4d\0\176\0\u9a8c\0\u9acb\0\u9b0a\0\u9b49\0\u9b88"+
    "\0\u9bc7\0\u9c06\0\u9c45\0\u9c84\0\u9cc3\0\176\0\176\0\u9d02"+
    "\0\u9d41\0\u9d80\0\u9dbf\0\176\0\u9dfe\0\u9e3d\0\176\0\u9e7c"+
    "\0\u9ebb\0\u9efa\0\176\0\176\0\176\0\u9f39\0\u9f78\0\176"+
    "\0\176\0\u9fb7\0\u9ff6\0\ua035\0\176\0\ua074\0\ua0b3\0\ua0f2"+
    "\0\176\0\ua131\0\176\0\ua170\0\ua1af\0\ua1ee\0\ua22d\0\ua26c"+
    "\0\ua2ab\0\ua2ea\0\ua329\0\ua368\0\ua3a7\0\ua3e6\0\ua425\0\ua464"+
    "\0\ua4a3\0\ua4e2\0\ua521\0\176\0\ua560\0\ua59f\0\ua5de\0\ua61d"+
    "\0\176\0\ua65c\0\ua69b\0\ua6da\0\176\0\ua719\0\ua758\0\ua797"+
    "\0\ua7d6\0\ua815\0\ua854\0\ua893\0\176\0\ua8d2\0\ua911\0\176"+
    "\0\176\0\ua950\0\176\0\176\0\ua98f\0\ua9ce\0\176\0\uaa0d"+
    "\0\uaa4c\0\176\0\uaa8b\0\176\0\uaaca\0\uab09\0\uab48\0\uab87"+
    "\0\uabc6\0\u017a\0\uac05\0\176\0\uac44\0\176\0\uac83\0\uacc2"+
    "\0\uad01\0\uad40\0\uad7f\0\176\0\uadbe\0\uadfd\0\uae3c\0\uae7b"+
    "\0\uaeba\0\uaef9\0\uaf38\0\uaf77\0\uafb6\0\176\0\176\0\uaff5"+
    "\0\ub034\0\ub073\0\ub0b2\0\176\0\176\0\ub0f1\0\176\0\ub130"+
    "\0\ub16f\0\ub1ae\0\ub1ed\0\ub22c\0\ub26b\0\ub2aa\0\ub2e9\0\ub328"+
    "\0\ub367\0\ub3a6\0\ub3e5\0\ub424\0\ub463\0\176\0\ub4a2\0\ub4e1"+
    "\0\ub520\0\ub55f\0\ub59e\0\ub5dd\0\176\0\176\0\ub61c\0\ub65b"+
    "\0\ub69a\0\ub6d9\0\ub718\0\176\0\ub757\0\ub796\0\ub7d5\0\ub814"+
    "\0\ub853\0\176\0\ub892\0\ub8d1\0\ub910\0\ub94f\0\ub98e\0\ub9cd"+
    "\0\uba0c\0\176\0\uba4b\0\uba8a\0\ubac9\0\ubb08\0\ubb47\0\176"+
    "\0\ubb86\0\ubbc5\0\ubc04\0\ubc43\0\ubc82\0\ubcc1\0\ubd00\0\ubd3f"+
    "\0\176\0\ubd7e\0\176\0\176\0\ubdbd\0\ubdfc\0\176\0\ube3b"+
    "\0\ube7a\0\ubeb9\0\ubef8\0\ubf37\0\ubf76\0\ubfb5\0\176\0\ubff4"+
    "\0\uc033\0\176\0\uc072\0\uc0b1\0\176\0\uc0f0\0\176\0\uc12f"+
    "\0\uc16e\0\uc1ad\0\uc1ec\0\uc22b\0\uc26a\0\uc2a9\0\uc2e8\0\176"+
    "\0\uc327\0\uc366\0\uc3a5\0\uc3e4\0\176\0\uc423\0\uc462\0\176"+
    "\0\uc4a1\0\uc4e0\0\uc51f\0\176\0\176\0\uc55e\0\uc59d\0\uc5dc"+
    "\0\uc61b\0\uc65a\0\uc699\0\uc6d8\0\uc717\0\uc756\0\uc795\0\uc7d4"+
    "\0\uc813\0\uc852\0\uc891\0\176\0\176\0\uc8d0\0\176\0\176"+
    "\0\176\0\uc90f\0\uc94e\0\uc98d\0\uc9cc\0\uca0b\0\uca4a\0\176"+
    "\0\uca89\0\ucac8\0\ucb07\0\ucb46\0\ucb85\0\ucbc4\0\ucc03\0\176"+
    "\0\ucc42\0\ucc81\0\176\0\176\0\uccc0\0\uccff\0\ucd3e\0\ucd7d"+
    "\0\ucdbc\0\ucdfb\0\176\0\uce3a\0\176\0\uce79\0\uceb8\0\ucef7"+
    "\0\ucf36\0\ucf75\0\ucfb4\0\ucff3\0\ud032\0\ud071\0\176\0\ud0b0"+
    "\0\ud0ef\0\ud12e\0\176\0\ud16d\0\ud1ac\0\ud1eb\0\ud22a\0\ud269"+
    "\0\ud2a8\0\ud2e7\0\176\0\ud326\0\ud365\0\ud3a4\0\176\0\ud3e3"+
    "\0\176\0\ud422\0\176\0\ud461\0\176\0\ud4a0\0\ud4df\0\ud51e"+
    "\0\176\0\176\0\176\0\ud55d\0\ud59c\0\ud5db\0\ud61a\0\ud659"+
    "\0\ud698\0\ud6d7\0\ud716\0\ud755\0\ud794\0\ud7d3\0\ud812\0\176"+
    "\0\176\0\ud851\0\176\0\ud890\0\176\0\176\0\ud8cf\0\176"+
    "\0\ud90e\0\176\0\ud94d\0\ud98c\0\ud9cb\0\176\0\176\0\uda0a"+
    "\0\176\0\uda49\0\uda88\0\udac7\0\udb06\0\udb45\0\176\0\176"+
    "\0\udb84\0\udbc3\0\udc02\0\udc41\0\176\0\176\0\udc80\0\udcbf"+
    "\0\udcfe\0\udd3d\0\udd7c\0\uddbb\0\uddfa\0\ude39\0\ude78\0\176"+
    "\0\udeb7\0\udef6\0\176\0\udf35\0\udf74\0\176\0\udfb3\0\udff2"+
    "\0\ue031\0\176\0\ue070\0\ue0af\0\ue0ee\0\176\0\176\0\77"+
    "\0\176\0\ue12d\0\176\0\ue16c\0\176\0\ue1ab\0\ue1ea\0\176"+
    "\0\ue229\0\176\0\ue268\0\ue2a7\0\176\0\ue2e6\0\176\0\ue325"+
    "\0\77\0\ue364\0\176\0\ue3a3\0\ue3e2\0\ue421\0\176\0\176"+
    "\0\ue460\0\ue49f\0\ue4de\0\ue51d\0\176\0\176\0\ue55c\0\ue59b"+
    "\0\ue5da\0\176\0\176\0\176\0\ue619\0\176\0\ue658\0\176"+
    "\0\ue697\0\176\0\ue6d6\0\176\0\ue715\0\ue754\0\ue793\0\ue7d2"+
    "\0\ue811\0\176\0\ue850\0\ue88f\0\176\0\ue8ce\0\ue90d\0\ue94c"+
    "\0\176\0\ue98b\0\176\0\ue9ca\0\uea09\0\176\0\uea48\0\uea87"+
    "\0\ueac6\0\ueb05\0\ueb44\0\176\0\ueb83\0\uebc2\0\uec01\0\uec40"+
    "\0\uec7f\0\uecbe\0\uecfd\0\ued3c\0\176\0\ued7b\0\uedba\0\176"+
    "\0\176\0\176\0\uedf9\0\uee38\0\uee77\0\ueeb6\0\ueef5\0\176"+
    "\0\uef34\0\176\0\uef73\0\uefb2\0\176\0\ueff1\0\uf030\0\uf06f"+
    "\0\uf0ae\0\uf0ed\0\uf12c\0\176\0\uf16b\0\176\0\uf1aa\0\176"+
    "\0\uf1e9\0\uf228\0\176\0\uf267\0\176\0\uf2a6\0\uf2e5\0\uf324"+
    "\0\uf363\0\uf3a2\0\uf3e1\0\uf420\0\176\0\uf45f\0\uf49e\0\uf4dd"+
    "\0\uf51c\0\uf55b\0\uf59a\0\uf5d9\0\uf618\0\uf657\0\uf696\0\176"+
    "\0\176\0\uf6d5\0\176\0\uf714\0\uf753\0\uf792\0\uf7d1\0\176"+
    "\0\176\0\176\0\uf810\0\176\0\176\0\uf84f\0\uf88e\0\uf8cd"+
    "\0\uf90c\0\uf94b\0\176\0\uf98a\0\uf9c9\0\ufa08\0\ufa47\0\ufa86"+
    "\0\176\0\176\0\ufac5\0\ufb04\0\176\0\176\0\176\0\ufb43"+
    "\0\ufb82\0\176\0\ufbc1\0\ufc00\0\ufc3f\0\ufc7e\0\ufcbd\0\ufcfc"+
    "\0\176\0\ufd3b\0\ufd7a\0\176\0\ufdb9\0\ufdf8\0\176\0\ufe37"+
    "\0\ufe76\0\176\0\ufeb5\0\ufef4\0\uff33\0\uff72\0\uffb1\0\176"+
    "\0\ufff0\0\176\0\176\0\176\1\57\1\156\1\255\1\354"+
    "\1\u012b\1\u016a\1\u01a9\0\176\1\u01e8\0\176\1\u0227\1\u0266"+
    "\0\176\1\u02a5\1\u02e4\0\176\0\176\0\176\0\176\0\176"+
    "\0\176\1\u0323\1\u0362\0\176\0\176\1\u03a1\1\u03e0\1\u041f"+
    "\0\176\1\u045e\1\u049d\1\u04dc\1\u051b\1\u055a\0\176\0\176"+
    "\1\u0599\0\176\1\u05d8\1\u0617\1\u0656\1\u0695\0\176\1\u06d4"+
    "\1\u0713\1\u0752\1\u0791\1\u07d0\1\u080f\0\176\1\u084e\1\u088d"+
    "\0\176\1\u08cc\0\176\1\u090b\1\u094a\1\u0989\1\u09c8\0\176"+
    "\1\u0a07\1\u0a46\0\176\1\u0a85\0\77\0\176\0\176\1\u0ac4"+
    "\0\176\1\u0b03\1\u0b42\0\176\0\176\1\u0b81\0\176\1\u0bc0"+
    "\1\u0bff\1\u0c3e\1\u0c7d\1\u0cbc\1\u0cfb\1\u0d3a\1\u0d79\1\u0db8"+
    "\0\176\0\176\1\u0df7\1\u0e36\0\176\1\u0e75\1\u0eb4\0\176"+
    "\1\u0ef3\1\u0f32\1\u0f71\0\176\1\u0fb0\1\u0fef\1\u102e\1\u106d"+
    "\1\u10ac\1\u10eb\1\u112a\1\u1169\1\u11a8\1\u11e7\1\u1226\1\u1265"+
    "\1\u12a4\1\u12e3\1\u1322\0\176\1\u1361\0\176\1\u13a0\1\u13df"+
    "\1\u141e\1\u145d\1\u149c\1\u14db\0\176";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1413];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\3\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\2\1\64\1\3\1\5\6\3"+
    "\101\0\2\3\31\0\33\3\1\0\6\3\3\0\1\4"+
    "\20\0\1\65\56\0\2\5\62\0\1\5\7\0\3\66"+
    "\1\0\1\66\1\0\45\66\1\67\23\66\6\0\1\70"+
    "\100\0\1\71\102\0\1\72\76\0\1\73\76\0\1\74"+
    "\76\0\1\75\101\0\1\76\77\0\1\77\103\0\1\100"+
    "\100\0\1\101\100\0\1\102\100\0\1\103\44\0\2\3"+
    "\31\0\1\3\1\104\2\3\1\105\1\106\1\107\1\110"+
    "\1\3\1\111\2\3\1\112\1\113\1\3\1\114\7\3"+
    "\1\115\3\3\1\0\6\3\2\0\2\3\31\0\1\116"+
    "\1\3\1\117\2\3\1\120\6\3\1\121\1\122\1\123"+
    "\1\3\1\124\12\3\1\0\6\3\2\0\2\3\31\0"+
    "\3\3\1\125\1\3\1\126\1\127\1\130\7\3\1\131"+
    "\13\3\1\0\6\3\2\0\2\3\31\0\1\132\1\3"+
    "\1\133\2\3\1\134\4\3\1\135\3\3\1\136\1\137"+
    "\1\140\12\3\1\0\6\3\2\0\2\3\31\0\1\141"+
    "\1\3\1\142\11\3\1\143\1\3\1\144\1\3\1\145"+
    "\12\3\1\0\6\3\2\0\2\3\31\0\1\146\1\3"+
    "\1\147\6\3\1\150\2\3\1\151\3\3\1\152\12\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\153\1\3\1\154"+
    "\13\3\1\155\1\3\1\156\12\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\157\1\3\1\160\2\3\1\161\1\3"+
    "\1\162\4\3\1\163\1\3\1\164\1\3\1\165\12\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\166\4\3\1\167"+
    "\1\3\1\170\2\3\1\171\1\3\1\172\3\3\1\173"+
    "\12\3\1\0\6\3\2\0\2\3\31\0\1\174\17\3"+
    "\1\175\12\3\1\0\6\3\2\0\2\3\31\0\1\176"+
    "\1\3\1\177\2\3\1\200\1\3\1\201\4\3\1\202"+
    "\1\3\1\203\1\3\1\204\12\3\1\0\6\3\2\0"+
    "\2\3\31\0\6\3\1\205\4\3\1\206\3\3\1\207"+
    "\13\3\1\0\6\3\2\0\2\3\31\0\1\210\1\3"+
    "\1\211\2\3\1\212\6\3\1\213\1\3\1\214\1\3"+
    "\1\215\1\216\11\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\3\1\217\4\3\1\220\1\3\1\221\6\3\1\222"+
    "\5\3\1\223\5\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\224\1\3\1\225\1\3\1\226\4\3\1\227\1\230"+
    "\1\231\1\232\1\3\1\233\1\3\1\234\1\235\3\3"+
    "\1\236\4\3\1\237\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\240\1\241\1\3\1\242\1\243\1\3\1\244"+
    "\1\245\12\3\1\246\3\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\247\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\250\2\3\1\251\1\3\1\252\10\3"+
    "\1\253\12\3\1\0\6\3\2\0\2\3\31\0\20\3"+
    "\1\254\12\3\1\0\6\3\2\0\2\3\31\0\2\3"+
    "\1\255\13\3\1\256\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\257\1\3\1\260\13\3\1\261\1\3\1\262"+
    "\12\3\1\0\6\3\2\0\2\3\31\0\1\263\4\3"+
    "\1\264\4\3\1\265\3\3\1\266\1\3\1\267\12\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\270\15\3\1\271"+
    "\14\3\1\0\6\3\2\0\2\3\31\0\20\3\1\272"+
    "\12\3\1\0\6\3\3\0\1\65\15\0\1\273\15\0"+
    "\1\273\31\0\1\273\6\0\3\66\1\0\1\66\1\0"+
    "\74\66\1\0\1\66\1\0\63\66\1\274\5\66\3\70"+
    "\1\0\1\70\1\0\1\70\1\275\67\70\3\71\1\276"+
    "\1\71\1\276\2\71\1\277\66\71\1\0\2\3\31\0"+
    "\1\300\1\301\31\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\302\16\3\1\303\11\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\3\1\304\17\3\1\305\11\3\1\0"+
    "\6\3\2\0\2\3\31\0\4\3\1\306\2\3\1\307"+
    "\23\3\1\0\6\3\2\0\2\3\31\0\4\3\1\310"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\4\3\1\311"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\17\3\1\312"+
    "\13\3\1\0\6\3\2\0\2\3\31\0\11\3\1\313"+
    "\5\3\1\314\13\3\1\0\6\3\2\0\2\3\31\0"+
    "\22\3\1\315\10\3\1\0\6\3\2\0\2\3\31\0"+
    "\4\3\1\316\14\3\1\317\11\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\320\5\3\1\321\1\322\1\323\1\324"+
    "\5\3\1\325\13\3\1\0\6\3\2\0\2\3\31\0"+
    "\20\3\1\326\12\3\1\0\6\3\2\0\2\3\31\0"+
    "\25\3\1\327\5\3\1\0\6\3\2\0\2\3\31\0"+
    "\11\3\1\330\21\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\331\16\3\1\332\13\3\1\0\6\3\2\0\2\3"+
    "\31\0\14\3\1\333\10\3\1\334\5\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\335\1\3\1\336\4\3"+
    "\1\337\4\3\1\340\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\341\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\3\1\342\31\3\1\0\6\3\2\0\2\3"+
    "\31\0\17\3\1\343\13\3\1\0\6\3\2\0\2\3"+
    "\31\0\11\3\1\344\21\3\1\0\6\3\2\0\2\3"+
    "\31\0\15\3\1\345\15\3\1\0\6\3\2\0\2\3"+
    "\31\0\3\3\1\346\21\3\1\347\5\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\350\13\3\1\351\1\3\1\352"+
    "\2\3\1\353\11\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\354\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\25\3\1\355\5\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\356\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\13\3\1\357\17\3\1\0\6\3\2\0\2\3\31\0"+
    "\16\3\1\360\14\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\361\3\3\1\362\2\3\1\363\1\364\1\365\1\3"+
    "\1\366\3\3\1\367\7\3\1\370\3\3\1\0\6\3"+
    "\2\0\2\3\31\0\7\3\1\371\23\3\1\0\6\3"+
    "\2\0\2\3\31\0\22\3\1\372\10\3\1\0\6\3"+
    "\2\0\2\3\31\0\7\3\1\373\16\3\1\374\4\3"+
    "\1\0\6\3\2\0\2\3\31\0\4\3\1\375\20\3"+
    "\1\376\5\3\1\0\6\3\2\0\2\3\31\0\3\3"+
    "\1\377\27\3\1\0\6\3\2\0\2\3\31\0\12\3"+
    "\1\u0100\20\3\1\0\6\3\2\0\2\3\31\0\7\3"+
    "\1\u0101\15\3\1\u0102\5\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u0103\1\3\1\u0104\2\3\1\u0105\21\3"+
    "\1\0\6\3\2\0\2\3\31\0\6\3\1\u0106\10\3"+
    "\1\u0107\13\3\1\0\6\3\2\0\2\3\31\0\1\u0108"+
    "\7\3\1\u0109\16\3\1\u010a\3\3\1\0\6\3\2\0"+
    "\2\3\31\0\6\3\1\u010b\15\3\1\u010c\6\3\1\0"+
    "\6\3\2\0\2\3\31\0\1\u010d\10\3\1\u010e\14\3"+
    "\1\u010f\4\3\1\0\6\3\2\0\2\3\31\0\7\3"+
    "\1\u0110\23\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u0111\26\3\1\0\6\3\2\0\2\3\31\0\2\3"+
    "\1\u0112\15\3\1\u0113\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\20\3\1\u0114\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u0115\1\u0116\23\3\1\0\6\3\2\0"+
    "\2\3\31\0\5\3\1\u0117\1\3\1\u0118\23\3\1\0"+
    "\6\3\2\0\2\3\31\0\5\3\1\u0119\6\3\1\u011a"+
    "\16\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u011b"+
    "\12\3\1\u011c\13\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u011d\15\3\1\u011e\12\3\1\0\6\3\2\0"+
    "\2\3\31\0\14\3\1\u011f\3\3\1\u0120\12\3\1\0"+
    "\6\3\2\0\2\3\31\0\1\u0121\1\3\1\u0122\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\5\3\1\u0123\25\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\u0124\4\3\1\u0125"+
    "\1\u0126\1\u0127\4\3\1\u0128\10\3\1\u0129\5\3\1\0"+
    "\6\3\2\0\2\3\31\0\27\3\1\u012a\3\3\1\0"+
    "\6\3\2\0\2\3\31\0\7\3\1\u012b\4\3\1\u012c"+
    "\16\3\1\0\6\3\2\0\2\3\31\0\1\3\1\u012d"+
    "\3\3\1\u012e\11\3\1\u012f\13\3\1\0\6\3\2\0"+
    "\2\3\31\0\5\3\1\u0130\25\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u0131\13\3\1\u0132\1\3\1\u0133"+
    "\12\3\1\0\6\3\2\0\2\3\31\0\1\u0134\32\3"+
    "\1\0\6\3\2\0\2\3\31\0\15\3\1\u0135\15\3"+
    "\1\0\6\3\2\0\2\3\31\0\27\3\1\u0136\3\3"+
    "\1\0\6\3\2\0\2\3\31\0\17\3\1\u0137\13\3"+
    "\1\0\6\3\2\0\2\3\31\0\13\3\1\u0138\2\3"+
    "\1\u0139\5\3\1\u013a\6\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\3\1\u013b\11\3\1\u013c\17\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\u013d\1\3\1\u013e\13\3\1\u013f"+
    "\14\3\1\0\6\3\2\0\2\3\31\0\11\3\1\u0140"+
    "\21\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u0141"+
    "\15\3\1\u0142\10\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u0143\15\3\1\u0144\12\3\1\0\6\3\2\0"+
    "\2\3\31\0\7\3\1\u0145\23\3\1\0\6\3\2\0"+
    "\2\3\31\0\4\3\1\u0146\26\3\1\0\6\3\2\0"+
    "\2\3\31\0\4\3\1\u0147\26\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u0148\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\3\1\u0149\2\3\1\u014a\1\3\1\u014b"+
    "\2\3\1\u014c\1\3\1\u014d\2\3\1\u014e\1\u014f\13\3"+
    "\1\0\6\3\2\0\2\3\31\0\20\3\1\u0150\12\3"+
    "\1\0\6\3\2\0\2\3\31\0\25\3\1\u0151\5\3"+
    "\1\0\6\3\2\0\2\3\31\0\27\3\1\u0152\3\3"+
    "\1\0\6\3\2\0\2\3\31\0\4\3\1\u0153\2\3"+
    "\1\u0154\1\3\1\u0155\5\3\1\u0156\5\3\1\u0157\5\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\u0158\32\3\1\0"+
    "\6\3\2\0\2\3\31\0\5\3\1\u0159\4\3\1\u015a"+
    "\20\3\1\0\6\3\2\0\2\3\31\0\14\3\1\u015b"+
    "\16\3\1\0\6\3\2\0\2\3\31\0\1\u015c\32\3"+
    "\1\0\6\3\2\0\2\3\31\0\15\3\1\u015d\7\3"+
    "\1\u015e\5\3\1\0\6\3\2\0\2\3\31\0\23\3"+
    "\1\u015f\7\3\1\0\6\3\2\0\2\3\31\0\25\3"+
    "\1\u0160\5\3\1\0\6\3\2\0\2\3\31\0\17\3"+
    "\1\u0161\13\3\1\0\6\3\2\0\2\3\31\0\1\u0162"+
    "\32\3\1\0\6\3\2\0\2\3\31\0\7\3\1\u0163"+
    "\23\3\1\0\6\3\2\0\2\3\31\0\1\3\1\u0164"+
    "\31\3\1\0\6\3\2\0\2\3\31\0\7\3\1\u0165"+
    "\23\3\1\0\6\3\2\0\2\3\31\0\10\3\1\u0166"+
    "\22\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u0167"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\2\3\1\u0168"+
    "\1\3\1\u0169\26\3\1\0\6\3\2\0\2\3\31\0"+
    "\4\3\1\u016a\26\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u016b\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\u016c\32\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u016d\26\3\1\0\6\3\2\0\2\3\31\0\1\u016e"+
    "\17\3\1\u016f\12\3\1\0\6\3\2\0\2\3\31\0"+
    "\20\3\1\u0170\12\3\1\0\6\3\2\0\2\3\31\0"+
    "\4\3\1\u0171\26\3\1\0\6\3\2\0\2\3\31\0"+
    "\6\3\1\u0172\24\3\1\0\6\3\2\0\2\3\31\0"+
    "\21\3\1\u0173\11\3\1\0\6\3\2\0\2\3\31\0"+
    "\7\3\1\u0174\23\3\1\0\6\3\2\0\2\3\31\0"+
    "\3\3\1\u0175\1\u0176\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u0177\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u0178\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\3\1\u0179\4\3\1\u017a\24\3\1\0\6\3"+
    "\2\0\2\3\31\0\16\3\1\u017b\14\3\1\0\6\3"+
    "\2\0\2\3\31\0\16\3\1\u017c\14\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u017d\13\3\1\u017e\14\3"+
    "\1\0\6\3\2\0\2\3\31\0\4\3\1\u017f\26\3"+
    "\1\0\6\3\2\0\2\3\31\0\5\3\1\u0180\25\3"+
    "\1\0\6\3\2\0\2\3\31\0\5\3\1\u0181\1\3"+
    "\1\u0182\23\3\1\0\6\3\2\0\2\3\31\0\2\3"+
    "\1\u0183\30\3\1\0\6\3\2\0\2\3\31\0\16\3"+
    "\1\u0184\14\3\1\0\6\3\3\0\1\65\3\0\1\u0185"+
    "\2\0\1\u0185\6\0\1\u0185\56\0\3\66\1\0\1\66"+
    "\1\0\64\66\1\u0186\4\66\3\70\1\0\1\70\1\0"+
    "\1\70\1\275\1\u0187\66\70\10\276\1\u0188\66\276\3\71"+
    "\1\276\1\71\1\276\1\71\1\u0189\1\277\66\71\1\0"+
    "\2\3\31\0\16\3\1\u018a\14\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u018b\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\20\3\1\u018c\12\3\1\0\6\3\2\0"+
    "\2\3\31\0\16\3\1\u018d\14\3\1\0\6\3\2\0"+
    "\2\3\31\0\12\3\1\u018e\20\3\1\0\6\3\2\0"+
    "\2\3\31\0\20\3\1\u018f\12\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u0190\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\u0191\1\3\1\u0192\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\7\3\1\u0193\23\3\1\0\6\3"+
    "\2\0\2\3\31\0\21\3\1\u0194\11\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u0195\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\u0196\1\3\1\u0197\30\3\1\0"+
    "\6\3\2\0\2\3\31\0\7\3\1\u0198\6\3\1\u0199"+
    "\14\3\1\0\6\3\2\0\2\3\31\0\11\3\1\u019a"+
    "\21\3\1\0\6\3\2\0\2\3\31\0\13\3\1\u019b"+
    "\17\3\1\0\6\3\2\0\2\3\31\0\13\3\1\u019c"+
    "\17\3\1\0\6\3\2\0\2\3\31\0\11\3\1\u019d"+
    "\21\3\1\0\6\3\2\0\2\3\31\0\22\3\1\u019e"+
    "\10\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u019f"+
    "\4\3\1\u01a0\12\3\1\u01a1\6\3\1\0\6\3\2\0"+
    "\2\3\31\0\15\3\1\u01a2\15\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\u01a3\32\3\1\0\6\3\2\0\2\3"+
    "\31\0\11\3\1\u01a4\21\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u01a5\2\3\1\u01a6\25\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u01a7\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u01a8\12\3\1\u01a9\13\3"+
    "\1\0\6\3\2\0\2\3\31\0\7\3\1\u01aa\23\3"+
    "\1\0\6\3\2\0\2\3\3\0\1\u01ab\25\0\33\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u01ac\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\u01ad\32\3\1\0"+
    "\6\3\2\0\2\3\31\0\7\3\1\u01ae\23\3\1\0"+
    "\6\3\2\0\2\3\31\0\4\3\1\u01af\26\3\1\0"+
    "\6\3\2\0\2\3\31\0\13\3\1\u01b0\17\3\1\0"+
    "\6\3\2\0\2\3\31\0\6\3\1\u01b1\7\3\1\u01b2"+
    "\14\3\1\0\6\3\2\0\2\3\31\0\2\3\1\u01b3"+
    "\3\3\1\u01b4\24\3\1\0\6\3\2\0\2\3\31\0"+
    "\22\3\1\u01b5\2\3\1\u01b6\5\3\1\0\6\3\2\0"+
    "\2\3\31\0\30\3\1\u01b7\2\3\1\0\6\3\2\0"+
    "\2\3\31\0\6\3\1\u01b8\24\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u01b9\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\32\3\1\u01ba\1\0\6\3\2\0\2\3"+
    "\31\0\17\3\1\u01bb\13\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\3\1\u01bc\5\3\1\u01bd\23\3\1\0\6\3"+
    "\2\0\2\3\31\0\14\3\1\u01be\16\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\u01bf\32\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u01c0\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\20\3\1\u01c1\12\3\1\0\6\3\2\0"+
    "\2\3\31\0\7\3\1\u01c2\23\3\1\0\6\3\2\0"+
    "\2\3\31\0\4\3\1\u01c3\26\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u01c4\15\3\1\u01c5\12\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u01c6\30\3\1\0"+
    "\6\3\2\0\2\3\31\0\12\3\1\u01c7\20\3\1\0"+
    "\6\3\2\0\2\3\31\0\7\3\1\u01c8\23\3\1\0"+
    "\6\3\2\0\2\3\31\0\11\3\1\u01c9\5\3\1\u01ca"+
    "\2\3\1\u01cb\10\3\1\0\6\3\2\0\2\3\31\0"+
    "\14\3\1\u01cc\1\3\1\u01cd\14\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u01ce\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\4\3\1\u01cf\26\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\u01d0\32\3\1\0\6\3\2\0\2\3"+
    "\31\0\7\3\1\u01d1\23\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u01d2\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u01d3\6\3\1\u01d4\21\3\1\0\6\3"+
    "\2\0\2\3\31\0\12\3\1\u01d5\20\3\1\0\6\3"+
    "\2\0\2\3\31\0\22\3\1\u01d6\10\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u01d7\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\3\1\u01d8\31\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u01d9\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u01da\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u01db\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u01dc\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\3\1\u01dd\31\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\u01de\32\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u01df\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\17\3\1\u01e0\13\3\1\0\6\3\2\0"+
    "\2\3\31\0\11\3\1\u01e1\21\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u01e2\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\25\3\1\u01e3\5\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\u01e4\32\3\1\0\6\3\2\0\2\3"+
    "\31\0\11\3\1\u01e5\21\3\1\0\6\3\2\0\2\3"+
    "\31\0\7\3\1\u01e6\23\3\1\0\6\3\2\0\2\3"+
    "\31\0\17\3\1\u01e7\13\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u01e8\4\3\1\u01e9\23\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u01ea\1\3\1\u01eb\26\3"+
    "\1\0\6\3\2\0\2\3\31\0\6\3\1\u01ec\24\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\u01ed\32\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u01ee\1\3\1\u01ef"+
    "\4\3\1\u01f0\21\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\u01f1\32\3\1\0\6\3\2\0\2\3\31\0\17\3"+
    "\1\u01f2\13\3\1\0\6\3\2\0\2\3\31\0\17\3"+
    "\1\u01f3\13\3\1\0\6\3\2\0\2\3\31\0\17\3"+
    "\1\u01f4\13\3\1\0\6\3\2\0\2\3\31\0\5\3"+
    "\1\u01f5\25\3\1\0\6\3\2\0\2\3\31\0\11\3"+
    "\1\u01f6\21\3\1\0\6\3\2\0\2\3\31\0\5\3"+
    "\1\u01f7\11\3\1\u01f8\13\3\1\0\6\3\2\0\2\3"+
    "\31\0\7\3\1\u01f9\23\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u01fa\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u01fb\1\3\1\u01fc\10\3\1\u01fd\7\3"+
    "\1\u01fe\3\3\1\0\6\3\2\0\2\3\31\0\7\3"+
    "\1\u01ff\4\3\1\u0200\16\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u0201\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\13\3\1\u0202\11\3\1\u0203\5\3\1\0\6\3"+
    "\2\0\2\3\31\0\16\3\1\u0204\14\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\3\1\u0205\31\3\1\0\6\3"+
    "\2\0\2\3\31\0\5\3\1\u0206\25\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u0207\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\11\3\1\u0208\21\3\1\0\6\3"+
    "\2\0\2\3\31\0\11\3\1\u0209\21\3\1\0\6\3"+
    "\2\0\2\3\31\0\11\3\1\u020a\1\3\1\u020b\3\3"+
    "\1\u020c\13\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u020d\11\3\1\u020e\4\3\1\u020f\1\3\1\u0210\3\3"+
    "\1\0\6\3\2\0\2\3\31\0\11\3\1\u0211\21\3"+
    "\1\0\6\3\2\0\2\3\31\0\6\3\1\u0212\24\3"+
    "\1\0\6\3\2\0\2\3\31\0\7\3\1\u0213\23\3"+
    "\1\0\6\3\2\0\2\3\31\0\20\3\1\u0214\12\3"+
    "\1\0\6\3\2\0\2\3\31\0\16\3\1\u0215\14\3"+
    "\1\0\6\3\2\0\2\3\31\0\16\3\1\u0216\14\3"+
    "\1\0\6\3\2\0\2\3\31\0\20\3\1\u0217\11\3"+
    "\1\u0218\1\0\6\3\2\0\2\3\31\0\6\3\1\u0219"+
    "\24\3\1\0\6\3\2\0\2\3\31\0\1\u021a\32\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u021b\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\22\3\1\u021c\10\3"+
    "\1\0\6\3\2\0\2\3\31\0\5\3\1\u021d\25\3"+
    "\1\0\6\3\2\0\2\3\31\0\6\3\1\u021e\24\3"+
    "\1\0\6\3\2\0\2\3\31\0\24\3\1\u021f\6\3"+
    "\1\0\6\3\2\0\2\3\31\0\26\3\1\u0220\4\3"+
    "\1\0\6\3\2\0\2\3\31\0\16\3\1\u0221\14\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\u0222\32\3\1\0"+
    "\6\3\2\0\2\3\31\0\26\3\1\u0223\4\3\1\0"+
    "\6\3\2\0\2\3\31\0\24\3\1\u0224\6\3\1\0"+
    "\6\3\2\0\2\3\31\0\30\3\1\u0225\2\3\1\0"+
    "\6\3\2\0\2\3\31\0\12\3\1\u0226\20\3\1\0"+
    "\6\3\2\0\2\3\31\0\6\3\1\u0227\24\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u0228\13\3\1\u0229"+
    "\14\3\1\0\6\3\2\0\2\3\31\0\2\3\1\u022a"+
    "\15\3\1\u022b\12\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u022c\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\7\3\1\u022d\23\3\1\0\6\3\2\0\2\3\31\0"+
    "\14\3\1\u022e\16\3\1\0\6\3\2\0\2\3\31\0"+
    "\4\3\1\u022f\26\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u0230\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\7\3\1\u0231\23\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u0232\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u0233\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\14\3\1\u0234\16\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u0235\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\4\3\1\u0236\7\3\1\u0237\3\3\1\u0238\12\3\1\0"+
    "\6\3\2\0\2\3\31\0\17\3\1\u0239\13\3\1\0"+
    "\6\3\2\0\2\3\31\0\1\u023a\32\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u023b\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\20\3\1\u023c\12\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u023d\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u023e\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\11\3\1\u023f\21\3\1\0\6\3"+
    "\2\0\2\3\31\0\17\3\1\u0240\13\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u0241\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u0242\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u0243\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\7\3\1\u0244\23\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u0245\6\3\1\u0246\5\3"+
    "\1\u0247\6\3\1\u0248\4\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u0249\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\21\3\1\u024a\11\3\1\0\6\3\2\0\2\3"+
    "\31\0\17\3\1\u024b\13\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u024c\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u024d\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u024e\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u024f\10\3\1\u0250\17\3\1\0\6\3"+
    "\2\0\2\3\31\0\5\3\1\u0251\25\3\1\0\6\3"+
    "\2\0\2\3\31\0\5\3\1\u0252\25\3\1\0\6\3"+
    "\2\0\2\3\31\0\6\3\1\u0253\24\3\1\0\6\3"+
    "\2\0\2\3\31\0\14\3\1\u0254\16\3\1\0\6\3"+
    "\2\0\2\3\31\0\15\3\1\u0255\15\3\1\0\6\3"+
    "\2\0\2\3\31\0\20\3\1\u0256\12\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u0257\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\7\3\1\u0258\23\3\1\0\6\3"+
    "\2\0\2\3\31\0\11\3\1\u0259\21\3\1\0\6\3"+
    "\2\0\2\3\31\0\22\3\1\u025a\10\3\1\0\6\3"+
    "\2\0\2\3\31\0\14\3\1\u025b\16\3\1\0\6\3"+
    "\2\0\2\3\31\0\14\3\1\u025c\16\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u025d\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u025e\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u025f\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\5\3\1\u0260\1\u0261\24\3\1\0"+
    "\6\3\2\0\2\3\31\0\7\3\1\u0262\23\3\1\0"+
    "\6\3\2\0\2\3\31\0\12\3\1\u0263\20\3\1\0"+
    "\6\3\2\0\2\3\31\0\24\3\1\u0264\6\3\1\0"+
    "\6\3\2\0\2\3\31\0\11\3\1\u0265\7\3\1\u0266"+
    "\11\3\1\0\6\3\2\0\2\3\31\0\14\3\1\u0267"+
    "\16\3\1\0\6\3\2\0\2\3\31\0\26\3\1\u0268"+
    "\4\3\1\0\6\3\2\0\2\3\31\0\6\3\1\u0269"+
    "\24\3\1\0\6\3\3\0\1\65\74\0\3\66\1\0"+
    "\1\66\1\0\65\66\1\u026a\3\66\3\u0187\1\276\1\u0187"+
    "\1\276\1\u0187\1\u026b\1\u026c\66\u0187\7\276\1\u026d\1\u0188"+
    "\66\276\3\66\1\0\1\66\1\0\1\u026e\1\u026f\67\66"+
    "\1\0\2\3\31\0\6\3\1\u0270\24\3\1\0\6\3"+
    "\2\0\2\3\31\0\5\3\1\u0271\25\3\1\0\6\3"+
    "\2\0\2\3\31\0\11\3\1\u0272\21\3\1\0\6\3"+
    "\2\0\2\3\31\0\20\3\1\u0273\12\3\1\0\6\3"+
    "\2\0\2\3\31\0\20\3\1\u0274\12\3\1\0\6\3"+
    "\2\0\2\3\31\0\7\3\1\u0275\23\3\1\0\6\3"+
    "\2\0\2\3\31\0\5\3\1\u0276\25\3\1\0\6\3"+
    "\2\0\2\3\31\0\15\3\1\u0277\15\3\1\0\6\3"+
    "\2\0\2\3\31\0\7\3\1\u0278\23\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u0279\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\14\3\1\u027a\16\3\1\0\6\3"+
    "\2\0\2\3\31\0\5\3\1\u027b\25\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\u027c\32\3\1\0\6\3\2\0"+
    "\2\3\31\0\25\3\1\u027d\5\3\1\0\6\3\2\0"+
    "\2\3\31\0\5\3\1\u027e\25\3\1\0\6\3\2\0"+
    "\2\3\31\0\6\3\1\u027f\24\3\1\0\6\3\2\0"+
    "\2\3\31\0\5\3\1\u0280\10\3\1\u0281\14\3\1\0"+
    "\6\3\2\0\2\3\31\0\20\3\1\u0282\12\3\1\0"+
    "\6\3\2\0\2\3\31\0\7\3\1\u0283\23\3\1\0"+
    "\6\3\2\0\2\3\31\0\16\3\1\u0284\14\3\1\0"+
    "\6\3\2\0\2\3\31\0\14\3\1\u0285\16\3\1\0"+
    "\6\3\2\0\2\3\31\0\5\3\1\u0286\25\3\1\0"+
    "\6\3\2\0\2\3\31\0\1\u0287\32\3\1\0\6\3"+
    "\2\0\2\3\31\0\13\3\1\u0288\17\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u0289\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\27\3\1\u028a\3\3\1\0\6\3"+
    "\37\0\1\u028b\41\0\2\3\31\0\13\3\1\u028c\17\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u028d\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\17\3\1\u028e\13\3"+
    "\1\0\6\3\2\0\2\3\31\0\20\3\1\u028f\12\3"+
    "\1\0\6\3\2\0\2\3\31\0\17\3\1\u0290\13\3"+
    "\1\0\6\3\2\0\2\3\31\0\7\3\1\u0291\23\3"+
    "\1\0\6\3\2\0\2\3\31\0\11\3\1\u0292\21\3"+
    "\1\0\6\3\2\0\2\3\31\0\22\3\1\u0293\10\3"+
    "\1\0\6\3\2\0\2\3\31\0\11\3\1\u0294\21\3"+
    "\1\0\6\3\2\0\2\3\31\0\17\3\1\u0295\3\3"+
    "\1\u0296\7\3\1\0\6\3\2\0\2\3\31\0\14\3"+
    "\1\u0297\16\3\1\0\6\3\2\0\2\3\31\0\2\3"+
    "\1\u0298\30\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u0299\26\3\1\0\6\3\2\0\2\3\31\0\5\3"+
    "\1\u029a\25\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u029b\26\3\1\0\6\3\2\0\2\3\31\0\5\3"+
    "\1\u029c\25\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u029d\24\3\1\0\6\3\2\0\2\3\31\0\16\3"+
    "\1\u029e\14\3\1\0\6\3\2\0\2\3\31\0\5\3"+
    "\1\u029f\12\3\1\u02a0\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u02a1\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\24\3\1\u02a2\6\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u02a3\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\15\3\1\u02a4\15\3\1\0\6\3\2\0\2\3"+
    "\31\0\20\3\1\u02a5\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\14\3\1\u02a6\16\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u02a7\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\20\3\1\u02a8\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\17\3\1\u02a9\13\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u02aa\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u02ab\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u02ac\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\7\3\1\u02ad\23\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u02ae\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\14\3\1\u02af\16\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u02b0\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\7\3\1\u02b1\23\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u02b2\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\7\3\1\u02b3\23\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u02b4\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u02b5\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\12\3\1\u02b6\20\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u02b7\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u02b8\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u02b9\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u02ba\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\10\3\1\u02bb\22\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u02bc\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u02bd\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\3\1\u02be\31\3\1\0\6\3\2\0\2\3"+
    "\31\0\7\3\1\u02bf\23\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\u02c0\32\3\1\0\6\3\2\0\2\3\31\0"+
    "\4\3\1\u02c1\26\3\1\0\6\3\2\0\2\3\31\0"+
    "\17\3\1\u02c2\13\3\1\0\6\3\2\0\2\3\31\0"+
    "\4\3\1\u02c3\26\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u02c4\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\u02c5\27\3\1\u02c6\2\3\1\0\6\3\2\0\2\3"+
    "\31\0\24\3\1\u02c7\6\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u02c8\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\20\3\1\u02c9\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u02ca\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u02cb\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\u02cc\15\3\1\u02cd\14\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u02ce\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\4\3\1\u02cf\26\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u02d0\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\u02d1\32\3\1\0\6\3\2\0\2\3"+
    "\31\0\25\3\1\u02d2\5\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u02d3\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\14\3\1\u02d4\16\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u02d5\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u02d6\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\7\3\1\u02d7\23\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u02d8\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\u02d9\32\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u02da\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\16\3\1\u02db\14\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\u02dc\32\3\1\0\6\3\2\0\2\3\31\0\2\3"+
    "\1\u02dd\30\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u02de\26\3\1\0\6\3\2\0\2\3\31\0\5\3"+
    "\1\u02df\25\3\1\0\6\3\2\0\2\3\31\0\1\u02e0"+
    "\32\3\1\0\6\3\2\0\2\3\31\0\16\3\1\u02e1"+
    "\14\3\1\0\6\3\2\0\2\3\31\0\2\3\1\u02e2"+
    "\30\3\1\0\6\3\2\0\2\3\31\0\16\3\1\u02e3"+
    "\14\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u02e4"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u02e5"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\27\3\1\u02e6"+
    "\3\3\1\0\6\3\2\0\2\3\31\0\6\3\1\u02e7"+
    "\24\3\1\0\6\3\2\0\2\3\31\0\14\3\1\u02e8"+
    "\16\3\1\0\6\3\2\0\2\3\31\0\20\3\1\u02e9"+
    "\12\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u02ea"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\5\3\1\u02eb"+
    "\25\3\1\0\6\3\2\0\2\3\31\0\2\3\1\u02ec"+
    "\30\3\1\0\6\3\2\0\2\3\31\0\22\3\1\u02ed"+
    "\10\3\1\0\6\3\2\0\2\3\31\0\14\3\1\u02ee"+
    "\16\3\1\0\6\3\2\0\2\3\31\0\2\3\1\u02ef"+
    "\30\3\1\0\6\3\2\0\2\3\31\0\6\3\1\u02f0"+
    "\24\3\1\0\6\3\2\0\2\3\31\0\24\3\1\u02f1"+
    "\6\3\1\0\6\3\2\0\2\3\31\0\17\3\1\u02f2"+
    "\13\3\1\0\6\3\2\0\2\3\31\0\7\3\1\u02f3"+
    "\23\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u02f4"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\3\3\1\u02f5"+
    "\27\3\1\0\6\3\2\0\2\3\31\0\11\3\1\u02f6"+
    "\21\3\1\0\6\3\2\0\2\3\31\0\5\3\1\u02f7"+
    "\14\3\1\u02f8\10\3\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\u02f9\25\3\1\0\6\3\2\0\2\3\31\0"+
    "\14\3\1\u02fa\16\3\1\0\6\3\2\0\2\3\31\0"+
    "\4\3\1\u02fb\26\3\1\0\6\3\2\0\2\3\31\0"+
    "\16\3\1\u02fc\14\3\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\u02fd\1\u02fe\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\u02ff\32\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\3\1\u0300\31\3\1\0\6\3\2\0\2\3\31\0"+
    "\17\3\1\u0301\13\3\1\0\6\3\2\0\2\3\31\0"+
    "\11\3\1\u0302\21\3\1\0\6\3\2\0\2\3\31\0"+
    "\16\3\1\u0303\14\3\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\u0304\25\3\1\0\6\3\2\0\2\3\31\0"+
    "\6\3\1\u0305\24\3\1\0\6\3\2\0\2\3\31\0"+
    "\16\3\1\u0306\14\3\1\0\6\3\2\0\2\3\31\0"+
    "\6\3\1\u0307\24\3\1\0\6\3\2\0\2\3\31\0"+
    "\16\3\1\u0308\14\3\1\0\6\3\2\0\2\3\31\0"+
    "\7\3\1\u0309\23\3\1\0\6\3\2\0\2\3\31\0"+
    "\25\3\1\u030a\5\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\3\1\u030b\31\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u030c\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\4\3\1\u030d\26\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u030e\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\7\3\1\u030f\23\3\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\u0310\25\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\u0311\17\3\1\u0312\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u0313\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\u0314\32\3\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\u0315\25\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u0316\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\4\3\1\u0317\26\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\3\1\u0318\1\3\1\u0319\1\3\1\u031a\24\3\1\u031b"+
    "\1\0\6\3\2\0\2\3\31\0\20\3\1\u031c\12\3"+
    "\1\0\6\3\2\0\2\3\31\0\5\3\1\u031d\25\3"+
    "\1\0\6\3\2\0\2\3\31\0\14\3\1\u031e\16\3"+
    "\1\0\6\3\2\0\2\3\31\0\7\3\1\u031f\23\3"+
    "\1\0\6\3\2\0\2\3\31\0\4\3\1\u0320\26\3"+
    "\1\0\6\3\2\0\2\3\31\0\13\3\1\u0321\17\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\u0322\32\3\1\0"+
    "\6\3\2\0\2\3\31\0\12\3\1\u0323\20\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u0324\30\3\1\0"+
    "\6\3\2\0\2\3\31\0\4\3\1\u0325\26\3\1\0"+
    "\6\3\2\0\2\3\31\0\7\3\1\u0326\23\3\1\0"+
    "\6\3\2\0\2\3\31\0\12\3\1\u0327\20\3\1\0"+
    "\6\3\2\0\2\3\31\0\10\3\1\u0328\22\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u0329\30\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u032a\30\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u032b\30\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u032c\30\3\1\0"+
    "\6\3\2\0\2\3\31\0\16\3\1\u032d\14\3\1\0"+
    "\6\3\2\0\2\3\31\0\12\3\1\u032e\20\3\1\0"+
    "\6\3\2\0\2\3\31\0\16\3\1\u032f\14\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u0330\30\3\1\0"+
    "\6\3\1\0\3\66\1\0\1\66\1\0\66\66\1\u0331"+
    "\2\66\3\u0187\1\276\1\u0187\1\276\1\u0187\1\u026b\72\u0187"+
    "\1\276\1\u0187\1\276\1\u0187\1\275\1\u026c\66\u0187\6\0"+
    "\1\u0332\1\u0333\67\0\3\66\1\0\1\66\1\0\1\70"+
    "\73\66\1\0\1\66\1\0\2\66\1\71\66\66\1\0"+
    "\2\3\31\0\22\3\1\u0334\10\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\u0335\32\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u0336\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u0337\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\14\3\1\u0338\16\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u0339\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\u033a\32\3\1\0\6\3\2\0\2\3\31\0"+
    "\20\3\1\u033b\12\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u033c\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\7\3\1\u033d\23\3\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\u033e\25\3\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\u033f\25\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\u0340\32\3\1\0\6\3\2\0\2\3\31\0\16\3"+
    "\1\u0341\14\3\1\0\6\3\2\0\2\3\31\0\20\3"+
    "\1\u0342\12\3\1\0\6\3\2\0\2\3\31\0\16\3"+
    "\1\u0343\14\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u0344\24\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u0345\24\3\1\0\6\3\2\0\2\3\31\0\2\3"+
    "\1\u0346\30\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u0347\24\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u0348\26\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u0349\24\3\1\0\6\3\2\0\2\3\31\0\11\3"+
    "\1\u034a\21\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u034b\26\3\1\0\6\3\2\0\2\3\31\0\17\3"+
    "\1\u034c\13\3\1\0\6\3\2\0\2\3\31\0\7\3"+
    "\1\u034d\23\3\1\0\6\3\40\0\1\u034e\40\0\2\3"+
    "\31\0\2\3\1\u034f\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\17\3\1\u0350\13\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u0351\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u0352\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\u0353\6\3\1\u0354\23\3\1\0\6\3\2\0"+
    "\2\3\31\0\16\3\1\u0355\14\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\u0356\32\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u0357\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\20\3\1\u0358\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u0359\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\20\3\1\u035a\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\u035b\32\3\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\u035c\25\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u035d\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\6\3\1\u035e\24\3\1\0\6\3\2\0\2\3\31\0"+
    "\16\3\1\u035f\14\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u0360\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\10\3\1\u0361\22\3\1\0\6\3\2\0\2\3\31\0"+
    "\11\3\1\u0362\21\3\1\0\6\3\2\0\2\3\31\0"+
    "\16\3\1\u0363\14\3\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\u0364\25\3\1\0\6\3\2\0\2\3\31\0"+
    "\4\3\1\u0365\26\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u0366\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\u0367\32\3\1\0\6\3\2\0\2\3\31\0\14\3"+
    "\1\u0368\16\3\1\0\6\3\2\0\2\3\31\0\16\3"+
    "\1\u0369\14\3\1\0\6\3\2\0\2\3\31\0\1\u036a"+
    "\32\3\1\0\6\3\2\0\2\3\31\0\6\3\1\u036b"+
    "\24\3\1\0\6\3\2\0\2\3\31\0\10\3\1\u036c"+
    "\22\3\1\0\6\3\2\0\2\3\31\0\16\3\1\u036d"+
    "\14\3\1\0\6\3\2\0\2\3\31\0\14\3\1\u036e"+
    "\16\3\1\0\6\3\2\0\2\3\31\0\11\3\1\u036f"+
    "\21\3\1\0\6\3\2\0\2\3\31\0\1\u0370\32\3"+
    "\1\0\6\3\2\0\2\3\31\0\6\3\1\u0371\24\3"+
    "\1\0\6\3\2\0\2\3\31\0\20\3\1\u0372\12\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u0373\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\16\3\1\u0374\14\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\u0375\32\3\1\0"+
    "\6\3\2\0\2\3\31\0\22\3\1\u0376\10\3\1\0"+
    "\6\3\2\0\2\3\31\0\1\u0377\32\3\1\0\6\3"+
    "\2\0\2\3\31\0\20\3\1\u0378\12\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\3\1\u0379\31\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u037a\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u037b\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\11\3\1\u037c\21\3\1\0\6\3"+
    "\2\0\2\3\31\0\7\3\1\u037d\23\3\1\0\6\3"+
    "\2\0\2\3\31\0\13\3\1\u037e\17\3\1\0\6\3"+
    "\2\0\2\3\31\0\6\3\1\u037f\24\3\1\0\6\3"+
    "\2\0\2\3\31\0\5\3\1\u0380\25\3\1\0\6\3"+
    "\2\0\2\3\31\0\17\3\1\u0381\13\3\1\0\6\3"+
    "\2\0\2\3\31\0\17\3\1\u0382\13\3\1\0\6\3"+
    "\2\0\2\3\31\0\16\3\1\u0383\14\3\1\0\6\3"+
    "\2\0\2\3\31\0\6\3\1\u0384\24\3\1\0\6\3"+
    "\2\0\2\3\31\0\11\3\1\u0385\21\3\1\0\6\3"+
    "\2\0\2\3\31\0\5\3\1\u0386\25\3\1\0\6\3"+
    "\2\0\2\3\31\0\5\3\1\u0387\25\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u0388\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\6\3\1\u0389\24\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u038a\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u038b\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\22\3\1\u038c\10\3\1\0\6\3"+
    "\2\0\2\3\31\0\20\3\1\u038d\12\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\u038e\32\3\1\0\6\3\2\0"+
    "\2\3\31\0\7\3\1\u038f\23\3\1\0\6\3\2\0"+
    "\2\3\31\0\6\3\1\u0390\24\3\1\0\6\3\2\0"+
    "\2\3\31\0\17\3\1\u0391\13\3\1\0\6\3\2\0"+
    "\2\3\31\0\5\3\1\u0392\25\3\1\0\6\3\2\0"+
    "\2\3\31\0\5\3\1\u0393\25\3\1\0\6\3\2\0"+
    "\2\3\31\0\5\3\1\u0394\25\3\1\0\6\3\2\0"+
    "\2\3\31\0\7\3\1\u0395\23\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\3\1\u0396\31\3\1\0\6\3\2\0"+
    "\2\3\31\0\11\3\1\u0397\21\3\1\0\6\3\2\0"+
    "\2\3\31\0\16\3\1\u0398\14\3\1\0\6\3\2\0"+
    "\2\3\31\0\20\3\1\u0399\12\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u039a\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\26\3\1\u039b\4\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u039c\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\13\3\1\u039d\17\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u039e\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u039f\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u03a0\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\16\3\1\u03a1\14\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\u03a2\32\3\1\0\6\3\2\0\2\3"+
    "\31\0\17\3\1\u03a3\7\3\1\u03a4\3\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u03a5\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\3\1\u03a6\31\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\u03a7\32\3\1\0\6\3\2\0"+
    "\2\3\31\0\4\3\1\u03a8\26\3\1\0\6\3\2\0"+
    "\2\3\31\0\17\3\1\u03a9\13\3\1\0\6\3\2\0"+
    "\2\3\31\0\4\3\1\u03aa\26\3\1\0\6\3\2\0"+
    "\2\3\31\0\16\3\1\u03ab\14\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u03ac\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\4\3\1\u03ad\26\3\1\0\6\3\2\0"+
    "\2\3\31\0\20\3\1\u03ae\12\3\1\0\6\3\2\0"+
    "\2\3\31\0\16\3\1\u03af\14\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\3\1\u03b0\31\3\1\0\6\3\2\0"+
    "\2\3\31\0\20\3\1\u03b1\12\3\1\0\6\3\2\0"+
    "\2\3\31\0\4\3\1\u03b2\26\3\1\0\6\3\2\0"+
    "\2\3\31\0\17\3\1\u03b3\13\3\1\0\6\3\2\0"+
    "\2\3\31\0\7\3\1\u03b4\23\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\u03b5\32\3\1\0\6\3\2\0\2\3"+
    "\31\0\20\3\1\u03b6\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u03b7\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\25\3\1\u03b8\5\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u03b9\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u03ba\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\3\1\u03bb\31\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\u03bc\32\3\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\u03bd\25\3\1\0\6\3\2\0\2\3\31\0"+
    "\4\3\1\u03be\26\3\1\0\6\3\2\0\2\3\31\0"+
    "\30\3\1\u03bf\2\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\u03c0\32\3\1\0\6\3\2\0\2\3\31\0\25\3"+
    "\1\u03c1\5\3\1\0\6\3\2\0\2\3\31\0\20\3"+
    "\1\u03c2\12\3\1\0\6\3\2\0\2\3\31\0\14\3"+
    "\1\u03c3\16\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u03c4\24\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u03c5\26\3\1\0\6\3\2\0\2\3\31\0\1\u03c6"+
    "\32\3\1\0\6\3\2\0\2\3\31\0\7\3\1\u03c7"+
    "\23\3\1\0\6\3\2\0\2\3\31\0\2\3\1\u03c8"+
    "\30\3\1\0\6\3\2\0\2\3\31\0\2\3\1\u03c9"+
    "\30\3\1\0\6\3\2\0\2\3\31\0\20\3\1\u03ca"+
    "\12\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u03cb"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\27\3\1\u03cc"+
    "\3\3\1\0\6\3\2\0\2\3\31\0\6\3\1\u03cd"+
    "\24\3\1\0\6\3\2\0\2\3\31\0\1\u03ce\32\3"+
    "\1\0\6\3\2\0\2\3\31\0\6\3\1\u03cf\24\3"+
    "\1\0\6\3\2\0\2\3\31\0\17\3\1\u03d0\13\3"+
    "\1\0\6\3\1\0\3\66\1\0\1\66\1\0\67\66"+
    "\1\u03d1\1\66\10\0\1\276\67\0\2\3\31\0\4\3"+
    "\1\u03d2\26\3\1\0\6\3\2\0\2\3\31\0\16\3"+
    "\1\u03d3\14\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u03d4\26\3\1\0\6\3\2\0\2\3\31\0\16\3"+
    "\1\u03d5\14\3\1\0\6\3\2\0\2\3\31\0\17\3"+
    "\1\u03d6\13\3\1\0\6\3\2\0\2\3\31\0\11\3"+
    "\1\u03d7\21\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u03d8\26\3\1\0\6\3\2\0\2\3\31\0\1\u03d9"+
    "\1\3\1\u03da\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u03db\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\7\3\1\u03dc\23\3\1\0\6\3\2\0\2\3\31\0"+
    "\13\3\1\u03dd\1\3\1\u03de\15\3\1\0\6\3\2\0"+
    "\2\3\31\0\17\3\1\u03df\13\3\1\0\6\3\2\0"+
    "\2\3\31\0\15\3\1\u03e0\15\3\1\0\6\3\2\0"+
    "\2\3\31\0\11\3\1\u03e1\21\3\1\0\6\3\2\0"+
    "\2\3\31\0\6\3\1\u03e2\24\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u03e3\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\u03e4\32\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u03e5\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u03e6\14\3\1\0\6\3\37\0\1\u03e7"+
    "\41\0\2\3\31\0\1\u03e8\32\3\1\0\6\3\2\0"+
    "\2\3\31\0\23\3\1\u03e9\7\3\1\0\6\3\2\0"+
    "\2\3\31\0\1\u03ea\32\3\1\0\6\3\2\0\2\3"+
    "\31\0\11\3\1\u03eb\21\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\u03ec\32\3\1\0\6\3\2\0\2\3\31\0"+
    "\6\3\1\u03ed\24\3\1\0\6\3\2\0\2\3\31\0"+
    "\4\3\1\u03ee\26\3\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\u03ef\25\3\1\0\6\3\2\0\2\3\31\0"+
    "\6\3\1\u03f0\24\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\u03f1\32\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u03f2\24\3\1\0\6\3\2\0\2\3\31\0\7\3"+
    "\1\u03f3\23\3\1\0\6\3\2\0\2\3\31\0\5\3"+
    "\1\u03f4\25\3\1\0\6\3\2\0\2\3\31\0\3\3"+
    "\1\u03f5\27\3\1\0\6\3\2\0\2\3\31\0\27\3"+
    "\1\u03f6\3\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u03f7\24\3\1\0\6\3\2\0\2\3\31\0\16\3"+
    "\1\u03f8\14\3\1\0\6\3\2\0\2\3\31\0\1\u03f9"+
    "\32\3\1\0\6\3\2\0\2\3\31\0\11\3\1\u03fa"+
    "\21\3\1\0\6\3\2\0\2\3\31\0\2\3\1\u03fb"+
    "\30\3\1\0\6\3\2\0\2\3\31\0\11\3\1\u03fc"+
    "\21\3\1\0\6\3\2\0\2\3\31\0\6\3\1\u03fd"+
    "\24\3\1\0\6\3\2\0\2\3\31\0\1\3\1\u03fe"+
    "\31\3\1\0\6\3\2\0\2\3\31\0\7\3\1\u03ff"+
    "\23\3\1\0\6\3\2\0\2\3\31\0\1\u0400\32\3"+
    "\1\0\6\3\2\0\2\3\31\0\11\3\1\u0401\21\3"+
    "\1\0\6\3\2\0\2\3\31\0\17\3\1\u0402\13\3"+
    "\1\0\6\3\2\0\2\3\31\0\24\3\1\u0403\6\3"+
    "\1\0\6\3\2\0\2\3\31\0\22\3\1\u0404\10\3"+
    "\1\0\6\3\2\0\2\3\31\0\22\3\1\u0405\10\3"+
    "\1\0\6\3\2\0\2\3\31\0\3\3\1\u0406\27\3"+
    "\1\0\6\3\2\0\2\3\31\0\20\3\1\u0407\12\3"+
    "\1\0\6\3\2\0\2\3\31\0\11\3\1\u0408\21\3"+
    "\1\0\6\3\2\0\2\3\31\0\6\3\1\u0409\24\3"+
    "\1\0\6\3\2\0\2\3\31\0\6\3\1\u040a\24\3"+
    "\1\0\6\3\2\0\2\3\31\0\22\3\1\u040b\10\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u040c\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\5\3\1\u040d\25\3"+
    "\1\0\6\3\2\0\2\3\31\0\4\3\1\u040e\26\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u040f\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\20\3\1\u0410\12\3"+
    "\1\0\6\3\2\0\2\3\31\0\4\3\1\u0411\26\3"+
    "\1\0\6\3\2\0\2\3\31\0\11\3\1\u0412\21\3"+
    "\1\0\6\3\2\0\2\3\31\0\13\3\1\u0413\17\3"+
    "\1\0\6\3\2\0\2\3\31\0\6\3\1\u0414\24\3"+
    "\1\0\6\3\2\0\2\3\31\0\14\3\1\u0415\16\3"+
    "\1\0\6\3\2\0\2\3\31\0\4\3\1\u0416\26\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\u0417\32\3\1\0"+
    "\6\3\2\0\2\3\31\0\4\3\1\u0418\26\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u0419\13\3\1\u041a"+
    "\14\3\1\0\6\3\2\0\2\3\31\0\2\3\1\u041b"+
    "\30\3\1\0\6\3\2\0\2\3\31\0\11\3\1\u041c"+
    "\21\3\1\0\6\3\2\0\2\3\31\0\7\3\1\u041d"+
    "\23\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u041e"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\16\3\1\u041f"+
    "\14\3\1\0\6\3\2\0\2\3\31\0\2\3\1\u0420"+
    "\30\3\1\0\6\3\2\0\2\3\31\0\27\3\1\u0421"+
    "\3\3\1\0\6\3\2\0\2\3\31\0\21\3\1\u0422"+
    "\11\3\1\0\6\3\2\0\2\3\31\0\2\3\1\u0423"+
    "\30\3\1\0\6\3\2\0\2\3\31\0\14\3\1\u0424"+
    "\16\3\1\0\6\3\2\0\2\3\31\0\20\3\1\u0425"+
    "\12\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u0426"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\6\3\1\u0427"+
    "\24\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u0428"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\6\3\1\u0429"+
    "\24\3\1\0\6\3\2\0\2\3\31\0\6\3\1\u042a"+
    "\24\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u042b"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u042c"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\2\3\1\u042d"+
    "\30\3\1\0\6\3\2\0\2\3\31\0\1\u042e\32\3"+
    "\1\0\6\3\2\0\2\3\31\0\5\3\1\u042f\25\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u0430\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\7\3\1\u0431\23\3"+
    "\1\0\6\3\2\0\2\3\31\0\16\3\1\u0432\14\3"+
    "\1\0\6\3\2\0\2\3\31\0\16\3\1\u0433\14\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\u0434\32\3\1\0"+
    "\6\3\2\0\2\3\31\0\5\3\1\u0435\25\3\1\0"+
    "\6\3\2\0\2\3\31\0\6\3\1\u0436\24\3\1\0"+
    "\6\3\2\0\2\3\31\0\4\3\1\u0437\26\3\1\0"+
    "\6\3\2\0\2\3\31\0\6\3\1\u0438\24\3\1\0"+
    "\6\3\2\0\2\3\31\0\16\3\1\u0439\14\3\1\0"+
    "\6\3\2\0\2\3\31\0\4\3\1\u043a\26\3\1\0"+
    "\6\3\2\0\2\3\31\0\26\3\1\u043b\4\3\1\0"+
    "\6\3\2\0\2\3\31\0\16\3\1\u043c\14\3\1\0"+
    "\6\3\2\0\2\3\31\0\30\3\1\u043d\2\3\1\0"+
    "\6\3\2\0\2\3\31\0\6\3\1\u043e\24\3\1\0"+
    "\6\3\2\0\2\3\31\0\20\3\1\u043f\12\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u0440\30\3\1\0"+
    "\6\3\2\0\2\3\31\0\4\3\1\u0441\26\3\1\0"+
    "\6\3\2\0\2\3\31\0\6\3\1\u0442\24\3\1\0"+
    "\6\3\2\0\2\3\31\0\17\3\1\u0443\13\3\1\0"+
    "\6\3\2\0\2\3\31\0\7\3\1\u0444\23\3\1\0"+
    "\6\3\2\0\2\3\31\0\4\3\1\u0445\26\3\1\0"+
    "\6\3\2\0\2\3\31\0\7\3\1\u0446\23\3\1\0"+
    "\6\3\2\0\2\3\31\0\26\3\1\u0447\4\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u0448\30\3\1\0"+
    "\6\3\2\0\2\3\31\0\13\3\1\u0449\17\3\1\0"+
    "\6\3\2\0\2\3\31\0\5\3\1\u044a\25\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u044b\30\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u044c\30\3\1\0"+
    "\6\3\2\0\2\3\31\0\33\3\1\u044d\6\3\2\0"+
    "\2\3\31\0\5\3\1\u044e\25\3\1\0\6\3\2\0"+
    "\2\3\31\0\22\3\1\u044f\10\3\1\0\6\3\1\0"+
    "\3\66\1\0\1\66\1\u0450\71\66\1\0\2\3\31\0"+
    "\2\3\1\u0451\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\23\3\1\u0452\7\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u0453\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\20\3\1\u0454\12\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u0455\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\u0456\32\3\1\0\6\3\2\0\2\3\31\0\15\3"+
    "\1\u0457\15\3\1\0\6\3\2\0\2\3\31\0\1\3"+
    "\1\u0458\31\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u0459\26\3\1\0\6\3\2\0\2\3\31\0\2\3"+
    "\1\u045a\30\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u045b\26\3\1\0\6\3\2\0\2\3\31\0\14\3"+
    "\1\u045c\16\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u045d\26\3\1\0\6\3\2\0\2\3\31\0\2\3"+
    "\1\u045e\30\3\1\0\6\3\2\0\2\3\31\0\7\3"+
    "\1\u045f\23\3\1\0\6\3\2\0\2\3\31\0\20\3"+
    "\1\u0460\12\3\1\0\6\3\46\0\1\u0461\32\0\2\3"+
    "\31\0\25\3\1\u0462\5\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u0463\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u0464\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u0465\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u0466\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\22\3\1\u0467\10\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u0468\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\27\3\1\u0469\3\3\1\0\6\3\2\0\2\3"+
    "\31\0\25\3\1\u046a\5\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u046b\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\20\3\1\u046c\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u046d\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u046e\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\11\3\1\u046f\21\3\1\0\6\3\2\0\2\3"+
    "\31\0\22\3\1\u0470\10\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u0471\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u0472\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\24\3\1\u0473\6\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u0474\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\11\3\1\u0475\21\3\1\0\6\3\2\0\2\3"+
    "\31\0\7\3\1\u0476\23\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u0477\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u0478\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u0479\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u047a\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u047b\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\3\1\u047c\31\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u047d\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u047e\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u047f\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u0480\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\30\3\1\u0481\2\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u0482\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\20\3\1\u0483\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\17\3\1\u0484\13\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u0485\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u0486\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u0487\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\20\3\1\u0488\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\24\3\1\u0489\6\3\1\0\6\3\2\0\2\3"+
    "\31\0\20\3\1\u048a\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u048b\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\22\3\1\u048c\10\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u048d\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u048e\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u048f\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\22\3\1\u0490\10\3\1\0\6\3\2\0\2\3"+
    "\31\0\21\3\1\u0491\11\3\1\0\6\3\2\0\2\3"+
    "\31\0\20\3\1\u0492\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\11\3\1\u0493\21\3\1\0\6\3\2\0\2\3"+
    "\31\0\7\3\1\u0494\23\3\1\0\6\3\2\0\2\3"+
    "\31\0\7\3\1\u0495\23\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u0496\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\20\3\1\u0497\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u0498\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\21\3\1\u0499\11\3\1\0\6\3\2\0\2\3"+
    "\31\0\30\3\1\u049a\2\3\1\0\6\3\2\0\2\3"+
    "\31\0\11\3\1\u049b\21\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u049c\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u049d\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u049e\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\14\3\1\u049f\16\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u04a0\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u04a1\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u04a2\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u04a3\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u04a4\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\u04a5\32\3\1\0\6\3\2\0\2\3\31\0"+
    "\17\3\1\u04a6\13\3\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\u04a7\25\3\1\0\6\3\2\0\2\3\31\0"+
    "\17\3\1\u04a8\13\3\1\0\6\3\2\0\2\3\31\0"+
    "\3\3\1\u04a9\27\3\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\u04aa\25\3\1\0\6\3\57\0\1\u04ab\21\0"+
    "\2\3\31\0\1\u04ac\32\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u04ad\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u04ae\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\7\3\1\u04af\23\3\1\0\6\3\2\0\2\3"+
    "\31\0\20\3\1\u04b0\12\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u04b1\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u04b2\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\11\3\1\u04b3\21\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u04b4\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\13\3\1\u04b5\17\3\1\0\6\3\2\0\2\3"+
    "\31\0\21\3\1\u04b6\11\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u04b7\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u04b8\13\3\1\u04b9\14\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u04ba\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\13\3\1\u04bb\17\3\1\0\6\3"+
    "\2\0\2\3\31\0\30\3\1\u04bc\2\3\1\0\6\3"+
    "\2\0\2\3\31\0\5\3\1\u04bd\25\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u04be\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\14\3\1\u04bf\16\3\1\0\6\3"+
    "\2\0\2\3\31\0\16\3\1\u04c0\14\3\1\0\6\3"+
    "\2\0\2\3\31\0\20\3\1\u04c1\12\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u04c2\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u04c3\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\20\3\1\u04c4\12\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\3\1\u04c5\31\3\1\0\6\3"+
    "\2\0\2\3\31\0\5\3\1\u04c6\25\3\1\0\6\3"+
    "\2\0\2\3\31\0\22\3\1\u04c7\10\3\1\0\6\3"+
    "\2\0\2\3\31\0\6\3\1\u04c8\24\3\1\0\6\3"+
    "\2\0\2\3\31\0\1\3\1\u04c9\2\3\1\u04ca\7\3"+
    "\1\u04cb\16\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u04cc\24\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u04cd\26\3\1\0\6\3\2\0\2\3\31\0\20\3"+
    "\1\u04ce\12\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u04cf\24\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u04d0\24\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u04d1\24\3\1\0\6\3\2\0\2\3\31\0\2\3"+
    "\1\u04d2\30\3\1\0\6\3\2\0\2\3\31\0\2\3"+
    "\1\u04d3\30\3\1\0\6\3\2\0\2\3\31\0\3\3"+
    "\1\u04d4\27\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u04d5\26\3\1\0\6\3\2\0\2\3\31\0\11\3"+
    "\1\u04d6\16\3\1\u04d7\2\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u04d8\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u04d9\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\21\3\1\u04da\11\3\1\0\6\3\2\0\2\3"+
    "\31\0\16\3\1\u04db\14\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u04dc\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u04dd\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\u04de\32\3\1\0\6\3\2\0\2\3\31\0"+
    "\14\3\1\u04df\16\3\1\0\6\3\2\0\2\3\31\0"+
    "\17\3\1\u04e0\4\3\1\u04e1\6\3\1\0\6\3\2\0"+
    "\2\3\31\0\11\3\1\u04e2\21\3\1\0\6\3\2\0"+
    "\2\3\31\0\22\3\1\u04e3\10\3\1\0\6\3\2\0"+
    "\2\3\31\0\17\3\1\u04e4\13\3\1\0\6\3\2\0"+
    "\2\3\31\0\6\3\1\u04e5\24\3\1\0\6\3\2\0"+
    "\2\3\31\0\6\3\1\u04e6\24\3\1\0\6\3\2\0"+
    "\2\3\31\0\17\3\1\u04e7\13\3\1\0\6\3\2\0"+
    "\2\3\31\0\2\3\1\u04e8\30\3\1\0\6\3\2\0"+
    "\2\3\31\0\21\3\1\u04e9\11\3\1\0\6\3\2\0"+
    "\2\3\31\0\4\3\1\u04ea\26\3\1\0\6\3\42\0"+
    "\1\u04eb\36\0\2\3\31\0\4\3\1\u04ec\26\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u04ed\30\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u04ee\30\3\1\0"+
    "\6\3\2\0\2\3\31\0\5\3\1\u04ef\25\3\1\0"+
    "\6\3\2\0\2\3\31\0\11\3\1\u04f0\21\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u04f1\30\3\1\0"+
    "\6\3\2\0\2\3\31\0\4\3\1\u04f2\26\3\1\0"+
    "\6\3\2\0\2\3\31\0\7\3\1\u04f3\23\3\1\0"+
    "\6\3\2\0\2\3\31\0\20\3\1\u04f4\12\3\1\0"+
    "\6\3\2\0\2\3\31\0\20\3\1\u04f5\12\3\1\0"+
    "\6\3\2\0\2\3\31\0\5\3\1\u04f6\25\3\1\0"+
    "\6\3\2\0\2\3\31\0\12\3\1\u04f7\12\3\1\u04f8"+
    "\5\3\1\0\6\3\2\0\2\3\31\0\17\3\1\u04f9"+
    "\13\3\1\0\6\3\2\0\2\3\31\0\5\3\1\u04fa"+
    "\25\3\1\0\6\3\2\0\2\3\31\0\20\3\1\u04fb"+
    "\12\3\1\0\6\3\2\0\2\3\31\0\7\3\1\u04fc"+
    "\23\3\1\0\6\3\2\0\2\3\31\0\5\3\1\u04fd"+
    "\25\3\1\0\6\3\2\0\2\3\31\0\1\u04fe\32\3"+
    "\1\0\6\3\2\0\2\3\31\0\5\3\1\u04ff\25\3"+
    "\1\0\6\3\2\0\2\3\31\0\30\3\1\u0500\2\3"+
    "\1\0\6\3\2\0\2\3\31\0\4\3\1\u0501\26\3"+
    "\1\0\6\3\2\0\2\3\31\0\4\3\1\u0502\26\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\u0503\32\3\1\0"+
    "\6\3\2\0\2\3\31\0\16\3\1\u0504\14\3\1\0"+
    "\6\3\2\0\2\3\31\0\17\3\1\u0505\13\3\1\0"+
    "\6\3\2\0\2\3\31\0\1\3\1\u0506\31\3\1\0"+
    "\6\3\2\0\2\3\31\0\1\u0507\32\3\1\0\6\3"+
    "\2\0\2\3\31\0\6\3\1\u0508\24\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u0509\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\17\3\1\u050a\13\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u050b\26\3\1\0\6\3"+
    "\2\0\2\3\31\0\12\3\1\u050c\20\3\1\0\6\3"+
    "\2\0\2\3\31\0\20\3\1\u050d\12\3\1\0\6\3"+
    "\2\0\2\3\31\0\16\3\1\u050e\14\3\1\0\6\3"+
    "\2\0\2\3\31\0\27\3\1\u050f\3\3\1\0\6\3"+
    "\2\0\2\3\31\0\14\3\1\u0510\16\3\1\0\6\3"+
    "\2\0\2\3\31\0\17\3\1\u0511\13\3\1\0\6\3"+
    "\2\0\2\3\31\0\16\3\1\u0512\14\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u0513\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\17\3\1\u0514\13\3\1\0\6\3"+
    "\2\0\2\3\31\0\2\3\1\u0515\30\3\1\0\6\3"+
    "\2\0\2\3\31\0\22\3\1\u0516\10\3\1\0\6\3"+
    "\2\0\2\3\31\0\22\3\1\u0517\10\3\1\0\6\3"+
    "\2\0\2\3\31\0\20\3\1\u0518\12\3\1\0\6\3"+
    "\2\0\2\3\31\0\4\3\1\u0519\26\3\1\0\6\3"+
    "\55\0\1\u051a\23\0\2\3\31\0\16\3\1\u051b\14\3"+
    "\1\0\6\3\2\0\2\3\31\0\17\3\1\u051c\13\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\3\1\u051d\31\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u051e\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\6\3\1\u051f\24\3"+
    "\1\0\6\3\2\0\2\3\31\0\6\3\1\u0520\24\3"+
    "\1\0\6\3\2\0\2\3\31\0\4\3\1\u0521\26\3"+
    "\1\0\6\3\2\0\2\3\31\0\20\3\1\u0522\12\3"+
    "\1\0\6\3\2\0\2\3\31\0\16\3\1\u0523\14\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u0524\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\6\3\1\u0525\24\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u0526\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\15\3\1\u0527\15\3"+
    "\1\0\6\3\2\0\2\3\31\0\7\3\1\u0528\23\3"+
    "\1\0\6\3\2\0\2\3\31\0\12\3\1\u0529\20\3"+
    "\1\0\6\3\2\0\2\3\31\0\4\3\1\u052a\26\3"+
    "\1\0\6\3\2\0\2\3\31\0\25\3\1\u052b\5\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u052c\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\16\3\1\u052d\14\3"+
    "\1\0\6\3\2\0\2\3\31\0\15\3\1\u052e\15\3"+
    "\1\0\6\3\2\0\2\3\31\0\17\3\1\u052f\13\3"+
    "\1\0\6\3\2\0\2\3\31\0\7\3\1\u0530\23\3"+
    "\1\0\6\3\2\0\2\3\31\0\6\3\1\u0531\24\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u0532\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\3\1\u0533\31\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u0534\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\25\3\1\u0535\5\3"+
    "\1\0\6\3\2\0\2\3\31\0\21\3\1\u0536\11\3"+
    "\1\0\6\3\2\0\2\3\31\0\5\3\1\u0537\25\3"+
    "\1\0\6\3\2\0\2\3\31\0\4\3\1\u0538\26\3"+
    "\1\0\6\3\2\0\2\3\31\0\14\3\1\u0539\16\3"+
    "\1\0\6\3\51\0\1\u053a\27\0\2\3\31\0\20\3"+
    "\1\u053b\12\3\1\0\6\3\2\0\2\3\31\0\14\3"+
    "\1\u053c\16\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u053d\24\3\1\0\6\3\2\0\2\3\31\0\1\3"+
    "\1\u053e\31\3\1\0\6\3\2\0\2\3\31\0\7\3"+
    "\1\u053f\23\3\1\0\6\3\2\0\2\3\31\0\2\3"+
    "\1\u0540\30\3\1\0\6\3\2\0\2\3\31\0\2\3"+
    "\1\u0541\30\3\1\0\6\3\2\0\2\3\31\0\2\3"+
    "\1\u0542\30\3\1\0\6\3\2\0\2\3\31\0\5\3"+
    "\1\u0543\25\3\1\0\6\3\2\0\2\3\31\0\6\3"+
    "\1\u0544\24\3\1\0\6\3\2\0\2\3\31\0\7\3"+
    "\1\u0545\23\3\1\0\6\3\2\0\2\3\31\0\17\3"+
    "\1\u0546\13\3\1\0\6\3\2\0\2\3\31\0\16\3"+
    "\1\u0547\14\3\1\0\6\3\2\0\2\3\31\0\5\3"+
    "\1\u0548\25\3\1\0\6\3\2\0\2\3\31\0\16\3"+
    "\1\u0549\14\3\1\0\6\3\2\0\2\3\31\0\13\3"+
    "\1\u054a\17\3\1\0\6\3\2\0\2\3\31\0\12\3"+
    "\1\u054b\20\3\1\0\6\3\2\0\2\3\31\0\5\3"+
    "\1\u054c\25\3\1\0\6\3\50\0\1\u054d\30\0\2\3"+
    "\31\0\6\3\1\u054e\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u054f\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\14\3\1\u0550\16\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u0551\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\6\3\1\u0552\24\3\1\0\6\3\2\0\2\3"+
    "\31\0\17\3\1\u0553\13\3\1\0\6\3\2\0\2\3"+
    "\31\0\22\3\1\u0554\10\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u0555\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\2\3\1\u0556\30\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u0557\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\7\3\1\u0558\23\3\1\0\6\3\2\0\2\3"+
    "\31\0\12\3\1\u0559\20\3\1\0\6\3\2\0\2\3"+
    "\31\0\11\3\1\u055a\21\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u055b\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\22\3\1\u055c\10\3\1\0\6\3\2\0\2\3"+
    "\31\0\4\3\1\u055d\26\3\1\0\6\3\2\0\2\3"+
    "\31\0\5\3\1\u055e\25\3\1\0\6\3\2\0\2\3"+
    "\31\0\1\u055f\32\3\1\0\6\3\2\0\2\3\31\0"+
    "\5\3\1\u0560\25\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u0561\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\2\3\1\u0562\30\3\1\0\6\3\2\0\2\3\31\0"+
    "\4\3\1\u0563\26\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\u0564\32\3\1\0\6\3\2\0\2\3\31\0\4\3"+
    "\1\u0565\26\3\1\0\6\3\2\0\2\3\31\0\5\3"+
    "\1\u0566\25\3\1\0\6\3\2\0\2\3\31\0\1\u0567"+
    "\32\3\1\0\6\3\2\0\2\3\31\0\12\3\1\u0568"+
    "\20\3\1\0\6\3\2\0\2\3\31\0\25\3\1\u0569"+
    "\5\3\1\0\6\3\2\0\2\3\31\0\16\3\1\u056a"+
    "\14\3\1\0\6\3\2\0\2\3\31\0\17\3\1\u056b"+
    "\13\3\1\0\6\3\2\0\2\3\31\0\13\3\1\u056c"+
    "\17\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u056d"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\2\3\1\u056e"+
    "\30\3\1\0\6\3\2\0\2\3\31\0\21\3\1\u056f"+
    "\11\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u0570"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\1\3\1\u0571"+
    "\2\3\1\u0572\26\3\1\0\6\3\2\0\2\3\31\0"+
    "\1\u0573\32\3\1\0\6\3\2\0\2\3\31\0\2\3"+
    "\1\u0574\30\3\1\0\6\3\2\0\2\3\31\0\1\u0575"+
    "\32\3\1\0\6\3\2\0\2\3\31\0\15\3\1\u0576"+
    "\15\3\1\0\6\3\2\0\2\3\31\0\4\3\1\u0577"+
    "\26\3\1\0\6\3\2\0\2\3\31\0\15\3\1\u0578"+
    "\15\3\1\0\6\3\2\0\2\3\31\0\7\3\1\u0579"+
    "\23\3\1\0\6\3\2\0\2\3\31\0\1\u057a\32\3"+
    "\1\0\6\3\2\0\2\3\31\0\7\3\1\u057b\23\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u057c\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\16\3\1\u057d\14\3"+
    "\1\0\6\3\2\0\2\3\31\0\2\3\1\u057e\30\3"+
    "\1\0\6\3\2\0\2\3\31\0\7\3\1\u057f\23\3"+
    "\1\0\6\3\2\0\2\3\31\0\17\3\1\u0580\13\3"+
    "\1\0\6\3\2\0\2\3\31\0\4\3\1\u0581\26\3"+
    "\1\0\6\3\2\0\2\3\31\0\1\u0582\32\3\1\0"+
    "\6\3\2\0\2\3\31\0\15\3\1\u0583\15\3\1\0"+
    "\6\3\2\0\2\3\31\0\7\3\1\u0584\23\3\1\0"+
    "\6\3\2\0\2\3\31\0\2\3\1\u0585\30\3\1\0"+
    "\6\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[70938];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\3\11\6\1\3\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\36\1\12\11\167\1\1\0"+
    "\2\1\1\0\306\1\1\0\2\1\1\0\42\1\1\0"+
    "\337\1\1\0\246\1\2\0\32\1\1\0\230\1\1\0"+
    "\145\1\1\0\2\1\1\11\20\1\1\11\111\1\1\0"+
    "\77\1\1\0\56\1\1\0\37\1\1\0\22\1\1\11"+
    "\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1413];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  public String foundLine;
  public int line;
  public int columnSt;
  public int columnNd;  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ERROR;
            } 
            // fall through
          case 348: break;
          case 2: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength()-1; return IDENTIFICADOR;
            } 
            // fall through
          case 349: break;
          case 3: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength()-1; return CONSTANTE_ENTERA;
            } 
            // fall through
          case 350: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 351: break;
          case 5: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RESTA;
            } 
            // fall through
          case 352: break;
          case 6: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DIVISION;
            } 
            // fall through
          case 353: break;
          case 7: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MULTIPLICACION;
            } 
            // fall through
          case 354: break;
          case 8: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SUMA;
            } 
            // fall through
          case 355: break;
          case 9: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MOD;
            } 
            // fall through
          case 356: break;
          case 10: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MENOR;
            } 
            // fall through
          case 357: break;
          case 11: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ASIGNACION;
            } 
            // fall through
          case 358: break;
          case 12: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MAYOR;
            } 
            // fall through
          case 359: break;
          case 13: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXCLAMACION;
            } 
            // fall through
          case 360: break;
          case 14: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PUNTO_COMA;
            } 
            // fall through
          case 361: break;
          case 15: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COMA;
            } 
            // fall through
          case 362: break;
          case 16: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PUNTO;
            } 
            // fall through
          case 363: break;
          case 17: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CORCHETEA;
            } 
            // fall through
          case 364: break;
          case 18: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CORCHETEC;
            } 
            // fall through
          case 365: break;
          case 19: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PARENTESISA;
            } 
            // fall through
          case 366: break;
          case 20: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PARENTESISC;
            } 
            // fall through
          case 367: break;
          case 21: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LLAVEA;
            } 
            // fall through
          case 368: break;
          case 22: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LLAVEC;
            } 
            // fall through
          case 369: break;
          case 23: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ARROBA;
            } 
            // fall through
          case 370: break;
          case 24: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NUMERAL;
            } 
            // fall through
          case 371: break;
          case 25: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONSTANTE_DECIMAL;
            } 
            // fall through
          case 372: break;
          case 26: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MENOR_IGUAL;
            } 
            // fall through
          case 373: break;
          case 27: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IGUALACION;
            } 
            // fall through
          case 374: break;
          case 28: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MAYOR_IGUAL;
            } 
            // fall through
          case 375: break;
          case 29: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DIFERENCIA;
            } 
            // fall through
          case 376: break;
          case 30: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return AND;
            } 
            // fall through
          case 377: break;
          case 31: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OR;
            } 
            // fall through
          case 378: break;
          case 32: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CORCHETES;
            } 
            // fall through
          case 379: break;
          case 33: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PARENTESIS;
            } 
            // fall through
          case 380: break;
          case 34: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LLAVES;
            } 
            // fall through
          case 381: break;
          case 35: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NUMERALES;
            } 
            // fall through
          case 382: break;
          case 36: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return AT;
            } 
            // fall through
          case 383: break;
          case 37: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return AS;
            } 
            // fall through
          case 384: break;
          case 38: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TO;
            } 
            // fall through
          case 385: break;
          case 39: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NO;
            } 
            // fall through
          case 386: break;
          case 40: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BY;
            } 
            // fall through
          case 387: break;
          case 41: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IN;
            } 
            // fall through
          case 388: break;
          case 42: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IF;
            } 
            // fall through
          case 389: break;
          case 43: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IS;
            } 
            // fall through
          case 390: break;
          case 44: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ON;
            } 
            // fall through
          case 391: break;
          case 45: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OF;
            } 
            // fall through
          case 392: break;
          case 46: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return GO;
            } 
            // fall through
          case 393: break;
          case 47: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ADA;
            } 
            // fall through
          case 394: break;
          case 48: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ADD;
            } 
            // fall through
          case 395: break;
          case 49: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ARE;
            } 
            // fall through
          case 396: break;
          case 50: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ANY;
            } 
            // fall through
          case 397: break;
          case 51: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ALL;
            } 
            // fall through
          case 398: break;
          case 52: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ASC;
            } 
            // fall through
          case 399: break;
          case 53: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return AVG;
            } 
            // fall through
          case 400: break;
          case 54: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DAY;
            } 
            // fall through
          case 401: break;
          case 55: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DEC;
            } 
            // fall through
          case 402: break;
          case 56: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return END;
            } 
            // fall through
          case 403: break;
          case 57: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TOP;
            } 
            // fall through
          case 404: break;
          case 58: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NOT;
            } 
            // fall through
          case 405: break;
          case 59: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FOR;
            } 
            // fall through
          case 406: break;
          case 60: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PAD;
            } 
            // fall through
          case 407: break;
          case 61: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return USE;
            } 
            // fall through
          case 408: break;
          case 62: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BIT;
            } 
            // fall through
          case 409: break;
          case 63: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INT;
            } 
            // fall through
          case 410: break;
          case 64: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SET;
            } 
            // fall through
          case 411: break;
          case 65: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SUM;
            } 
            // fall through
          case 412: break;
          case 66: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SQL;
            } 
            // fall through
          case 413: break;
          case 67: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OFF;
            } 
            // fall through
          case 414: break;
          case 68: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return GET;
            } 
            // fall through
          case 415: break;
          case 69: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return KEY;
            } 
            // fall through
          case 416: break;
          case 70: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MAX;
            } 
            // fall through
          case 417: break;
          case 71: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MIN;
            } 
            // fall through
          case 418: break;
          case 72: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DATE;
            } 
            // fall through
          case 419: break;
          case 73: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DENY;
            } 
            // fall through
          case 420: break;
          case 74: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DESC;
            } 
            // fall through
          case 421: break;
          case 75: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DROP;
            } 
            // fall through
          case 422: break;
          case 76: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DUMP;
            } 
            // fall through
          case 423: break;
          case 77: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DBCC;
            } 
            // fall through
          case 424: break;
          case 78: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DISK;
            } 
            // fall through
          case 425: break;
          case 79: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXEC;
            } 
            // fall through
          case 426: break;
          case 80: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXIT;
            } 
            // fall through
          case 427: break;
          case 81: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ELSE;
            } 
            // fall through
          case 428: break;
          case 82: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRAN;
            } 
            // fall through
          case 429: break;
          case 83: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRUE;
            } 
            // fall through
          case 430: break;
          case 84: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRIM;
            } 
            // fall through
          case 431: break;
          case 85: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return THEN;
            } 
            // fall through
          case 432: break;
          case 86: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TIME;
            } 
            // fall through
          case 433: break;
          case 87: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return READ;
            } 
            // fall through
          case 434: break;
          case 88: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return REAL;
            } 
            // fall through
          case 435: break;
          case 89: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RULE;
            } 
            // fall through
          case 436: break;
          case 90: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ROWS;
            } 
            // fall through
          case 437: break;
          case 91: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NEXT;
            } 
            // fall through
          case 438: break;
          case 92: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NULL;
            } 
            // fall through
          case 439: break;
          case 93: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NONE;
            } 
            // fall through
          case 440: break;
          case 94: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LAST;
            } 
            // fall through
          case 441: break;
          case 95: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LEFT;
            } 
            // fall through
          case 442: break;
          case 96: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LIKE;
            } 
            // fall through
          case 443: break;
          case 97: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LOAD;
            } 
            // fall through
          case 444: break;
          case 98: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FROM;
            } 
            // fall through
          case 445: break;
          case 99: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FULL;
            } 
            // fall through
          case 446: break;
          case 100: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FILE;
            } 
            // fall through
          case 447: break;
          case 101: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CASE;
            } 
            // fall through
          case 448: break;
          case 102: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CAST;
            } 
            // fall through
          case 449: break;
          case 103: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CHAR;
            } 
            // fall through
          case 450: break;
          case 104: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return HOUR;
            } 
            // fall through
          case 451: break;
          case 105: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PROC;
            } 
            // fall through
          case 452: break;
          case 106: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PLAN;
            } 
            // fall through
          case 453: break;
          case 107: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return USER;
            } 
            // fall through
          case 454: break;
          case 108: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BULK;
            } 
            // fall through
          case 455: break;
          case 109: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BOTH;
            } 
            // fall through
          case 456: break;
          case 110: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INTO;
            } 
            // fall through
          case 457: break;
          case 111: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SAVE;
            } 
            // fall through
          case 458: break;
          case 112: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SIZE;
            } 
            // fall through
          case 459: break;
          case 113: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SOME;
            } 
            // fall through
          case 460: break;
          case 114: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ONLY;
            } 
            // fall through
          case 461: break;
          case 115: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OPEN;
            } 
            // fall through
          case 462: break;
          case 116: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OVER;
            } 
            // fall through
          case 463: break;
          case 117: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return YEAR;
            } 
            // fall through
          case 464: break;
          case 118: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return GOTO;
            } 
            // fall through
          case 465: break;
          case 119: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ZONE;
            } 
            // fall through
          case 466: break;
          case 120: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return KILL;
            } 
            // fall through
          case 467: break;
          case 121: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WHEN;
            } 
            // fall through
          case 468: break;
          case 122: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WITH;
            } 
            // fall through
          case 469: break;
          case 123: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WORK;
            } 
            // fall through
          case 470: break;
          case 124: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return VIEW;
            } 
            // fall through
          case 471: break;
          case 125: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return JOIN;
            } 
            // fall through
          case 472: break;
          case 126: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ALTER;
            } 
            // fall through
          case 473: break;
          case 127: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TABLE;
            } 
            // fall through
          case 474: break;
          case 128: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RIGHT;
            } 
            // fall through
          case 475: break;
          case 129: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NAMES;
            } 
            // fall through
          case 476: break;
          case 130: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NCHAR;
            } 
            // fall through
          case 477: break;
          case 131: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LEVEL;
            } 
            // fall through
          case 478: break;
          case 132: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LOCAL;
            } 
            // fall through
          case 479: break;
          case 133: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LOWER;
            } 
            // fall through
          case 480: break;
          case 134: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FALSE;
            } 
            // fall through
          case 481: break;
          case 135: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FETCH;
            } 
            // fall through
          case 482: break;
          case 136: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FLOAT;
            } 
            // fall through
          case 483: break;
          case 137: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FIRST;
            } 
            // fall through
          case 484: break;
          case 138: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FOUND;
            } 
            // fall through
          case 485: break;
          case 139: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CROSS;
            } 
            // fall through
          case 486: break;
          case 140: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CLOSE;
            } 
            // fall through
          case 487: break;
          case 141: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CHECK;
            } 
            // fall through
          case 488: break;
          case 142: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COUNT;
            } 
            // fall through
          case 489: break;
          case 143: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PRINT;
            } 
            // fall through
          case 490: break;
          case 144: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PRIOR;
            } 
            // fall through
          case 491: break;
          case 145: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PIVOT;
            } 
            // fall through
          case 492: break;
          case 146: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return UNION;
            } 
            // fall through
          case 493: break;
          case 147: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return UPPER;
            } 
            // fall through
          case 494: break;
          case 148: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return USAGE;
            } 
            // fall through
          case 495: break;
          case 149: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return USING;
            } 
            // fall through
          case 496: break;
          case 150: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BEGIN;
            } 
            // fall through
          case 497: break;
          case 151: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BREAK;
            } 
            // fall through
          case 498: break;
          case 152: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INDEX;
            } 
            // fall through
          case 499: break;
          case 153: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INNER;
            } 
            // fall through
          case 500: break;
          case 154: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INPUT;
            } 
            // fall through
          case 501: break;
          case 155: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SPACE;
            } 
            // fall through
          case 502: break;
          case 156: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SQLCA;
            } 
            // fall through
          case 503: break;
          case 157: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ORDER;
            } 
            // fall through
          case 504: break;
          case 158: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OUTER;
            } 
            // fall through
          case 505: break;
          case 159: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return GRANT;
            } 
            // fall through
          case 506: break;
          case 160: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return GROUP;
            } 
            // fall through
          case 507: break;
          case 161: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MATCH;
            } 
            // fall through
          case 508: break;
          case 162: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MERGE;
            } 
            // fall through
          case 509: break;
          case 163: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MONTH;
            } 
            // fall through
          case 510: break;
          case 164: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WRITE;
            } 
            // fall through
          case 511: break;
          case 165: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WHERE;
            } 
            // fall through
          case 512: break;
          case 166: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WHILE;
            } 
            // fall through
          case 513: break;
          case 167: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return VALUE;
            } 
            // fall through
          case 514: break;
          case 168: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ARYING;
            } 
            // fall through
          case 515: break;
          case 169: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ACTION;
            } 
            // fall through
          case 516: break;
          case 170: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DELETE;
            } 
            // fall through
          case 517: break;
          case 171: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DOUBLE;
            } 
            // fall through
          case 518: break;
          case 172: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DOMAIN;
            } 
            // fall through
          case 519: break;
          case 173: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXCEPT;
            } 
            // fall through
          case 520: break;
          case 174: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXISTS;
            } 
            // fall through
          case 521: break;
          case 175: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ERRLVL;
            } 
            // fall through
          case 522: break;
          case 176: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ESCAPE;
            } 
            // fall through
          case 523: break;
          case 177: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RETURN;
            } 
            // fall through
          case 524: break;
          case 178: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return REVERT;
            } 
            // fall through
          case 525: break;
          case 179: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return REVOKE;
            } 
            // fall through
          case 526: break;
          case 180: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NULLIF;
            } 
            // fall through
          case 527: break;
          case 181: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LINENO;
            } 
            // fall through
          case 528: break;
          case 182: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CREATE;
            } 
            // fall through
          case 529: break;
          case 183: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CURSOR;
            } 
            // fall through
          case 530: break;
          case 184: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COLUMN;
            } 
            // fall through
          case 531: break;
          case 185: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COMMIT;
            } 
            // fall through
          case 532: break;
          case 186: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return HAVING;
            } 
            // fall through
          case 533: break;
          case 187: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PASCAL;
            } 
            // fall through
          case 534: break;
          case 188: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PUBLIC;
            } 
            // fall through
          case 535: break;
          case 189: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return UNIQUE;
            } 
            // fall through
          case 536: break;
          case 190: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return UPDATE;
            } 
            // fall through
          case 537: break;
          case 191: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BACKUP;
            } 
            // fall through
          case 538: break;
          case 192: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BROWSE;
            } 
            // fall through
          case 539: break;
          case 193: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INSERT;
            } 
            // fall through
          case 540: break;
          case 194: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SELECT;
            } 
            // fall through
          case 541: break;
          case 195: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SECOND;
            } 
            // fall through
          case 542: break;
          case 196: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SCROLL;
            } 
            // fall through
          case 543: break;
          case 197: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SCHEMA;
            } 
            // fall through
          case 544: break;
          case 198: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OPTION;
            } 
            // fall through
          case 545: break;
          case 199: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OUTPUT;
            } 
            // fall through
          case 546: break;
          case 200: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return GLOBAL;
            } 
            // fall through
          case 547: break;
          case 201: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MINUTE;
            } 
            // fall through
          case 548: break;
          case 202: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MODULE;
            } 
            // fall through
          case 549: break;
          case 203: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return VALUES;
            } 
            // fall through
          case 550: break;
          case 204: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DEFAULT;
            } 
            // fall through
          case 551: break;
          case 205: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DECLARE;
            } 
            // fall through
          case 552: break;
          case 206: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DECIMAL;
            } 
            // fall through
          case 553: break;
          case 207: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXECUTE;
            } 
            // fall through
          case 554: break;
          case 208: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXTRACT;
            } 
            // fall through
          case 555: break;
          case 209: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRIGGER;
            } 
            // fall through
          case 556: break;
          case 210: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TSEQUAL;
            } 
            // fall through
          case 557: break;
          case 211: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RESTORE;
            } 
            // fall through
          case 558: break;
          case 212: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NATURAL;
            } 
            // fall through
          case 559: break;
          case 213: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NUMERIC;
            } 
            // fall through
          case 560: break;
          case 214: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NOCHECK;
            } 
            // fall through
          case 561: break;
          case 215: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LEADING;
            } 
            // fall through
          case 562: break;
          case 216: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FOREIGN;
            } 
            // fall through
          case 563: break;
          case 217: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FORTRAN;
            } 
            // fall through
          case 564: break;
          case 218: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CATALOG;
            } 
            // fall through
          case 565: break;
          case 219: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CASCADE;
            } 
            // fall through
          case 566: break;
          case 220: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CURRENT;
            } 
            // fall through
          case 567: break;
          case 221: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONNECT;
            } 
            // fall through
          case 568: break;
          case 222: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONVERT;
            } 
            // fall through
          case 569: break;
          case 223: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COLLATE;
            } 
            // fall through
          case 570: break;
          case 224: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COMPUTE;
            } 
            // fall through
          case 571: break;
          case 225: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PARTIAL;
            } 
            // fall through
          case 572: break;
          case 226: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PERCENT;
            } 
            // fall through
          case 573: break;
          case 227: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PREPARE;
            } 
            // fall through
          case 574: break;
          case 228: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PRIMARY;
            } 
            // fall through
          case 575: break;
          case 229: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return UNPIVOT;
            } 
            // fall through
          case 576: break;
          case 230: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return UNKNOWN;
            } 
            // fall through
          case 577: break;
          case 231: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BETWEEN;
            } 
            // fall through
          case 578: break;
          case 232: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INTEGER;
            } 
            // fall through
          case 579: break;
          case 233: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INCLUDE;
            } 
            // fall through
          case 580: break;
          case 234: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SETUSER;
            } 
            // fall through
          case 581: break;
          case 235: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SECTION;
            } 
            // fall through
          case 582: break;
          case 236: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SESSION;
            } 
            // fall through
          case 583: break;
          case 237: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SQLCODE;
            } 
            // fall through
          case 584: break;
          case 238: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OFFSETS;
            } 
            // fall through
          case 585: break;
          case 239: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OPENXML;
            } 
            // fall through
          case 586: break;
          case 240: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WAITFOR;
            } 
            // fall through
          case 587: break;
          case 241: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return VARCHAR;
            } 
            // fall through
          case 588: break;
          case 242: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return VARYING;
            } 
            // fall through
          case 589: break;
          case 243: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength()-1; return CADENA;
            } 
            // fall through
          case 590: break;
          case 244: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ALLOCATE;
            } 
            // fall through
          case 591: break;
          case 245: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ABSOLUTE;
            } 
            // fall through
          case 592: break;
          case 246: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DATABASE;
            } 
            // fall through
          case 593: break;
          case 247: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DEFERRED;
            } 
            // fall through
          case 594: break;
          case 248: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DESCRIBE;
            } 
            // fall through
          case 595: break;
          case 249: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DISTINCT;
            } 
            // fall through
          case 596: break;
          case 250: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXTERNAL;
            } 
            // fall through
          case 597: break;
          case 251: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return END_EXEC;
            } 
            // fall through
          case 598: break;
          case 252: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TEXTSIZE;
            } 
            // fall through
          case 599: break;
          case 253: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRAILING;
            } 
            // fall through
          case 600: break;
          case 254: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRUNCATE;
            } 
            // fall through
          case 601: break;
          case 255: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return READTEXT;
            } 
            // fall through
          case 602: break;
          case 256: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RELATIVE;
            } 
            // fall through
          case 603: break;
          case 257: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RESTRICT;
            } 
            // fall through
          case 604: break;
          case 258: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ROLLBACK;
            } 
            // fall through
          case 605: break;
          case 259: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ROWCOUNT;
            } 
            // fall through
          case 606: break;
          case 260: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NATIONAL;
            } 
            // fall through
          case 607: break;
          case 261: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LANGUAGE;
            } 
            // fall through
          case 608: break;
          case 262: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FREETEXT;
            } 
            // fall through
          case 609: break;
          case 263: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FUNCTION;
            } 
            // fall through
          case 610: break;
          case 264: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CASCADED;
            } 
            // fall through
          case 611: break;
          case 265: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COALESCE;
            } 
            // fall through
          case 612: break;
          case 266: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONTAINS;
            } 
            // fall through
          case 613: break;
          case 267: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONTINUE;
            } 
            // fall through
          case 614: break;
          case 268: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return HOLDLOCK;
            } 
            // fall through
          case 615: break;
          case 269: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PRESERVE;
            } 
            // fall through
          case 616: break;
          case 270: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return POSITION;
            } 
            // fall through
          case 617: break;
          case 271: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IDENTITY;
            } 
            // fall through
          case 618: break;
          case 272: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INTERVAL;
            } 
            // fall through
          case 619: break;
          case 273: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SHUTDOWN;
            } 
            // fall through
          case 620: break;
          case 274: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SMALLINT;
            } 
            // fall through
          case 621: break;
          case 275: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SQLERROR;
            } 
            // fall through
          case 622: break;
          case 276: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SQLSTATE;
            } 
            // fall through
          case 623: break;
          case 277: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OVERLAPS;
            } 
            // fall through
          case 624: break;
          case 278: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WHENEVER;
            } 
            // fall through
          case 625: break;
          case 279: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ASSERTION;
            } 
            // fall through
          case 626: break;
          case 280: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXCEPTION;
            } 
            // fall through
          case 627: break;
          case 281: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TEMPORARY;
            } 
            // fall through
          case 628: break;
          case 282: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRANSLATE;
            } 
            // fall through
          case 629: break;
          case 283: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TIMESTAMP;
            } 
            // fall through
          case 630: break;
          case 284: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RAISERROR;
            } 
            // fall through
          case 631: break;
          case 285: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CLUSTERED;
            } 
            // fall through
          case 632: break;
          case 286: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CHARACTER;
            } 
            // fall through
          case 633: break;
          case 287: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COLLATION;
            } 
            // fall through
          case 634: break;
          case 288: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PRECISION;
            } 
            // fall through
          case 635: break;
          case 289: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PROCEDURE;
            } 
            // fall through
          case 636: break;
          case 290: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INDICATOR;
            } 
            // fall through
          case 637: break;
          case 291: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INTERSECT;
            } 
            // fall through
          case 638: break;
          case 292: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INITIALLY;
            } 
            // fall through
          case 639: break;
          case 293: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ISOLATION;
            } 
            // fall through
          case 640: break;
          case 294: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IMMEDIATE;
            } 
            // fall through
          case 641: break;
          case 295: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SUBSTRING;
            } 
            // fall through
          case 642: break;
          case 296: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OPENQUERY;
            } 
            // fall through
          case 643: break;
          case 297: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WRITETEXT;
            } 
            // fall through
          case 644: break;
          case 298: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DEALLOCATE;
            } 
            // fall through
          case 645: break;
          case 299: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DEFERRABLE;
            } 
            // fall through
          case 646: break;
          case 300: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DESCRIPTOR;
            } 
            // fall through
          case 647: break;
          case 301: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DISCONNECT;
            } 
            // fall through
          case 648: break;
          case 302: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return REFERENCES;
            } 
            // fall through
          case 649: break;
          case 303: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ROWGUIDCOL;
            } 
            // fall through
          case 650: break;
          case 304: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FILLFACTOR;
            } 
            // fall through
          case 651: break;
          case 305: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CHECKPOINT;
            } 
            // fall through
          case 652: break;
          case 306: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONNECTION;
            } 
            // fall through
          case 653: break;
          case 307: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONSTRAINT;
            } 
            // fall through
          case 654: break;
          case 308: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PRIVILEGES;
            } 
            // fall through
          case 655: break;
          case 309: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return UPDATETEXT;
            } 
            // fall through
          case 656: break;
          case 310: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BIT_LENGTH;
            } 
            // fall through
          case 657: break;
          case 311: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return STATISTICS;
            } 
            // fall through
          case 658: break;
          case 312: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SQLWARNING;
            } 
            // fall through
          case 659: break;
          case 313: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OPENROWSET;
            } 
            // fall through
          case 660: break;
          case 314: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DIAGNOSTICS;
            } 
            // fall through
          case 661: break;
          case 315: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DISTRIBUTED;
            } 
            // fall through
          case 662: break;
          case 316: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TABLESAMPLE;
            } 
            // fall through
          case 663: break;
          case 317: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRANSACTION;
            } 
            // fall through
          case 664: break;
          case 318: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRANSLATION;
            } 
            // fall through
          case 665: break;
          case 319: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRY_CONVERT;
            } 
            // fall through
          case 666: break;
          case 320: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RECONFIGURE;
            } 
            // fall through
          case 667: break;
          case 321: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return REPLICATION;
            } 
            // fall through
          case 668: break;
          case 322: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CHAR_LENGTH;
            } 
            // fall through
          case 669: break;
          case 323: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONSTRAINTS;
            } 
            // fall through
          case 670: break;
          case 324: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IDENTITYCOL;
            } 
            // fall through
          case 671: break;
          case 325: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INSENSITIVE;
            } 
            // fall through
          case 672: break;
          case 326: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SYSTEM_USER;
            } 
            // fall through
          case 673: break;
          case 327: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NONCLUSTERED;
            } 
            // fall through
          case 674: break;
          case 328: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CURRENT_DATE;
            } 
            // fall through
          case 675: break;
          case 329: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CURRENT_TIME;
            } 
            // fall through
          case 676: break;
          case 330: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CURRENT_USER;
            } 
            // fall through
          case 677: break;
          case 331: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SESSION_USER;
            } 
            // fall through
          case 678: break;
          case 332: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OCTET_LENGTH;
            } 
            // fall through
          case 679: break;
          case 333: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WITHIN_GROUP;
            } 
            // fall through
          case 680: break;
          case 334: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return AUTHORIZATION;
            } 
            // fall through
          case 681: break;
          case 335: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TIMEZONE_HOUR;
            } 
            // fall through
          case 682: break;
          case 336: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FREETEXTTABLE;
            } 
            // fall through
          case 683: break;
          case 337: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CORRESPONDING;
            } 
            // fall through
          case 684: break;
          case 338: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONTAINSTABLE;
            } 
            // fall through
          case 685: break;
          case 339: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SECURITYAUDIT;
            } 
            // fall through
          case 686: break;
          case 340: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OPENDATASOURCE;
            } 
            // fall through
          case 687: break;
          case 341: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TIMEZONE_MINUTE;
            } 
            // fall through
          case 688: break;
          case 342: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IDENTITY_INSERT;
            } 
            // fall through
          case 689: break;
          case 343: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CHARACTER_LENGTH;
            } 
            // fall through
          case 690: break;
          case 344: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CURRENT_TIMESTAMP;
            } 
            // fall through
          case 691: break;
          case 345: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SEMANTICKEYPHRASETABLE;
            } 
            // fall through
          case 692: break;
          case 346: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SEMANTICSIMILARITYTABLE;
            } 
            // fall through
          case 693: break;
          case 347: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SEMANTICSIMILARITYDETAILSTABLE;
            } 
            // fall through
          case 694: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
