/* The following code was generated by JFlex 1.7.0 */

package SINTAXIS;
import static SINTAXIS.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/PROYECTO_COMPILADORES/PROYECTO/src/SINTAXIS/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\1\72\1\72\1\3\22\0\1\67\1\16\1\0"+
    "\1\33\1\0\1\12\1\17\1\5\1\26\1\27\1\10\1\11\1\22"+
    "\1\6\1\23\1\7\2\70\10\2\1\0\1\21\1\13\1\14\1\15"+
    "\1\0\1\32\1\34\1\51\1\45\1\35\1\36\1\44\1\56\1\46"+
    "\1\52\1\65\1\60\1\43\1\61\1\42\1\54\1\47\1\66\1\41"+
    "\1\53\1\40\1\50\1\63\1\62\1\37\1\55\1\57\1\24\1\0"+
    "\1\25\1\0\1\64\1\0\4\1\1\71\25\1\1\30\1\20\1\31"+
    "\7\0\1\72\u1fa2\0\1\72\1\72\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\1"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\30\2\1\16\1\32\1\33"+
    "\1\4\1\1\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\2\1\46\6\2\1\47"+
    "\23\2\1\50\11\2\1\51\43\2\1\52\1\2\1\53"+
    "\1\54\1\55\15\2\1\41\1\56\1\57\10\2\1\60"+
    "\17\2\1\0\1\4\1\0\1\1\1\61\1\62\1\63"+
    "\1\2\1\40\1\64\1\2\1\65\3\2\1\66\1\2"+
    "\1\67\1\2\1\70\4\2\1\71\15\2\1\72\14\2"+
    "\1\73\23\2\1\74\25\2\1\75\23\2\1\76\20\2"+
    "\1\77\7\2\1\100\3\2\1\101\10\2\1\102\12\2"+
    "\1\103\4\2\1\104\2\2\1\105\6\2\1\106\5\2"+
    "\1\107\1\2\1\110\2\2\1\111\14\2\1\0\1\4"+
    "\1\0\1\4\10\2\1\112\1\2\1\113\5\2\1\114"+
    "\1\115\1\116\1\117\3\2\1\120\2\2\1\121\3\2"+
    "\1\122\2\2\1\0\1\123\4\2\1\124\1\2\1\125"+
    "\2\2\1\126\1\2\1\127\1\130\2\2\1\131\1\132"+
    "\10\2\1\133\3\2\1\134\4\2\1\135\1\2\1\136"+
    "\1\2\1\137\3\2\1\140\1\2\1\141\2\2\1\142"+
    "\1\143\5\2\1\144\2\2\1\145\1\2\1\146\5\2"+
    "\1\147\1\150\5\2\1\151\20\2\1\152\12\2\1\153"+
    "\1\154\12\2\1\155\6\2\1\156\1\2\1\157\4\2"+
    "\1\160\7\2\1\161\15\2\1\162\1\163\7\2\1\164"+
    "\2\2\1\165\3\2\1\166\1\167\3\2\1\170\1\171"+
    "\1\172\10\2\1\173\1\2\1\174\1\175\3\2\1\176"+
    "\1\177\3\4\3\1\1\2\1\200\31\2\1\0\1\2"+
    "\1\201\25\2\1\202\5\2\1\203\1\204\6\2\1\205"+
    "\1\2\1\206\1\207\1\210\1\211\1\2\1\212\1\2"+
    "\1\213\3\2\1\214\3\2\1\215\1\2\1\216\2\2"+
    "\1\217\13\2\1\220\12\2\1\221\1\222\4\2\1\223"+
    "\2\2\1\224\3\2\1\225\1\226\1\227\2\2\1\230"+
    "\1\231\3\2\1\232\3\2\1\233\1\2\1\234\20\2"+
    "\1\235\4\2\1\236\3\2\1\237\7\2\1\240\2\2"+
    "\1\241\1\242\1\2\1\243\1\244\2\2\1\245\1\2"+
    "\1\246\1\247\1\2\1\250\3\2\1\251\2\0\1\252"+
    "\1\2\1\253\5\2\1\254\11\2\1\255\1\256\3\2"+
    "\1\257\1\260\1\261\1\0\1\262\16\2\1\263\6\2"+
    "\1\264\1\265\5\2\1\266\5\2\1\267\7\2\1\270"+
    "\5\2\1\271\10\2\1\272\1\2\1\273\1\274\2\2"+
    "\1\275\7\2\1\276\2\2\1\277\1\2\1\300\1\301"+
    "\1\2\1\302\10\2\1\303\4\2\1\304\2\2\1\305"+
    "\3\2\1\306\1\307\16\2\1\310\1\311\1\2\1\312"+
    "\1\313\1\314\6\2\1\315\6\2\1\316\2\2\1\317"+
    "\1\320\6\2\1\321\1\2\1\322\1\2\1\0\7\2"+
    "\1\323\3\2\1\324\7\2\1\325\3\2\1\326\1\2"+
    "\1\327\1\2\1\330\1\2\1\331\3\2\1\332\1\333"+
    "\1\334\1\335\4\2\1\336\4\2\1\337\1\2\1\340"+
    "\1\341\1\2\1\342\1\2\1\343\1\344\1\2\1\345"+
    "\1\2\1\346\3\2\1\347\1\350\1\2\1\351\5\2"+
    "\1\352\1\353\4\2\1\354\1\355\1\2\1\356\7\2"+
    "\1\357\2\2\1\360\2\2\1\361\3\2\1\362\2\2"+
    "\1\0\1\363\1\364\1\365\1\2\1\366\1\2\1\367"+
    "\2\2\1\370\1\2\1\371\2\2\1\372\1\2\1\373"+
    "\1\2\1\374\1\2\1\375\3\2\1\376\1\377\4\2"+
    "\1\u0100\1\u0101\3\2\1\u0102\1\u0103\1\u0104\1\2\1\u0105"+
    "\1\2\1\u0106\1\u0107\1\u0108\1\2\1\u0109\5\2\1\u010a"+
    "\1\2\1\u010b\1\u010c\3\2\1\u010d\1\2\1\u010e\2\2"+
    "\1\u010f\2\2\1\u0110\2\2\1\u0111\10\2\1\u0112\2\2"+
    "\1\u0113\1\u0114\1\u0115\5\2\1\u0116\1\2\1\u0117\1\0"+
    "\1\2\1\u0118\6\2\1\u0119\1\2\1\u011a\1\2\1\u011b"+
    "\2\2\1\u011c\1\2\1\u011d\7\2\1\u011e\1\u011f\11\2"+
    "\1\u0120\1\u0121\1\2\1\u0122\4\2\1\u0123\1\u0124\1\u0125"+
    "\1\2\1\u0126\1\u0127\5\2\1\u0128\5\2\1\u0129\1\u012a"+
    "\1\0\1\2\1\u012b\1\u012c\1\u012d\2\2\1\u012e\6\2"+
    "\1\u012f\2\2\1\u0130\2\2\1\u0131\2\2\1\u0132\5\2"+
    "\1\u0133\1\u0134\1\u0135\1\u0136\1\u0137\7\2\1\u0138\1\2"+
    "\1\u0139\2\2\1\u013a\1\0\1\2\1\u013b\1\u013c\1\u013d"+
    "\1\u013e\1\u013f\1\u0140\2\2\1\u0141\1\u0142\3\2\1\u0143"+
    "\5\2\1\u0144\1\u0145\1\2\1\u0146\4\2\1\u0147\2\2"+
    "\1\0\3\2\1\u0148\2\2\1\u0149\1\u014a\1\u014b\4\2"+
    "\1\u014c\2\2\1\u014d\1\2\1\u014e\1\u014f\1\u0150\1\2"+
    "\1\u0151\2\2\1\u0152\1\u0153\1\2\1\u0154\11\2\1\u0155"+
    "\1\u0156\2\2\1\u0157\2\2\1\u0158\3\2\1\u0159\17\2"+
    "\1\u015a\1\2\1\u015b\6\2\1\u015c";

  private static int [] zzUnpackAction() {
    int [] result = new int[1408];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\73\0\73\0\73\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4"+
    "\0\u02ff\0\73\0\73\0\73\0\u033a\0\73\0\u0375\0\73"+
    "\0\u03b0\0\73\0\73\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887"+
    "\0\u08c2\0\u08fd\0\u0938\0\u0973\0\261\0\u09ae\0\73\0\u09e9"+
    "\0\u0a24\0\73\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\u0a5f\0\166\0\u0a9a\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620"+
    "\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8"+
    "\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0"+
    "\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\166\0\u1b32\0\u1b6d"+
    "\0\166\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a"+
    "\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2"+
    "\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba"+
    "\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292"+
    "\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a"+
    "\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\166\0\166"+
    "\0\166\0\u2607\0\166\0\166\0\u2642\0\u267d\0\u26b8\0\u26f3"+
    "\0\u272e\0\166\0\u2769\0\166\0\u27a4\0\166\0\u27df\0\u281a"+
    "\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2"+
    "\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca"+
    "\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2"+
    "\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\166\0\u2f04\0\u2f3f"+
    "\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117"+
    "\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef"+
    "\0\u332a\0\166\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c"+
    "\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664"+
    "\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c"+
    "\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14"+
    "\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec"+
    "\0\u3c27\0\u3c62\0\u3c9d\0\166\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89"+
    "\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61"+
    "\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139"+
    "\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311"+
    "\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9"+
    "\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1"+
    "\0\u46fc\0\u4737\0\u4772\0\u47ad\0\166\0\u47e8\0\u4823\0\u485e"+
    "\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36"+
    "\0\u4a71\0\u4aac\0\u4ae7\0\166\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3"+
    "\0\u4c0e\0\166\0\u4c49\0\166\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35"+
    "\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d"+
    "\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9\0\u5034\0\u506f\0\u50aa\0\u50e5"+
    "\0\u5120\0\u515b\0\u5196\0\u51d1\0\u520c\0\u5247\0\u5282\0\166"+
    "\0\u52bd\0\166\0\u52f8\0\u5333\0\u536e\0\u53a9\0\u53e4\0\u541f"+
    "\0\166\0\166\0\166\0\u545a\0\u5495\0\u54d0\0\166\0\u550b"+
    "\0\u5546\0\u5581\0\u55bc\0\u55f7\0\u5632\0\166\0\u566d\0\u56a8"+
    "\0\u56e3\0\166\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a\0\u5845"+
    "\0\166\0\u5880\0\u58bb\0\166\0\u58f6\0\166\0\u5931\0\u596c"+
    "\0\u59a7\0\u59e2\0\166\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\u5b09"+
    "\0\u5b44\0\u5b7f\0\u5bba\0\166\0\u5bf5\0\u5c30\0\u5c6b\0\166"+
    "\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\166\0\u5d92\0\u5dcd\0\u5e08"+
    "\0\166\0\u5e43\0\u5e7e\0\u5eb9\0\166\0\u5ef4\0\166\0\u5f2f"+
    "\0\u5f6a\0\166\0\166\0\u5fa5\0\u5fe0\0\u601b\0\u6056\0\u6091"+
    "\0\166\0\u60cc\0\u6107\0\166\0\u6142\0\166\0\u617d\0\u61b8"+
    "\0\u61f3\0\u622e\0\u6269\0\166\0\166\0\u62a4\0\u62df\0\u631a"+
    "\0\u6355\0\u6390\0\u63cb\0\u6406\0\u6441\0\u647c\0\u64b7\0\u64f2"+
    "\0\u652d\0\u6568\0\u65a3\0\u65de\0\u6619\0\u6654\0\u668f\0\u66ca"+
    "\0\u6705\0\u6740\0\u677b\0\166\0\u67b6\0\u67f1\0\u682c\0\u6867"+
    "\0\u68a2\0\u68dd\0\u6918\0\u6953\0\u698e\0\u69c9\0\u6a04\0\166"+
    "\0\u6a3f\0\u6a7a\0\u6ab5\0\u6af0\0\u6b2b\0\u6b66\0\u6ba1\0\u6bdc"+
    "\0\u6c17\0\u6c52\0\166\0\u6c8d\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79"+
    "\0\u6db4\0\166\0\u6def\0\166\0\u6e2a\0\u6e65\0\u6ea0\0\u6edb"+
    "\0\166\0\u6f16\0\u6f51\0\u6f8c\0\u6fc7\0\u7002\0\u703d\0\u7078"+
    "\0\166\0\u70b3\0\u70ee\0\u7129\0\u7164\0\u719f\0\u71da\0\u7215"+
    "\0\u7250\0\u728b\0\u72c6\0\u7301\0\u733c\0\u7377\0\166\0\166"+
    "\0\u73b2\0\u73ed\0\u7428\0\u7463\0\u749e\0\u74d9\0\u7514\0\166"+
    "\0\u754f\0\u758a\0\u75c5\0\u7600\0\u763b\0\u7676\0\u76b1\0\166"+
    "\0\u76ec\0\u7727\0\u7762\0\166\0\166\0\166\0\u779d\0\u77d8"+
    "\0\u7813\0\u784e\0\u7889\0\u78c4\0\u78ff\0\u793a\0\u7975\0\u79b0"+
    "\0\u79eb\0\166\0\u7a26\0\u7a61\0\u7a9c\0\166\0\166\0\u7ad7"+
    "\0\u7b12\0\u7b4d\0\u7b88\0\u7bc3\0\u7bfe\0\u7c39\0\166\0\u7c74"+
    "\0\u7caf\0\u7cea\0\u7d25\0\u7d60\0\u7d9b\0\u7dd6\0\u7e11\0\u7e4c"+
    "\0\u7e87\0\u7ec2\0\u7efd\0\u7f38\0\u7f73\0\u7fae\0\u7fe9\0\u8024"+
    "\0\u805f\0\u809a\0\u80d5\0\u8110\0\u814b\0\u8186\0\u81c1\0\u81fc"+
    "\0\u8237\0\u8272\0\u82ad\0\u82e8\0\u8323\0\u835e\0\u8399\0\u83d4"+
    "\0\u840f\0\u844a\0\u8485\0\u84c0\0\u84fb\0\u8536\0\u8571\0\u85ac"+
    "\0\u85e7\0\u8622\0\u865d\0\u8698\0\u86d3\0\u870e\0\u8749\0\u8784"+
    "\0\166\0\u87bf\0\u87fa\0\u8835\0\u8870\0\u88ab\0\166\0\166"+
    "\0\u88e6\0\u8921\0\u895c\0\u8997\0\u89d2\0\u8a0d\0\166\0\u8a48"+
    "\0\166\0\166\0\166\0\166\0\u8a83\0\166\0\u8abe\0\166"+
    "\0\u8af9\0\u8b34\0\u8b6f\0\166\0\u8baa\0\u8be5\0\u8c20\0\166"+
    "\0\u8c5b\0\166\0\u8c96\0\u8cd1\0\u8d0c\0\u8d47\0\u8d82\0\u8dbd"+
    "\0\u8df8\0\u8e33\0\u8e6e\0\u8ea9\0\u8ee4\0\u8f1f\0\u8f5a\0\u8f95"+
    "\0\166\0\u8fd0\0\u900b\0\u9046\0\u9081\0\u90bc\0\u90f7\0\u9132"+
    "\0\u916d\0\u91a8\0\u91e3\0\166\0\166\0\u921e\0\u9259\0\u9294"+
    "\0\u92cf\0\166\0\u930a\0\u9345\0\166\0\u9380\0\u93bb\0\u93f6"+
    "\0\166\0\166\0\166\0\u9431\0\u946c\0\166\0\166\0\u94a7"+
    "\0\u94e2\0\u951d\0\166\0\u9558\0\u9593\0\u95ce\0\166\0\u9609"+
    "\0\166\0\u9644\0\u967f\0\u96ba\0\u96f5\0\u9730\0\u976b\0\u97a6"+
    "\0\u97e1\0\u981c\0\u9857\0\u9892\0\u98cd\0\u9908\0\u9943\0\u997e"+
    "\0\u99b9\0\166\0\u99f4\0\u9a2f\0\u9a6a\0\u9aa5\0\166\0\u9ae0"+
    "\0\u9b1b\0\u9b56\0\166\0\u9b91\0\u9bcc\0\u9c07\0\u9c42\0\u9c7d"+
    "\0\u9cb8\0\u9cf3\0\166\0\u9d2e\0\u9d69\0\166\0\166\0\u9da4"+
    "\0\166\0\166\0\u9ddf\0\u9e1a\0\166\0\u9e55\0\u9e90\0\166"+
    "\0\u9ecb\0\166\0\u9f06\0\u9f41\0\u9f7c\0\u9fb7\0\u0162\0\u9ff2"+
    "\0\166\0\ua02d\0\166\0\ua068\0\ua0a3\0\ua0de\0\ua119\0\ua154"+
    "\0\166\0\ua18f\0\ua1ca\0\ua205\0\ua240\0\ua27b\0\ua2b6\0\ua2f1"+
    "\0\ua32c\0\ua367\0\166\0\166\0\ua3a2\0\ua3dd\0\ua418\0\ua453"+
    "\0\166\0\166\0\ua48e\0\166\0\ua4c9\0\ua504\0\ua53f\0\ua57a"+
    "\0\ua5b5\0\ua5f0\0\ua62b\0\ua666\0\ua6a1\0\ua6dc\0\ua717\0\ua752"+
    "\0\ua78d\0\ua7c8\0\166\0\ua803\0\ua83e\0\ua879\0\ua8b4\0\ua8ef"+
    "\0\ua92a\0\166\0\166\0\ua965\0\ua9a0\0\ua9db\0\uaa16\0\uaa51"+
    "\0\166\0\uaa8c\0\uaac7\0\uab02\0\uab3d\0\uab78\0\166\0\uabb3"+
    "\0\uabee\0\uac29\0\uac64\0\uac9f\0\uacda\0\uad15\0\166\0\uad50"+
    "\0\uad8b\0\uadc6\0\uae01\0\uae3c\0\166\0\uae77\0\uaeb2\0\uaeed"+
    "\0\uaf28\0\uaf63\0\uaf9e\0\uafd9\0\ub014\0\166\0\ub04f\0\166"+
    "\0\166\0\ub08a\0\ub0c5\0\166\0\ub100\0\ub13b\0\ub176\0\ub1b1"+
    "\0\ub1ec\0\ub227\0\ub262\0\166\0\ub29d\0\ub2d8\0\166\0\ub313"+
    "\0\ub34e\0\166\0\ub389\0\166\0\ub3c4\0\ub3ff\0\ub43a\0\ub475"+
    "\0\ub4b0\0\ub4eb\0\ub526\0\ub561\0\166\0\ub59c\0\ub5d7\0\ub612"+
    "\0\ub64d\0\166\0\ub688\0\ub6c3\0\166\0\ub6fe\0\ub739\0\ub774"+
    "\0\166\0\166\0\ub7af\0\ub7ea\0\ub825\0\ub860\0\ub89b\0\ub8d6"+
    "\0\ub911\0\ub94c\0\ub987\0\ub9c2\0\ub9fd\0\uba38\0\uba73\0\ubaae"+
    "\0\166\0\166\0\ubae9\0\166\0\166\0\166\0\ubb24\0\ubb5f"+
    "\0\ubb9a\0\ubbd5\0\ubc10\0\ubc4b\0\166\0\ubc86\0\ubcc1\0\ubcfc"+
    "\0\ubd37\0\ubd72\0\ubdad\0\166\0\ubde8\0\ube23\0\166\0\166"+
    "\0\ube5e\0\ube99\0\ubed4\0\ubf0f\0\ubf4a\0\ubf85\0\166\0\ubfc0"+
    "\0\166\0\ubffb\0\uc036\0\uc071\0\uc0ac\0\uc0e7\0\uc122\0\uc15d"+
    "\0\uc198\0\uc1d3\0\166\0\uc20e\0\uc249\0\uc284\0\166\0\uc2bf"+
    "\0\uc2fa\0\uc335\0\uc370\0\uc3ab\0\uc3e6\0\uc421\0\166\0\uc45c"+
    "\0\uc497\0\uc4d2\0\166\0\uc50d\0\166\0\uc548\0\166\0\uc583"+
    "\0\166\0\uc5be\0\uc5f9\0\uc634\0\166\0\166\0\166\0\uc66f"+
    "\0\uc6aa\0\uc6e5\0\uc720\0\uc75b\0\uc796\0\uc7d1\0\uc80c\0\uc847"+
    "\0\uc882\0\uc8bd\0\uc8f8\0\166\0\166\0\uc933\0\166\0\uc96e"+
    "\0\166\0\166\0\uc9a9\0\166\0\uc9e4\0\166\0\uca1f\0\uca5a"+
    "\0\uca95\0\166\0\166\0\ucad0\0\166\0\ucb0b\0\ucb46\0\ucb81"+
    "\0\ucbbc\0\ucbf7\0\166\0\166\0\ucc32\0\ucc6d\0\ucca8\0\ucce3"+
    "\0\166\0\166\0\ucd1e\0\ucd59\0\ucd94\0\ucdcf\0\uce0a\0\uce45"+
    "\0\uce80\0\ucebb\0\ucef6\0\166\0\ucf31\0\ucf6c\0\166\0\ucfa7"+
    "\0\ucfe2\0\166\0\ud01d\0\ud058\0\ud093\0\166\0\ud0ce\0\ud109"+
    "\0\ud144\0\166\0\166\0\166\0\ud17f\0\166\0\ud1ba\0\166"+
    "\0\ud1f5\0\ud230\0\166\0\ud26b\0\166\0\ud2a6\0\ud2e1\0\166"+
    "\0\ud31c\0\166\0\ud357\0\73\0\ud392\0\166\0\ud3cd\0\ud408"+
    "\0\ud443\0\166\0\166\0\ud47e\0\ud4b9\0\ud4f4\0\ud52f\0\166"+
    "\0\166\0\ud56a\0\ud5a5\0\ud5e0\0\166\0\166\0\166\0\ud61b"+
    "\0\166\0\ud656\0\166\0\ud691\0\166\0\ud6cc\0\166\0\ud707"+
    "\0\ud742\0\ud77d\0\ud7b8\0\ud7f3\0\166\0\ud82e\0\ud869\0\166"+
    "\0\ud8a4\0\ud8df\0\ud91a\0\166\0\ud955\0\166\0\ud990\0\ud9cb"+
    "\0\166\0\uda06\0\uda41\0\uda7c\0\udab7\0\udaf2\0\166\0\udb2d"+
    "\0\udb68\0\udba3\0\udbde\0\udc19\0\udc54\0\udc8f\0\udcca\0\166"+
    "\0\udd05\0\udd40\0\166\0\166\0\166\0\udd7b\0\uddb6\0\uddf1"+
    "\0\ude2c\0\ude67\0\166\0\udea2\0\166\0\udedd\0\udf18\0\166"+
    "\0\udf53\0\udf8e\0\udfc9\0\ue004\0\ue03f\0\ue07a\0\166\0\ue0b5"+
    "\0\166\0\ue0f0\0\166\0\ue12b\0\ue166\0\166\0\ue1a1\0\166"+
    "\0\ue1dc\0\ue217\0\ue252\0\ue28d\0\ue2c8\0\ue303\0\ue33e\0\166"+
    "\0\ue379\0\ue3b4\0\ue3ef\0\ue42a\0\ue465\0\ue4a0\0\ue4db\0\ue516"+
    "\0\ue551\0\ue58c\0\166\0\166\0\ue5c7\0\166\0\ue602\0\ue63d"+
    "\0\ue678\0\ue6b3\0\166\0\166\0\166\0\ue6ee\0\166\0\166"+
    "\0\ue729\0\ue764\0\ue79f\0\ue7da\0\ue815\0\166\0\ue850\0\ue88b"+
    "\0\ue8c6\0\ue901\0\ue93c\0\166\0\166\0\ue977\0\ue9b2\0\166"+
    "\0\166\0\166\0\ue9ed\0\uea28\0\166\0\uea63\0\uea9e\0\uead9"+
    "\0\ueb14\0\ueb4f\0\ueb8a\0\166\0\uebc5\0\uec00\0\166\0\uec3b"+
    "\0\uec76\0\166\0\uecb1\0\uecec\0\166\0\ued27\0\ued62\0\ued9d"+
    "\0\uedd8\0\uee13\0\166\0\uee4e\0\166\0\166\0\166\0\uee89"+
    "\0\ueec4\0\ueeff\0\uef3a\0\uef75\0\uefb0\0\uefeb\0\166\0\uf026"+
    "\0\166\0\uf061\0\uf09c\0\166\0\uf0d7\0\uf112\0\166\0\166"+
    "\0\166\0\166\0\166\0\166\0\uf14d\0\uf188\0\166\0\166"+
    "\0\uf1c3\0\uf1fe\0\uf239\0\166\0\uf274\0\uf2af\0\uf2ea\0\uf325"+
    "\0\uf360\0\166\0\166\0\uf39b\0\166\0\uf3d6\0\uf411\0\uf44c"+
    "\0\uf487\0\166\0\uf4c2\0\uf4fd\0\uf538\0\uf573\0\uf5ae\0\uf5e9"+
    "\0\166\0\uf624\0\uf65f\0\166\0\uf69a\0\166\0\uf6d5\0\uf710"+
    "\0\uf74b\0\uf786\0\166\0\uf7c1\0\uf7fc\0\166\0\uf837\0\73"+
    "\0\166\0\166\0\uf872\0\166\0\uf8ad\0\uf8e8\0\166\0\166"+
    "\0\uf923\0\166\0\uf95e\0\uf999\0\uf9d4\0\ufa0f\0\ufa4a\0\ufa85"+
    "\0\ufac0\0\ufafb\0\ufb36\0\166\0\166\0\ufb71\0\ufbac\0\166"+
    "\0\ufbe7\0\ufc22\0\166\0\ufc5d\0\ufc98\0\ufcd3\0\166\0\ufd0e"+
    "\0\ufd49\0\ufd84\0\ufdbf\0\ufdfa\0\ufe35\0\ufe70\0\ufeab\0\ufee6"+
    "\0\uff21\0\uff5c\0\uff97\0\uffd2\1\15\1\110\0\166\1\203"+
    "\0\166\1\276\1\371\1\u0134\1\u016f\1\u01aa\1\u01e5\0\166";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1408];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\3\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\2\1\64\1\3\1\5\1\65"+
    "\1\3\75\0\2\3\31\0\33\3\1\0\2\3\3\0"+
    "\1\4\20\0\1\66\44\0\1\4\5\0\2\5\62\0"+
    "\1\5\3\0\3\6\1\0\1\6\1\67\65\6\6\0"+
    "\1\70\74\0\1\71\76\0\1\72\72\0\1\73\72\0"+
    "\1\74\72\0\1\75\75\0\1\76\73\0\1\77\77\0"+
    "\1\100\74\0\1\101\74\0\1\102\74\0\1\103\40\0"+
    "\2\3\31\0\1\3\1\104\2\3\1\105\1\106\1\107"+
    "\1\110\1\3\1\111\2\3\1\112\1\113\1\3\1\114"+
    "\7\3\1\115\3\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\116\1\3\1\117\2\3\1\120\6\3\1\121\1\122"+
    "\1\123\1\3\1\124\12\3\1\0\2\3\2\0\2\3"+
    "\31\0\3\3\1\125\1\3\1\126\1\127\1\130\7\3"+
    "\1\131\13\3\1\0\2\3\2\0\2\3\31\0\1\132"+
    "\1\3\1\133\2\3\1\134\4\3\1\135\3\3\1\136"+
    "\1\137\1\140\12\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\141\1\3\1\142\11\3\1\143\1\3\1\144\1\3"+
    "\1\145\12\3\1\0\2\3\2\0\2\3\31\0\1\146"+
    "\1\3\1\147\6\3\1\150\2\3\1\151\3\3\1\152"+
    "\12\3\1\0\2\3\2\0\2\3\31\0\1\153\1\3"+
    "\1\154\13\3\1\155\1\3\1\156\12\3\1\0\2\3"+
    "\2\0\2\3\31\0\1\157\1\3\1\160\2\3\1\161"+
    "\1\3\1\162\4\3\1\163\1\3\1\164\1\3\1\165"+
    "\12\3\1\0\2\3\2\0\2\3\31\0\1\166\4\3"+
    "\1\167\1\3\1\170\2\3\1\171\1\3\1\172\3\3"+
    "\1\173\12\3\1\0\2\3\2\0\2\3\31\0\1\174"+
    "\17\3\1\175\12\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\176\1\3\1\177\2\3\1\200\1\3\1\201\4\3"+
    "\1\202\1\3\1\203\1\3\1\204\12\3\1\0\2\3"+
    "\2\0\2\3\31\0\6\3\1\205\4\3\1\206\3\3"+
    "\1\207\13\3\1\0\2\3\2\0\2\3\31\0\1\210"+
    "\1\3\1\211\2\3\1\212\6\3\1\213\1\3\1\214"+
    "\1\3\1\215\1\216\11\3\1\0\2\3\2\0\2\3"+
    "\31\0\1\3\1\217\4\3\1\220\1\3\1\221\6\3"+
    "\1\222\5\3\1\223\5\3\1\0\2\3\2\0\2\3"+
    "\31\0\1\224\1\3\1\225\1\3\1\226\4\3\1\227"+
    "\1\230\1\231\1\232\1\3\1\233\1\3\1\234\1\235"+
    "\3\3\1\236\4\3\1\237\1\0\2\3\2\0\2\3"+
    "\31\0\5\3\1\240\1\241\1\3\1\242\1\243\1\3"+
    "\1\244\1\245\12\3\1\246\3\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\247\30\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\250\2\3\1\251\1\3\1\252"+
    "\10\3\1\253\12\3\1\0\2\3\2\0\2\3\31\0"+
    "\20\3\1\254\12\3\1\0\2\3\2\0\2\3\31\0"+
    "\2\3\1\255\13\3\1\256\14\3\1\0\2\3\2\0"+
    "\2\3\31\0\1\257\1\3\1\260\13\3\1\261\1\3"+
    "\1\262\12\3\1\0\2\3\2\0\2\3\31\0\1\263"+
    "\4\3\1\264\4\3\1\265\3\3\1\266\1\3\1\267"+
    "\12\3\1\0\2\3\2\0\2\3\31\0\1\270\15\3"+
    "\1\271\14\3\1\0\2\3\2\0\2\3\31\0\20\3"+
    "\1\272\12\3\1\0\2\3\3\0\1\66\15\0\1\273"+
    "\15\0\1\273\31\0\1\66\1\273\1\0\3\70\1\0"+
    "\1\70\1\0\1\70\1\274\63\70\3\71\1\275\1\71"+
    "\1\275\2\71\1\276\62\71\1\0\2\3\31\0\1\277"+
    "\1\300\31\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\301\16\3\1\302\11\3\1\0\2\3\2\0\2\3"+
    "\31\0\1\3\1\303\17\3\1\304\11\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\305\2\3\1\306\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\307\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\310\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\17\3\1\311\13\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\312\5\3"+
    "\1\313\13\3\1\0\2\3\2\0\2\3\31\0\22\3"+
    "\1\314\10\3\1\0\2\3\2\0\2\3\31\0\4\3"+
    "\1\315\14\3\1\316\11\3\1\0\2\3\2\0\2\3"+
    "\31\0\1\317\5\3\1\320\1\321\1\322\1\323\5\3"+
    "\1\324\13\3\1\0\2\3\2\0\2\3\31\0\20\3"+
    "\1\325\12\3\1\0\2\3\2\0\2\3\31\0\25\3"+
    "\1\326\5\3\1\0\2\3\2\0\2\3\31\0\11\3"+
    "\1\327\21\3\1\0\2\3\2\0\2\3\31\0\1\330"+
    "\16\3\1\331\13\3\1\0\2\3\2\0\2\3\31\0"+
    "\14\3\1\332\10\3\1\333\5\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\334\1\3\1\335\4\3\1\336"+
    "\4\3\1\337\14\3\1\0\2\3\2\0\2\3\31\0"+
    "\5\3\1\340\25\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\3\1\341\31\3\1\0\2\3\2\0\2\3\31\0"+
    "\17\3\1\342\13\3\1\0\2\3\2\0\2\3\31\0"+
    "\11\3\1\343\21\3\1\0\2\3\2\0\2\3\31\0"+
    "\15\3\1\344\15\3\1\0\2\3\2\0\2\3\31\0"+
    "\3\3\1\345\21\3\1\346\5\3\1\0\2\3\2\0"+
    "\2\3\31\0\1\347\13\3\1\350\1\3\1\351\2\3"+
    "\1\352\11\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\353\30\3\1\0\2\3\2\0\2\3\31\0\25\3"+
    "\1\354\5\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\355\30\3\1\0\2\3\2\0\2\3\31\0\13\3"+
    "\1\356\17\3\1\0\2\3\2\0\2\3\31\0\16\3"+
    "\1\357\14\3\1\0\2\3\2\0\2\3\31\0\1\360"+
    "\3\3\1\361\2\3\1\362\1\363\1\364\1\3\1\365"+
    "\3\3\1\366\7\3\1\367\3\3\1\0\2\3\2\0"+
    "\2\3\31\0\7\3\1\370\23\3\1\0\2\3\2\0"+
    "\2\3\31\0\22\3\1\371\10\3\1\0\2\3\2\0"+
    "\2\3\31\0\7\3\1\372\16\3\1\373\4\3\1\0"+
    "\2\3\2\0\2\3\31\0\4\3\1\374\20\3\1\375"+
    "\5\3\1\0\2\3\2\0\2\3\31\0\3\3\1\376"+
    "\27\3\1\0\2\3\2\0\2\3\31\0\12\3\1\377"+
    "\20\3\1\0\2\3\2\0\2\3\31\0\7\3\1\u0100"+
    "\15\3\1\u0101\5\3\1\0\2\3\2\0\2\3\31\0"+
    "\4\3\1\u0102\1\3\1\u0103\2\3\1\u0104\21\3\1\0"+
    "\2\3\2\0\2\3\31\0\6\3\1\u0105\10\3\1\u0106"+
    "\13\3\1\0\2\3\2\0\2\3\31\0\1\u0107\7\3"+
    "\1\u0108\16\3\1\u0109\3\3\1\0\2\3\2\0\2\3"+
    "\31\0\6\3\1\u010a\15\3\1\u010b\6\3\1\0\2\3"+
    "\2\0\2\3\31\0\1\u010c\10\3\1\u010d\14\3\1\u010e"+
    "\4\3\1\0\2\3\2\0\2\3\31\0\7\3\1\u010f"+
    "\23\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u0110"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u0111"+
    "\15\3\1\u0112\12\3\1\0\2\3\2\0\2\3\31\0"+
    "\20\3\1\u0113\12\3\1\0\2\3\2\0\2\3\31\0"+
    "\6\3\1\u0114\1\u0115\23\3\1\0\2\3\2\0\2\3"+
    "\31\0\5\3\1\u0116\1\3\1\u0117\23\3\1\0\2\3"+
    "\2\0\2\3\31\0\5\3\1\u0118\6\3\1\u0119\16\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u011a\12\3"+
    "\1\u011b\13\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u011c\15\3\1\u011d\12\3\1\0\2\3\2\0\2\3"+
    "\31\0\14\3\1\u011e\3\3\1\u011f\12\3\1\0\2\3"+
    "\2\0\2\3\31\0\1\u0120\1\3\1\u0121\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\5\3\1\u0122\25\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u0123\4\3\1\u0124\1\u0125"+
    "\1\u0126\4\3\1\u0127\10\3\1\u0128\5\3\1\0\2\3"+
    "\2\0\2\3\31\0\27\3\1\u0129\3\3\1\0\2\3"+
    "\2\0\2\3\31\0\7\3\1\u012a\4\3\1\u012b\16\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\3\1\u012c\3\3"+
    "\1\u012d\11\3\1\u012e\13\3\1\0\2\3\2\0\2\3"+
    "\31\0\5\3\1\u012f\25\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u0130\13\3\1\u0131\1\3\1\u0132\12\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\u0133\32\3\1\0"+
    "\2\3\2\0\2\3\31\0\15\3\1\u0134\15\3\1\0"+
    "\2\3\2\0\2\3\31\0\27\3\1\u0135\3\3\1\0"+
    "\2\3\2\0\2\3\31\0\17\3\1\u0136\13\3\1\0"+
    "\2\3\2\0\2\3\31\0\13\3\1\u0137\2\3\1\u0138"+
    "\5\3\1\u0139\6\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\3\1\u013a\11\3\1\u013b\17\3\1\0\2\3\2\0"+
    "\2\3\31\0\1\u013c\1\3\1\u013d\13\3\1\u013e\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u013f\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0140\15\3"+
    "\1\u0141\10\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u0142\15\3\1\u0143\12\3\1\0\2\3\2\0\2\3"+
    "\31\0\7\3\1\u0144\23\3\1\0\2\3\2\0\2\3"+
    "\31\0\4\3\1\u0145\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\4\3\1\u0146\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u0147\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\1\3\1\u0148\2\3\1\u0149\1\3\1\u014a\2\3"+
    "\1\u014b\1\3\1\u014c\2\3\1\u014d\1\u014e\13\3\1\0"+
    "\2\3\2\0\2\3\31\0\20\3\1\u014f\12\3\1\0"+
    "\2\3\2\0\2\3\31\0\25\3\1\u0150\5\3\1\0"+
    "\2\3\2\0\2\3\31\0\27\3\1\u0151\3\3\1\0"+
    "\2\3\2\0\2\3\31\0\4\3\1\u0152\2\3\1\u0153"+
    "\1\3\1\u0154\5\3\1\u0155\5\3\1\u0156\5\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u0157\32\3\1\0\2\3"+
    "\2\0\2\3\31\0\5\3\1\u0158\4\3\1\u0159\20\3"+
    "\1\0\2\3\2\0\2\3\31\0\14\3\1\u015a\16\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\u015b\32\3\1\0"+
    "\2\3\2\0\2\3\31\0\15\3\1\u015c\7\3\1\u015d"+
    "\5\3\1\0\2\3\2\0\2\3\31\0\23\3\1\u015e"+
    "\7\3\1\0\2\3\2\0\2\3\31\0\25\3\1\u015f"+
    "\5\3\1\0\2\3\2\0\2\3\31\0\17\3\1\u0160"+
    "\13\3\1\0\2\3\2\0\2\3\31\0\1\u0161\32\3"+
    "\1\0\2\3\2\0\2\3\31\0\7\3\1\u0162\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\3\1\u0163\31\3"+
    "\1\0\2\3\2\0\2\3\31\0\7\3\1\u0164\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\10\3\1\u0165\22\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0166\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0167\1\3"+
    "\1\u0168\26\3\1\0\2\3\2\0\2\3\31\0\4\3"+
    "\1\u0169\26\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u016a\30\3\1\0\2\3\2\0\2\3\31\0\1\u016b"+
    "\32\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u016c"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\1\u016d\17\3"+
    "\1\u016e\12\3\1\0\2\3\2\0\2\3\31\0\20\3"+
    "\1\u016f\12\3\1\0\2\3\2\0\2\3\31\0\4\3"+
    "\1\u0170\26\3\1\0\2\3\2\0\2\3\31\0\6\3"+
    "\1\u0171\24\3\1\0\2\3\2\0\2\3\31\0\21\3"+
    "\1\u0172\11\3\1\0\2\3\2\0\2\3\31\0\7\3"+
    "\1\u0173\23\3\1\0\2\3\2\0\2\3\31\0\3\3"+
    "\1\u0174\1\u0175\26\3\1\0\2\3\2\0\2\3\31\0"+
    "\5\3\1\u0176\25\3\1\0\2\3\2\0\2\3\31\0"+
    "\6\3\1\u0177\24\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\3\1\u0178\4\3\1\u0179\24\3\1\0\2\3\2\0"+
    "\2\3\31\0\16\3\1\u017a\14\3\1\0\2\3\2\0"+
    "\2\3\31\0\16\3\1\u017b\14\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\u017c\13\3\1\u017d\14\3\1\0"+
    "\2\3\2\0\2\3\31\0\4\3\1\u017e\26\3\1\0"+
    "\2\3\2\0\2\3\31\0\5\3\1\u017f\25\3\1\0"+
    "\2\3\2\0\2\3\31\0\5\3\1\u0180\1\3\1\u0181"+
    "\23\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u0182"+
    "\30\3\1\0\2\3\2\0\2\3\31\0\16\3\1\u0183"+
    "\14\3\1\0\2\3\3\0\1\66\3\0\1\u0184\2\0"+
    "\1\u0184\6\0\1\u0184\47\0\1\66\2\0\3\70\1\0"+
    "\1\70\1\0\1\70\1\274\1\u0185\62\70\10\275\1\u0186"+
    "\62\275\3\71\1\275\1\71\1\275\1\71\1\u0187\1\276"+
    "\62\71\1\0\2\3\31\0\16\3\1\u0188\14\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u0189\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\20\3\1\u018a\12\3\1\0"+
    "\2\3\2\0\2\3\31\0\16\3\1\u018b\14\3\1\0"+
    "\2\3\2\0\2\3\31\0\12\3\1\u018c\20\3\1\0"+
    "\2\3\2\0\2\3\31\0\20\3\1\u018d\12\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u018e\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u018f\1\3\1\u0190\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\7\3\1\u0191\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\21\3\1\u0192\11\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0193\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\u0194\1\3\1\u0195"+
    "\30\3\1\0\2\3\2\0\2\3\31\0\7\3\1\u0196"+
    "\6\3\1\u0197\14\3\1\0\2\3\2\0\2\3\31\0"+
    "\11\3\1\u0198\21\3\1\0\2\3\2\0\2\3\31\0"+
    "\13\3\1\u0199\17\3\1\0\2\3\2\0\2\3\31\0"+
    "\13\3\1\u019a\17\3\1\0\2\3\2\0\2\3\31\0"+
    "\11\3\1\u019b\21\3\1\0\2\3\2\0\2\3\31\0"+
    "\22\3\1\u019c\10\3\1\0\2\3\2\0\2\3\31\0"+
    "\4\3\1\u019d\4\3\1\u019e\12\3\1\u019f\6\3\1\0"+
    "\2\3\2\0\2\3\31\0\15\3\1\u01a0\15\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u01a1\32\3\1\0\2\3"+
    "\2\0\2\3\31\0\11\3\1\u01a2\21\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u01a3\2\3\1\u01a4\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u01a5\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u01a6\12\3"+
    "\1\u01a7\13\3\1\0\2\3\2\0\2\3\31\0\7\3"+
    "\1\u01a8\23\3\1\0\2\3\2\0\2\3\3\0\1\u01a9"+
    "\25\0\33\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u01aa\30\3\1\0\2\3\2\0\2\3\31\0\1\u01ab"+
    "\32\3\1\0\2\3\2\0\2\3\31\0\7\3\1\u01ac"+
    "\23\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u01ad"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\13\3\1\u01ae"+
    "\17\3\1\0\2\3\2\0\2\3\31\0\6\3\1\u01af"+
    "\7\3\1\u01b0\14\3\1\0\2\3\2\0\2\3\31\0"+
    "\2\3\1\u01b1\3\3\1\u01b2\24\3\1\0\2\3\2\0"+
    "\2\3\31\0\22\3\1\u01b3\2\3\1\u01b4\5\3\1\0"+
    "\2\3\2\0\2\3\31\0\30\3\1\u01b5\2\3\1\0"+
    "\2\3\2\0\2\3\31\0\6\3\1\u01b6\24\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u01b7\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\32\3\1\u01b8\1\0\2\3"+
    "\2\0\2\3\31\0\17\3\1\u01b9\13\3\1\0\2\3"+
    "\2\0\2\3\31\0\1\3\1\u01ba\5\3\1\u01bb\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\14\3\1\u01bc\16\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\u01bd\32\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u01be\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\20\3\1\u01bf\12\3\1\0"+
    "\2\3\2\0\2\3\31\0\7\3\1\u01c0\23\3\1\0"+
    "\2\3\2\0\2\3\31\0\4\3\1\u01c1\26\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u01c2\15\3\1\u01c3"+
    "\12\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u01c4"+
    "\30\3\1\0\2\3\2\0\2\3\31\0\12\3\1\u01c5"+
    "\20\3\1\0\2\3\2\0\2\3\31\0\7\3\1\u01c6"+
    "\23\3\1\0\2\3\2\0\2\3\31\0\11\3\1\u01c7"+
    "\5\3\1\u01c8\2\3\1\u01c9\10\3\1\0\2\3\2\0"+
    "\2\3\31\0\14\3\1\u01ca\1\3\1\u01cb\14\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u01cc\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\4\3\1\u01cd\26\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u01ce\32\3\1\0\2\3"+
    "\2\0\2\3\31\0\7\3\1\u01cf\23\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u01d0\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u01d1\6\3\1\u01d2\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\12\3\1\u01d3\20\3"+
    "\1\0\2\3\2\0\2\3\31\0\22\3\1\u01d4\10\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u01d5\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\3\1\u01d6\31\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u01d7\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u01d8\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u01d9\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u01da\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\3\1\u01db\31\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\u01dc\32\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u01dd\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\17\3\1\u01de\13\3\1\0"+
    "\2\3\2\0\2\3\31\0\11\3\1\u01df\21\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u01e0\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\25\3\1\u01e1\5\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u01e2\32\3\1\0\2\3"+
    "\2\0\2\3\31\0\11\3\1\u01e3\21\3\1\0\2\3"+
    "\2\0\2\3\31\0\7\3\1\u01e4\23\3\1\0\2\3"+
    "\2\0\2\3\31\0\17\3\1\u01e5\13\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u01e6\4\3\1\u01e7\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u01e8\1\3"+
    "\1\u01e9\26\3\1\0\2\3\2\0\2\3\31\0\6\3"+
    "\1\u01ea\24\3\1\0\2\3\2\0\2\3\31\0\1\u01eb"+
    "\32\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u01ec"+
    "\1\3\1\u01ed\4\3\1\u01ee\21\3\1\0\2\3\2\0"+
    "\2\3\31\0\1\u01ef\32\3\1\0\2\3\2\0\2\3"+
    "\31\0\17\3\1\u01f0\13\3\1\0\2\3\2\0\2\3"+
    "\31\0\17\3\1\u01f1\13\3\1\0\2\3\2\0\2\3"+
    "\31\0\17\3\1\u01f2\13\3\1\0\2\3\2\0\2\3"+
    "\31\0\5\3\1\u01f3\25\3\1\0\2\3\2\0\2\3"+
    "\31\0\11\3\1\u01f4\21\3\1\0\2\3\2\0\2\3"+
    "\31\0\5\3\1\u01f5\11\3\1\u01f6\13\3\1\0\2\3"+
    "\2\0\2\3\31\0\7\3\1\u01f7\23\3\1\0\2\3"+
    "\2\0\2\3\31\0\5\3\1\u01f8\25\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\u01f9\1\3\1\u01fa\10\3"+
    "\1\u01fb\7\3\1\u01fc\3\3\1\0\2\3\2\0\2\3"+
    "\31\0\7\3\1\u01fd\4\3\1\u01fe\16\3\1\0\2\3"+
    "\2\0\2\3\31\0\6\3\1\u01ff\24\3\1\0\2\3"+
    "\2\0\2\3\31\0\13\3\1\u0200\11\3\1\u0201\5\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u0202\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\3\1\u0203\31\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u0204\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0205\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u0206\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u0207\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u0208\1\3"+
    "\1\u0209\3\3\1\u020a\13\3\1\0\2\3\2\0\2\3"+
    "\31\0\6\3\1\u020b\11\3\1\u020c\4\3\1\u020d\1\3"+
    "\1\u020e\3\3\1\0\2\3\2\0\2\3\31\0\11\3"+
    "\1\u020f\21\3\1\0\2\3\2\0\2\3\31\0\6\3"+
    "\1\u0210\24\3\1\0\2\3\2\0\2\3\31\0\7\3"+
    "\1\u0211\23\3\1\0\2\3\2\0\2\3\31\0\20\3"+
    "\1\u0212\12\3\1\0\2\3\2\0\2\3\31\0\16\3"+
    "\1\u0213\14\3\1\0\2\3\2\0\2\3\31\0\16\3"+
    "\1\u0214\14\3\1\0\2\3\2\0\2\3\31\0\20\3"+
    "\1\u0215\11\3\1\u0216\1\0\2\3\2\0\2\3\31\0"+
    "\6\3\1\u0217\24\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\u0218\32\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u0219\30\3\1\0\2\3\2\0\2\3\31\0\22\3"+
    "\1\u021a\10\3\1\0\2\3\2\0\2\3\31\0\5\3"+
    "\1\u021b\25\3\1\0\2\3\2\0\2\3\31\0\6\3"+
    "\1\u021c\24\3\1\0\2\3\2\0\2\3\31\0\24\3"+
    "\1\u021d\6\3\1\0\2\3\2\0\2\3\31\0\26\3"+
    "\1\u021e\4\3\1\0\2\3\2\0\2\3\31\0\16\3"+
    "\1\u021f\14\3\1\0\2\3\2\0\2\3\31\0\1\u0220"+
    "\32\3\1\0\2\3\2\0\2\3\31\0\26\3\1\u0221"+
    "\4\3\1\0\2\3\2\0\2\3\31\0\24\3\1\u0222"+
    "\6\3\1\0\2\3\2\0\2\3\31\0\30\3\1\u0223"+
    "\2\3\1\0\2\3\2\0\2\3\31\0\12\3\1\u0224"+
    "\20\3\1\0\2\3\2\0\2\3\31\0\6\3\1\u0225"+
    "\24\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u0226"+
    "\13\3\1\u0227\14\3\1\0\2\3\2\0\2\3\31\0"+
    "\2\3\1\u0228\15\3\1\u0229\12\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\u022a\30\3\1\0\2\3\2\0"+
    "\2\3\31\0\7\3\1\u022b\23\3\1\0\2\3\2\0"+
    "\2\3\31\0\14\3\1\u022c\16\3\1\0\2\3\2\0"+
    "\2\3\31\0\4\3\1\u022d\26\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\u022e\30\3\1\0\2\3\2\0"+
    "\2\3\31\0\7\3\1\u022f\23\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\u0230\30\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\u0231\30\3\1\0\2\3\2\0"+
    "\2\3\31\0\14\3\1\u0232\16\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\u0233\30\3\1\0\2\3\2\0"+
    "\2\3\31\0\4\3\1\u0234\7\3\1\u0235\3\3\1\u0236"+
    "\12\3\1\0\2\3\2\0\2\3\31\0\17\3\1\u0237"+
    "\13\3\1\0\2\3\2\0\2\3\31\0\1\u0238\32\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0239\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\20\3\1\u023a\12\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u023b\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u023c\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u023d\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\17\3\1\u023e\13\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u023f\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0240\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0241\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\7\3\1\u0242\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0243\6\3"+
    "\1\u0244\5\3\1\u0245\6\3\1\u0246\4\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u0247\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\21\3\1\u0248\11\3\1\0\2\3"+
    "\2\0\2\3\31\0\17\3\1\u0249\13\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u024a\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\6\3\1\u024b\24\3\1\0\2\3"+
    "\2\0\2\3\31\0\16\3\1\u024c\14\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u024d\10\3\1\u024e\17\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u024f\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u0250\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u0251\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\14\3\1\u0252\16\3"+
    "\1\0\2\3\2\0\2\3\31\0\15\3\1\u0253\15\3"+
    "\1\0\2\3\2\0\2\3\31\0\20\3\1\u0254\12\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0255\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\7\3\1\u0256\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u0257\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\22\3\1\u0258\10\3"+
    "\1\0\2\3\2\0\2\3\31\0\14\3\1\u0259\16\3"+
    "\1\0\2\3\2\0\2\3\31\0\14\3\1\u025a\16\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u025b\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u025c\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u025d\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u025e\1\u025f"+
    "\24\3\1\0\2\3\2\0\2\3\31\0\7\3\1\u0260"+
    "\23\3\1\0\2\3\2\0\2\3\31\0\12\3\1\u0261"+
    "\20\3\1\0\2\3\2\0\2\3\31\0\24\3\1\u0262"+
    "\6\3\1\0\2\3\2\0\2\3\31\0\11\3\1\u0263"+
    "\7\3\1\u0264\11\3\1\0\2\3\2\0\2\3\31\0"+
    "\14\3\1\u0265\16\3\1\0\2\3\2\0\2\3\31\0"+
    "\26\3\1\u0266\4\3\1\0\2\3\2\0\2\3\31\0"+
    "\6\3\1\u0267\24\3\1\0\2\3\3\0\1\66\65\0"+
    "\1\66\2\0\3\u0185\1\275\1\u0185\1\275\1\u0185\1\u0268"+
    "\1\u0269\62\u0185\7\275\1\u026a\1\u0186\62\275\3\u026b\1\0"+
    "\1\u026b\1\0\1\u026c\1\u026d\63\u026b\1\0\2\3\31\0"+
    "\6\3\1\u026e\24\3\1\0\2\3\2\0\2\3\31\0"+
    "\5\3\1\u026f\25\3\1\0\2\3\2\0\2\3\31\0"+
    "\11\3\1\u0270\21\3\1\0\2\3\2\0\2\3\31\0"+
    "\20\3\1\u0271\12\3\1\0\2\3\2\0\2\3\31\0"+
    "\20\3\1\u0272\12\3\1\0\2\3\2\0\2\3\31\0"+
    "\7\3\1\u0273\23\3\1\0\2\3\2\0\2\3\31\0"+
    "\5\3\1\u0274\25\3\1\0\2\3\2\0\2\3\31\0"+
    "\15\3\1\u0275\15\3\1\0\2\3\2\0\2\3\31\0"+
    "\7\3\1\u0276\23\3\1\0\2\3\2\0\2\3\31\0"+
    "\4\3\1\u0277\26\3\1\0\2\3\2\0\2\3\31\0"+
    "\14\3\1\u0278\16\3\1\0\2\3\2\0\2\3\31\0"+
    "\5\3\1\u0279\25\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\u027a\32\3\1\0\2\3\2\0\2\3\31\0\25\3"+
    "\1\u027b\5\3\1\0\2\3\2\0\2\3\31\0\5\3"+
    "\1\u027c\25\3\1\0\2\3\2\0\2\3\31\0\6\3"+
    "\1\u027d\24\3\1\0\2\3\2\0\2\3\31\0\5\3"+
    "\1\u027e\10\3\1\u027f\14\3\1\0\2\3\2\0\2\3"+
    "\31\0\20\3\1\u0280\12\3\1\0\2\3\2\0\2\3"+
    "\31\0\7\3\1\u0281\23\3\1\0\2\3\2\0\2\3"+
    "\31\0\16\3\1\u0282\14\3\1\0\2\3\2\0\2\3"+
    "\31\0\14\3\1\u0283\16\3\1\0\2\3\2\0\2\3"+
    "\31\0\5\3\1\u0284\25\3\1\0\2\3\2\0\2\3"+
    "\31\0\1\u0285\32\3\1\0\2\3\2\0\2\3\31\0"+
    "\13\3\1\u0286\17\3\1\0\2\3\2\0\2\3\31\0"+
    "\4\3\1\u0287\26\3\1\0\2\3\2\0\2\3\31\0"+
    "\27\3\1\u0288\3\3\1\0\2\3\37\0\1\u0289\35\0"+
    "\2\3\31\0\13\3\1\u028a\17\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\u028b\30\3\1\0\2\3\2\0"+
    "\2\3\31\0\17\3\1\u028c\13\3\1\0\2\3\2\0"+
    "\2\3\31\0\20\3\1\u028d\12\3\1\0\2\3\2\0"+
    "\2\3\31\0\17\3\1\u028e\13\3\1\0\2\3\2\0"+
    "\2\3\31\0\7\3\1\u028f\23\3\1\0\2\3\2\0"+
    "\2\3\31\0\11\3\1\u0290\21\3\1\0\2\3\2\0"+
    "\2\3\31\0\22\3\1\u0291\10\3\1\0\2\3\2\0"+
    "\2\3\31\0\11\3\1\u0292\21\3\1\0\2\3\2\0"+
    "\2\3\31\0\17\3\1\u0293\3\3\1\u0294\7\3\1\0"+
    "\2\3\2\0\2\3\31\0\14\3\1\u0295\16\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u0296\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\4\3\1\u0297\26\3\1\0"+
    "\2\3\2\0\2\3\31\0\5\3\1\u0298\25\3\1\0"+
    "\2\3\2\0\2\3\31\0\4\3\1\u0299\26\3\1\0"+
    "\2\3\2\0\2\3\31\0\5\3\1\u029a\25\3\1\0"+
    "\2\3\2\0\2\3\31\0\6\3\1\u029b\24\3\1\0"+
    "\2\3\2\0\2\3\31\0\16\3\1\u029c\14\3\1\0"+
    "\2\3\2\0\2\3\31\0\5\3\1\u029d\12\3\1\u029e"+
    "\12\3\1\0\2\3\2\0\2\3\31\0\5\3\1\u029f"+
    "\25\3\1\0\2\3\2\0\2\3\31\0\24\3\1\u02a0"+
    "\6\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u02a1"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\15\3\1\u02a2"+
    "\15\3\1\0\2\3\2\0\2\3\31\0\20\3\1\u02a3"+
    "\12\3\1\0\2\3\2\0\2\3\31\0\14\3\1\u02a4"+
    "\16\3\1\0\2\3\2\0\2\3\31\0\5\3\1\u02a5"+
    "\25\3\1\0\2\3\2\0\2\3\31\0\20\3\1\u02a6"+
    "\12\3\1\0\2\3\2\0\2\3\31\0\17\3\1\u02a7"+
    "\13\3\1\0\2\3\2\0\2\3\31\0\5\3\1\u02a8"+
    "\25\3\1\0\2\3\2\0\2\3\31\0\16\3\1\u02a9"+
    "\14\3\1\0\2\3\2\0\2\3\31\0\5\3\1\u02aa"+
    "\25\3\1\0\2\3\2\0\2\3\31\0\7\3\1\u02ab"+
    "\23\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u02ac"+
    "\30\3\1\0\2\3\2\0\2\3\31\0\14\3\1\u02ad"+
    "\16\3\1\0\2\3\2\0\2\3\31\0\16\3\1\u02ae"+
    "\14\3\1\0\2\3\2\0\2\3\31\0\7\3\1\u02af"+
    "\23\3\1\0\2\3\2\0\2\3\31\0\6\3\1\u02b0"+
    "\24\3\1\0\2\3\2\0\2\3\31\0\7\3\1\u02b1"+
    "\23\3\1\0\2\3\2\0\2\3\31\0\5\3\1\u02b2"+
    "\25\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u02b3"+
    "\30\3\1\0\2\3\2\0\2\3\31\0\12\3\1\u02b4"+
    "\20\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u02b5"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u02b6"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u02b7"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u02b8"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\10\3\1\u02b9"+
    "\22\3\1\0\2\3\2\0\2\3\31\0\16\3\1\u02ba"+
    "\14\3\1\0\2\3\2\0\2\3\31\0\5\3\1\u02bb"+
    "\25\3\1\0\2\3\2\0\2\3\31\0\1\3\1\u02bc"+
    "\31\3\1\0\2\3\2\0\2\3\31\0\7\3\1\u02bd"+
    "\23\3\1\0\2\3\2\0\2\3\31\0\1\u02be\32\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u02bf\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\17\3\1\u02c0\13\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u02c1\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u02c2\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\u02c3\27\3\1\u02c4"+
    "\2\3\1\0\2\3\2\0\2\3\31\0\24\3\1\u02c5"+
    "\6\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u02c6"+
    "\30\3\1\0\2\3\2\0\2\3\31\0\20\3\1\u02c7"+
    "\12\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u02c8"+
    "\30\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u02c9"+
    "\30\3\1\0\2\3\2\0\2\3\31\0\1\u02ca\15\3"+
    "\1\u02cb\14\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u02cc\30\3\1\0\2\3\2\0\2\3\31\0\4\3"+
    "\1\u02cd\26\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u02ce\30\3\1\0\2\3\2\0\2\3\31\0\1\u02cf"+
    "\32\3\1\0\2\3\2\0\2\3\31\0\25\3\1\u02d0"+
    "\5\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u02d1"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\14\3\1\u02d2"+
    "\16\3\1\0\2\3\2\0\2\3\31\0\16\3\1\u02d3"+
    "\14\3\1\0\2\3\2\0\2\3\31\0\6\3\1\u02d4"+
    "\24\3\1\0\2\3\2\0\2\3\31\0\7\3\1\u02d5"+
    "\23\3\1\0\2\3\2\0\2\3\31\0\16\3\1\u02d6"+
    "\14\3\1\0\2\3\2\0\2\3\31\0\1\u02d7\32\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u02d8\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u02d9\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\u02da\32\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u02db\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\4\3\1\u02dc\26\3\1\0"+
    "\2\3\2\0\2\3\31\0\5\3\1\u02dd\25\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u02de\32\3\1\0\2\3"+
    "\2\0\2\3\31\0\16\3\1\u02df\14\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u02e0\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\16\3\1\u02e1\14\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\u02e2\26\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\u02e3\26\3\1\0\2\3"+
    "\2\0\2\3\31\0\27\3\1\u02e4\3\3\1\0\2\3"+
    "\2\0\2\3\31\0\6\3\1\u02e5\24\3\1\0\2\3"+
    "\2\0\2\3\31\0\14\3\1\u02e6\16\3\1\0\2\3"+
    "\2\0\2\3\31\0\20\3\1\u02e7\12\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\u02e8\26\3\1\0\2\3"+
    "\2\0\2\3\31\0\5\3\1\u02e9\25\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u02ea\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\22\3\1\u02eb\10\3\1\0\2\3"+
    "\2\0\2\3\31\0\14\3\1\u02ec\16\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u02ed\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\6\3\1\u02ee\24\3\1\0\2\3"+
    "\2\0\2\3\31\0\24\3\1\u02ef\6\3\1\0\2\3"+
    "\2\0\2\3\31\0\17\3\1\u02f0\13\3\1\0\2\3"+
    "\2\0\2\3\31\0\7\3\1\u02f1\23\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\u02f2\26\3\1\0\2\3"+
    "\2\0\2\3\31\0\3\3\1\u02f3\27\3\1\0\2\3"+
    "\2\0\2\3\31\0\11\3\1\u02f4\21\3\1\0\2\3"+
    "\2\0\2\3\31\0\5\3\1\u02f5\14\3\1\u02f6\10\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u02f7\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\14\3\1\u02f8\16\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u02f9\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u02fa\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u02fb\1\u02fc"+
    "\24\3\1\0\2\3\2\0\2\3\31\0\1\u02fd\32\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\3\1\u02fe\31\3"+
    "\1\0\2\3\2\0\2\3\31\0\17\3\1\u02ff\13\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u0300\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u0301\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u0302\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u0303\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u0304\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u0305\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u0306\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\7\3\1\u0307\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\25\3\1\u0308\5\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\3\1\u0309\31\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u030a\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u030b\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u030c\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\7\3\1\u030d\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u030e\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\u030f\17\3\1\u0310"+
    "\12\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u0311"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\1\u0312\32\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u0313\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0314\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0315\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\3\1\u0316\1\3"+
    "\1\u0317\1\3\1\u0318\24\3\1\u0319\1\0\2\3\2\0"+
    "\2\3\31\0\20\3\1\u031a\12\3\1\0\2\3\2\0"+
    "\2\3\31\0\5\3\1\u031b\25\3\1\0\2\3\2\0"+
    "\2\3\31\0\14\3\1\u031c\16\3\1\0\2\3\2\0"+
    "\2\3\31\0\7\3\1\u031d\23\3\1\0\2\3\2\0"+
    "\2\3\31\0\4\3\1\u031e\26\3\1\0\2\3\2\0"+
    "\2\3\31\0\13\3\1\u031f\17\3\1\0\2\3\2\0"+
    "\2\3\31\0\1\u0320\32\3\1\0\2\3\2\0\2\3"+
    "\31\0\12\3\1\u0321\20\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u0322\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\4\3\1\u0323\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\7\3\1\u0324\23\3\1\0\2\3\2\0\2\3"+
    "\31\0\12\3\1\u0325\20\3\1\0\2\3\2\0\2\3"+
    "\31\0\10\3\1\u0326\22\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u0327\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u0328\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u0329\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u032a\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\16\3\1\u032b\14\3\1\0\2\3\2\0\2\3"+
    "\31\0\12\3\1\u032c\20\3\1\0\2\3\2\0\2\3"+
    "\31\0\16\3\1\u032d\14\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u032e\30\3\1\0\2\3\1\0\3\u0185"+
    "\1\275\1\u0185\1\275\1\u0185\1\u0268\66\u0185\1\275\1\u0185"+
    "\1\275\1\u0185\1\274\1\u0269\62\u0185\6\0\1\u032f\1\u0330"+
    "\63\0\3\u026b\1\0\1\u026b\1\0\70\u026b\1\0\1\u026b"+
    "\1\0\1\70\67\u026b\1\0\1\u026b\1\0\2\u026b\1\71"+
    "\62\u026b\1\0\2\3\31\0\22\3\1\u0331\10\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u0332\32\3\1\0\2\3"+
    "\2\0\2\3\31\0\6\3\1\u0333\24\3\1\0\2\3"+
    "\2\0\2\3\31\0\5\3\1\u0334\25\3\1\0\2\3"+
    "\2\0\2\3\31\0\14\3\1\u0335\16\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\u0336\26\3\1\0\2\3"+
    "\2\0\2\3\31\0\1\u0337\32\3\1\0\2\3\2\0"+
    "\2\3\31\0\20\3\1\u0338\12\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\u0339\30\3\1\0\2\3\2\0"+
    "\2\3\31\0\7\3\1\u033a\23\3\1\0\2\3\2\0"+
    "\2\3\31\0\5\3\1\u033b\25\3\1\0\2\3\2\0"+
    "\2\3\31\0\5\3\1\u033c\25\3\1\0\2\3\2\0"+
    "\2\3\31\0\1\u033d\32\3\1\0\2\3\2\0\2\3"+
    "\31\0\16\3\1\u033e\14\3\1\0\2\3\2\0\2\3"+
    "\31\0\20\3\1\u033f\12\3\1\0\2\3\2\0\2\3"+
    "\31\0\16\3\1\u0340\14\3\1\0\2\3\2\0\2\3"+
    "\31\0\6\3\1\u0341\24\3\1\0\2\3\2\0\2\3"+
    "\31\0\6\3\1\u0342\24\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u0343\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\6\3\1\u0344\24\3\1\0\2\3\2\0\2\3"+
    "\31\0\4\3\1\u0345\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\6\3\1\u0346\24\3\1\0\2\3\2\0\2\3"+
    "\31\0\11\3\1\u0347\21\3\1\0\2\3\2\0\2\3"+
    "\31\0\4\3\1\u0348\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\17\3\1\u0349\13\3\1\0\2\3\2\0\2\3"+
    "\31\0\7\3\1\u034a\23\3\1\0\2\3\40\0\1\u034b"+
    "\34\0\2\3\31\0\2\3\1\u034c\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\17\3\1\u034d\13\3\1\0\2\3"+
    "\2\0\2\3\31\0\16\3\1\u034e\14\3\1\0\2\3"+
    "\2\0\2\3\31\0\5\3\1\u034f\25\3\1\0\2\3"+
    "\2\0\2\3\31\0\1\u0350\6\3\1\u0351\23\3\1\0"+
    "\2\3\2\0\2\3\31\0\16\3\1\u0352\14\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u0353\32\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u0354\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\20\3\1\u0355\12\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\u0356\26\3\1\0\2\3"+
    "\2\0\2\3\31\0\20\3\1\u0357\12\3\1\0\2\3"+
    "\2\0\2\3\31\0\1\u0358\32\3\1\0\2\3\2\0"+
    "\2\3\31\0\5\3\1\u0359\25\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\u035a\30\3\1\0\2\3\2\0"+
    "\2\3\31\0\6\3\1\u035b\24\3\1\0\2\3\2\0"+
    "\2\3\31\0\16\3\1\u035c\14\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\u035d\30\3\1\0\2\3\2\0"+
    "\2\3\31\0\10\3\1\u035e\22\3\1\0\2\3\2\0"+
    "\2\3\31\0\11\3\1\u035f\21\3\1\0\2\3\2\0"+
    "\2\3\31\0\16\3\1\u0360\14\3\1\0\2\3\2\0"+
    "\2\3\31\0\5\3\1\u0361\25\3\1\0\2\3\2\0"+
    "\2\3\31\0\4\3\1\u0362\26\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\u0363\30\3\1\0\2\3\2\0"+
    "\2\3\31\0\1\u0364\32\3\1\0\2\3\2\0\2\3"+
    "\31\0\14\3\1\u0365\16\3\1\0\2\3\2\0\2\3"+
    "\31\0\16\3\1\u0366\14\3\1\0\2\3\2\0\2\3"+
    "\31\0\1\u0367\32\3\1\0\2\3\2\0\2\3\31\0"+
    "\6\3\1\u0368\24\3\1\0\2\3\2\0\2\3\31\0"+
    "\10\3\1\u0369\22\3\1\0\2\3\2\0\2\3\31\0"+
    "\16\3\1\u036a\14\3\1\0\2\3\2\0\2\3\31\0"+
    "\14\3\1\u036b\16\3\1\0\2\3\2\0\2\3\31\0"+
    "\11\3\1\u036c\21\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\u036d\32\3\1\0\2\3\2\0\2\3\31\0\6\3"+
    "\1\u036e\24\3\1\0\2\3\2\0\2\3\31\0\20\3"+
    "\1\u036f\12\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u0370\30\3\1\0\2\3\2\0\2\3\31\0\16\3"+
    "\1\u0371\14\3\1\0\2\3\2\0\2\3\31\0\1\u0372"+
    "\32\3\1\0\2\3\2\0\2\3\31\0\22\3\1\u0373"+
    "\10\3\1\0\2\3\2\0\2\3\31\0\1\u0374\32\3"+
    "\1\0\2\3\2\0\2\3\31\0\20\3\1\u0375\12\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\3\1\u0376\31\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0377\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0378\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u0379\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\7\3\1\u037a\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\13\3\1\u037b\17\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u037c\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u037d\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\17\3\1\u037e\13\3"+
    "\1\0\2\3\2\0\2\3\31\0\17\3\1\u037f\13\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u0380\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u0381\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u0382\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u0383\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u0384\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0385\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u0386\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0387\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0388\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\22\3\1\u0389\10\3"+
    "\1\0\2\3\2\0\2\3\31\0\20\3\1\u038a\12\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\u038b\32\3\1\0"+
    "\2\3\2\0\2\3\31\0\7\3\1\u038c\23\3\1\0"+
    "\2\3\2\0\2\3\31\0\6\3\1\u038d\24\3\1\0"+
    "\2\3\2\0\2\3\31\0\17\3\1\u038e\13\3\1\0"+
    "\2\3\2\0\2\3\31\0\5\3\1\u038f\25\3\1\0"+
    "\2\3\2\0\2\3\31\0\5\3\1\u0390\25\3\1\0"+
    "\2\3\2\0\2\3\31\0\5\3\1\u0391\25\3\1\0"+
    "\2\3\2\0\2\3\31\0\7\3\1\u0392\23\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\3\1\u0393\31\3\1\0"+
    "\2\3\2\0\2\3\31\0\11\3\1\u0394\21\3\1\0"+
    "\2\3\2\0\2\3\31\0\16\3\1\u0395\14\3\1\0"+
    "\2\3\2\0\2\3\31\0\20\3\1\u0396\12\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u0397\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\26\3\1\u0398\4\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u0399\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\13\3\1\u039a\17\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u039b\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u039c\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u039d\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\16\3\1\u039e\14\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u039f\32\3\1\0\2\3"+
    "\2\0\2\3\31\0\17\3\1\u03a0\7\3\1\u03a1\3\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u03a2\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\3\1\u03a3\31\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\u03a4\32\3\1\0"+
    "\2\3\2\0\2\3\31\0\4\3\1\u03a5\26\3\1\0"+
    "\2\3\2\0\2\3\31\0\17\3\1\u03a6\13\3\1\0"+
    "\2\3\2\0\2\3\31\0\4\3\1\u03a7\26\3\1\0"+
    "\2\3\2\0\2\3\31\0\16\3\1\u03a8\14\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u03a9\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\4\3\1\u03aa\26\3\1\0"+
    "\2\3\2\0\2\3\31\0\20\3\1\u03ab\12\3\1\0"+
    "\2\3\2\0\2\3\31\0\16\3\1\u03ac\14\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\3\1\u03ad\31\3\1\0"+
    "\2\3\2\0\2\3\31\0\20\3\1\u03ae\12\3\1\0"+
    "\2\3\2\0\2\3\31\0\4\3\1\u03af\26\3\1\0"+
    "\2\3\2\0\2\3\31\0\17\3\1\u03b0\13\3\1\0"+
    "\2\3\2\0\2\3\31\0\7\3\1\u03b1\23\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u03b2\32\3\1\0\2\3"+
    "\2\0\2\3\31\0\20\3\1\u03b3\12\3\1\0\2\3"+
    "\2\0\2\3\31\0\5\3\1\u03b4\25\3\1\0\2\3"+
    "\2\0\2\3\31\0\25\3\1\u03b5\5\3\1\0\2\3"+
    "\2\0\2\3\31\0\16\3\1\u03b6\14\3\1\0\2\3"+
    "\2\0\2\3\31\0\5\3\1\u03b7\25\3\1\0\2\3"+
    "\2\0\2\3\31\0\1\3\1\u03b8\31\3\1\0\2\3"+
    "\2\0\2\3\31\0\1\u03b9\32\3\1\0\2\3\2\0"+
    "\2\3\31\0\5\3\1\u03ba\25\3\1\0\2\3\2\0"+
    "\2\3\31\0\4\3\1\u03bb\26\3\1\0\2\3\2\0"+
    "\2\3\31\0\30\3\1\u03bc\2\3\1\0\2\3\2\0"+
    "\2\3\31\0\1\u03bd\32\3\1\0\2\3\2\0\2\3"+
    "\31\0\25\3\1\u03be\5\3\1\0\2\3\2\0\2\3"+
    "\31\0\20\3\1\u03bf\12\3\1\0\2\3\2\0\2\3"+
    "\31\0\14\3\1\u03c0\16\3\1\0\2\3\2\0\2\3"+
    "\31\0\6\3\1\u03c1\24\3\1\0\2\3\2\0\2\3"+
    "\31\0\4\3\1\u03c2\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\1\u03c3\32\3\1\0\2\3\2\0\2\3\31\0"+
    "\7\3\1\u03c4\23\3\1\0\2\3\2\0\2\3\31\0"+
    "\2\3\1\u03c5\30\3\1\0\2\3\2\0\2\3\31\0"+
    "\2\3\1\u03c6\30\3\1\0\2\3\2\0\2\3\31\0"+
    "\20\3\1\u03c7\12\3\1\0\2\3\2\0\2\3\31\0"+
    "\4\3\1\u03c8\26\3\1\0\2\3\2\0\2\3\31\0"+
    "\27\3\1\u03c9\3\3\1\0\2\3\2\0\2\3\31\0"+
    "\6\3\1\u03ca\24\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\u03cb\32\3\1\0\2\3\2\0\2\3\31\0\6\3"+
    "\1\u03cc\24\3\1\0\2\3\2\0\2\3\31\0\17\3"+
    "\1\u03cd\13\3\1\0\2\3\11\0\1\275\63\0\2\3"+
    "\31\0\4\3\1\u03ce\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\16\3\1\u03cf\14\3\1\0\2\3\2\0\2\3"+
    "\31\0\4\3\1\u03d0\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\16\3\1\u03d1\14\3\1\0\2\3\2\0\2\3"+
    "\31\0\17\3\1\u03d2\13\3\1\0\2\3\2\0\2\3"+
    "\31\0\11\3\1\u03d3\21\3\1\0\2\3\2\0\2\3"+
    "\31\0\4\3\1\u03d4\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\1\u03d5\1\3\1\u03d6\30\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\u03d7\30\3\1\0\2\3\2\0"+
    "\2\3\31\0\7\3\1\u03d8\23\3\1\0\2\3\2\0"+
    "\2\3\31\0\13\3\1\u03d9\1\3\1\u03da\15\3\1\0"+
    "\2\3\2\0\2\3\31\0\17\3\1\u03db\13\3\1\0"+
    "\2\3\2\0\2\3\31\0\15\3\1\u03dc\15\3\1\0"+
    "\2\3\2\0\2\3\31\0\11\3\1\u03dd\21\3\1\0"+
    "\2\3\2\0\2\3\31\0\6\3\1\u03de\24\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u03df\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u03e0\32\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\u03e1\26\3\1\0\2\3"+
    "\2\0\2\3\31\0\16\3\1\u03e2\14\3\1\0\2\3"+
    "\37\0\1\u03e3\35\0\2\3\31\0\1\u03e4\32\3\1\0"+
    "\2\3\2\0\2\3\31\0\23\3\1\u03e5\7\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u03e6\32\3\1\0\2\3"+
    "\2\0\2\3\31\0\11\3\1\u03e7\21\3\1\0\2\3"+
    "\2\0\2\3\31\0\1\u03e8\32\3\1\0\2\3\2\0"+
    "\2\3\31\0\6\3\1\u03e9\24\3\1\0\2\3\2\0"+
    "\2\3\31\0\4\3\1\u03ea\26\3\1\0\2\3\2\0"+
    "\2\3\31\0\5\3\1\u03eb\25\3\1\0\2\3\2\0"+
    "\2\3\31\0\6\3\1\u03ec\24\3\1\0\2\3\2\0"+
    "\2\3\31\0\1\u03ed\32\3\1\0\2\3\2\0\2\3"+
    "\31\0\6\3\1\u03ee\24\3\1\0\2\3\2\0\2\3"+
    "\31\0\7\3\1\u03ef\23\3\1\0\2\3\2\0\2\3"+
    "\31\0\5\3\1\u03f0\25\3\1\0\2\3\2\0\2\3"+
    "\31\0\3\3\1\u03f1\27\3\1\0\2\3\2\0\2\3"+
    "\31\0\27\3\1\u03f2\3\3\1\0\2\3\2\0\2\3"+
    "\31\0\6\3\1\u03f3\24\3\1\0\2\3\2\0\2\3"+
    "\31\0\16\3\1\u03f4\14\3\1\0\2\3\2\0\2\3"+
    "\31\0\1\u03f5\32\3\1\0\2\3\2\0\2\3\31\0"+
    "\11\3\1\u03f6\21\3\1\0\2\3\2\0\2\3\31\0"+
    "\2\3\1\u03f7\30\3\1\0\2\3\2\0\2\3\31\0"+
    "\11\3\1\u03f8\21\3\1\0\2\3\2\0\2\3\31\0"+
    "\6\3\1\u03f9\24\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\3\1\u03fa\31\3\1\0\2\3\2\0\2\3\31\0"+
    "\7\3\1\u03fb\23\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\u03fc\32\3\1\0\2\3\2\0\2\3\31\0\11\3"+
    "\1\u03fd\21\3\1\0\2\3\2\0\2\3\31\0\17\3"+
    "\1\u03fe\13\3\1\0\2\3\2\0\2\3\31\0\24\3"+
    "\1\u03ff\6\3\1\0\2\3\2\0\2\3\31\0\22\3"+
    "\1\u0400\10\3\1\0\2\3\2\0\2\3\31\0\22\3"+
    "\1\u0401\10\3\1\0\2\3\2\0\2\3\31\0\3\3"+
    "\1\u0402\27\3\1\0\2\3\2\0\2\3\31\0\20\3"+
    "\1\u0403\12\3\1\0\2\3\2\0\2\3\31\0\11\3"+
    "\1\u0404\21\3\1\0\2\3\2\0\2\3\31\0\6\3"+
    "\1\u0405\24\3\1\0\2\3\2\0\2\3\31\0\6\3"+
    "\1\u0406\24\3\1\0\2\3\2\0\2\3\31\0\22\3"+
    "\1\u0407\10\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u0408\30\3\1\0\2\3\2\0\2\3\31\0\5\3"+
    "\1\u0409\25\3\1\0\2\3\2\0\2\3\31\0\4\3"+
    "\1\u040a\26\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u040b\30\3\1\0\2\3\2\0\2\3\31\0\20\3"+
    "\1\u040c\12\3\1\0\2\3\2\0\2\3\31\0\4\3"+
    "\1\u040d\26\3\1\0\2\3\2\0\2\3\31\0\11\3"+
    "\1\u040e\21\3\1\0\2\3\2\0\2\3\31\0\13\3"+
    "\1\u040f\17\3\1\0\2\3\2\0\2\3\31\0\6\3"+
    "\1\u0410\24\3\1\0\2\3\2\0\2\3\31\0\14\3"+
    "\1\u0411\16\3\1\0\2\3\2\0\2\3\31\0\4\3"+
    "\1\u0412\26\3\1\0\2\3\2\0\2\3\31\0\1\u0413"+
    "\32\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u0414"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u0415"+
    "\13\3\1\u0416\14\3\1\0\2\3\2\0\2\3\31\0"+
    "\2\3\1\u0417\30\3\1\0\2\3\2\0\2\3\31\0"+
    "\11\3\1\u0418\21\3\1\0\2\3\2\0\2\3\31\0"+
    "\7\3\1\u0419\23\3\1\0\2\3\2\0\2\3\31\0"+
    "\4\3\1\u041a\26\3\1\0\2\3\2\0\2\3\31\0"+
    "\16\3\1\u041b\14\3\1\0\2\3\2\0\2\3\31\0"+
    "\2\3\1\u041c\30\3\1\0\2\3\2\0\2\3\31\0"+
    "\27\3\1\u041d\3\3\1\0\2\3\2\0\2\3\31\0"+
    "\21\3\1\u041e\11\3\1\0\2\3\2\0\2\3\31\0"+
    "\2\3\1\u041f\30\3\1\0\2\3\2\0\2\3\31\0"+
    "\14\3\1\u0420\16\3\1\0\2\3\2\0\2\3\31\0"+
    "\20\3\1\u0421\12\3\1\0\2\3\2\0\2\3\31\0"+
    "\4\3\1\u0422\26\3\1\0\2\3\2\0\2\3\31\0"+
    "\6\3\1\u0423\24\3\1\0\2\3\2\0\2\3\31\0"+
    "\4\3\1\u0424\26\3\1\0\2\3\2\0\2\3\31\0"+
    "\6\3\1\u0425\24\3\1\0\2\3\2\0\2\3\31\0"+
    "\6\3\1\u0426\24\3\1\0\2\3\2\0\2\3\31\0"+
    "\4\3\1\u0427\26\3\1\0\2\3\2\0\2\3\31\0"+
    "\4\3\1\u0428\26\3\1\0\2\3\2\0\2\3\31\0"+
    "\2\3\1\u0429\30\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\u042a\32\3\1\0\2\3\2\0\2\3\31\0\5\3"+
    "\1\u042b\25\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u042c\30\3\1\0\2\3\2\0\2\3\31\0\7\3"+
    "\1\u042d\23\3\1\0\2\3\2\0\2\3\31\0\16\3"+
    "\1\u042e\14\3\1\0\2\3\2\0\2\3\31\0\16\3"+
    "\1\u042f\14\3\1\0\2\3\2\0\2\3\31\0\1\u0430"+
    "\32\3\1\0\2\3\2\0\2\3\31\0\5\3\1\u0431"+
    "\25\3\1\0\2\3\2\0\2\3\31\0\6\3\1\u0432"+
    "\24\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u0433"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\6\3\1\u0434"+
    "\24\3\1\0\2\3\2\0\2\3\31\0\16\3\1\u0435"+
    "\14\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u0436"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\26\3\1\u0437"+
    "\4\3\1\0\2\3\2\0\2\3\31\0\16\3\1\u0438"+
    "\14\3\1\0\2\3\2\0\2\3\31\0\30\3\1\u0439"+
    "\2\3\1\0\2\3\2\0\2\3\31\0\6\3\1\u043a"+
    "\24\3\1\0\2\3\2\0\2\3\31\0\20\3\1\u043b"+
    "\12\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u043c"+
    "\30\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u043d"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\6\3\1\u043e"+
    "\24\3\1\0\2\3\2\0\2\3\31\0\17\3\1\u043f"+
    "\13\3\1\0\2\3\2\0\2\3\31\0\7\3\1\u0440"+
    "\23\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u0441"+
    "\26\3\1\0\2\3\2\0\2\3\31\0\7\3\1\u0442"+
    "\23\3\1\0\2\3\2\0\2\3\31\0\26\3\1\u0443"+
    "\4\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u0444"+
    "\30\3\1\0\2\3\2\0\2\3\31\0\13\3\1\u0445"+
    "\17\3\1\0\2\3\2\0\2\3\31\0\5\3\1\u0446"+
    "\25\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u0447"+
    "\30\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u0448"+
    "\30\3\1\0\2\3\2\0\2\3\31\0\33\3\1\u0449"+
    "\2\3\2\0\2\3\31\0\5\3\1\u044a\25\3\1\0"+
    "\2\3\2\0\2\3\31\0\22\3\1\u044b\10\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u044c\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\23\3\1\u044d\7\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u044e\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\20\3\1\u044f\12\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u0450\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u0451\32\3\1\0\2\3"+
    "\2\0\2\3\31\0\15\3\1\u0452\15\3\1\0\2\3"+
    "\2\0\2\3\31\0\1\3\1\u0453\31\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\u0454\26\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u0455\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\u0456\26\3\1\0\2\3"+
    "\2\0\2\3\31\0\14\3\1\u0457\16\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\u0458\26\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u0459\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\7\3\1\u045a\23\3\1\0\2\3"+
    "\2\0\2\3\31\0\20\3\1\u045b\12\3\1\0\2\3"+
    "\46\0\1\u045c\26\0\2\3\31\0\25\3\1\u045d\5\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u045e\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u045f\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0460\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0461\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\22\3\1\u0462\10\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0463\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\27\3\1\u0464\3\3"+
    "\1\0\2\3\2\0\2\3\31\0\25\3\1\u0465\5\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0466\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\20\3\1\u0467\12\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0468\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0469\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u046a\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\22\3\1\u046b\10\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u046c\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u046d\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\24\3\1\u046e\6\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u046f\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u0470\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\7\3\1\u0471\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0472\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0473\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0474\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u0475\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0476\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\3\1\u0477\31\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0478\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0479\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u047a\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u047b\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\30\3\1\u047c\2\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u047d\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\20\3\1\u047e\12\3"+
    "\1\0\2\3\2\0\2\3\31\0\17\3\1\u047f\13\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0480\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u0481\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u0482\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\20\3\1\u0483\12\3"+
    "\1\0\2\3\2\0\2\3\31\0\24\3\1\u0484\6\3"+
    "\1\0\2\3\2\0\2\3\31\0\20\3\1\u0485\12\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0486\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\22\3\1\u0487\10\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u0488\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u0489\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u048a\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\22\3\1\u048b\10\3"+
    "\1\0\2\3\2\0\2\3\31\0\21\3\1\u048c\11\3"+
    "\1\0\2\3\2\0\2\3\31\0\20\3\1\u048d\12\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u048e\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\7\3\1\u048f\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\7\3\1\u0490\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0491\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\20\3\1\u0492\12\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0493\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\21\3\1\u0494\11\3"+
    "\1\0\2\3\2\0\2\3\31\0\30\3\1\u0495\2\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u0496\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u0497\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u0498\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u0499\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\14\3\1\u049a\16\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u049b\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u049c\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u049d\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u049e\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u049f\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\u04a0\32\3\1\0"+
    "\2\3\2\0\2\3\31\0\17\3\1\u04a1\13\3\1\0"+
    "\2\3\2\0\2\3\31\0\5\3\1\u04a2\25\3\1\0"+
    "\2\3\2\0\2\3\31\0\17\3\1\u04a3\13\3\1\0"+
    "\2\3\2\0\2\3\31\0\3\3\1\u04a4\27\3\1\0"+
    "\2\3\2\0\2\3\31\0\5\3\1\u04a5\25\3\1\0"+
    "\2\3\57\0\1\u04a6\15\0\2\3\31\0\1\u04a7\32\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u04a8\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u04a9\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\7\3\1\u04aa\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\20\3\1\u04ab\12\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u04ac\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u04ad\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u04ae\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u04af\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\13\3\1\u04b0\17\3"+
    "\1\0\2\3\2\0\2\3\31\0\21\3\1\u04b1\11\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u04b2\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u04b3\13\3"+
    "\1\u04b4\14\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u04b5\30\3\1\0\2\3\2\0\2\3\31\0\13\3"+
    "\1\u04b6\17\3\1\0\2\3\2\0\2\3\31\0\30\3"+
    "\1\u04b7\2\3\1\0\2\3\2\0\2\3\31\0\5\3"+
    "\1\u04b8\25\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u04b9\30\3\1\0\2\3\2\0\2\3\31\0\14\3"+
    "\1\u04ba\16\3\1\0\2\3\2\0\2\3\31\0\16\3"+
    "\1\u04bb\14\3\1\0\2\3\2\0\2\3\31\0\20\3"+
    "\1\u04bc\12\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u04bd\30\3\1\0\2\3\2\0\2\3\31\0\4\3"+
    "\1\u04be\26\3\1\0\2\3\2\0\2\3\31\0\20\3"+
    "\1\u04bf\12\3\1\0\2\3\2\0\2\3\31\0\1\3"+
    "\1\u04c0\31\3\1\0\2\3\2\0\2\3\31\0\5\3"+
    "\1\u04c1\25\3\1\0\2\3\2\0\2\3\31\0\22\3"+
    "\1\u04c2\10\3\1\0\2\3\2\0\2\3\31\0\6\3"+
    "\1\u04c3\24\3\1\0\2\3\2\0\2\3\31\0\1\3"+
    "\1\u04c4\2\3\1\u04c5\7\3\1\u04c6\16\3\1\0\2\3"+
    "\2\0\2\3\31\0\6\3\1\u04c7\24\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\u04c8\26\3\1\0\2\3"+
    "\2\0\2\3\31\0\20\3\1\u04c9\12\3\1\0\2\3"+
    "\2\0\2\3\31\0\6\3\1\u04ca\24\3\1\0\2\3"+
    "\2\0\2\3\31\0\6\3\1\u04cb\24\3\1\0\2\3"+
    "\2\0\2\3\31\0\6\3\1\u04cc\24\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u04cd\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u04ce\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\3\3\1\u04cf\27\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\u04d0\26\3\1\0\2\3"+
    "\2\0\2\3\31\0\11\3\1\u04d1\16\3\1\u04d2\2\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u04d3\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u04d4\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\21\3\1\u04d5\11\3"+
    "\1\0\2\3\2\0\2\3\31\0\16\3\1\u04d6\14\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u04d7\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u04d8\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\u04d9\32\3\1\0"+
    "\2\3\2\0\2\3\31\0\14\3\1\u04da\16\3\1\0"+
    "\2\3\2\0\2\3\31\0\17\3\1\u04db\4\3\1\u04dc"+
    "\6\3\1\0\2\3\2\0\2\3\31\0\11\3\1\u04dd"+
    "\21\3\1\0\2\3\2\0\2\3\31\0\22\3\1\u04de"+
    "\10\3\1\0\2\3\2\0\2\3\31\0\17\3\1\u04df"+
    "\13\3\1\0\2\3\2\0\2\3\31\0\6\3\1\u04e0"+
    "\24\3\1\0\2\3\2\0\2\3\31\0\6\3\1\u04e1"+
    "\24\3\1\0\2\3\2\0\2\3\31\0\17\3\1\u04e2"+
    "\13\3\1\0\2\3\2\0\2\3\31\0\2\3\1\u04e3"+
    "\30\3\1\0\2\3\2\0\2\3\31\0\21\3\1\u04e4"+
    "\11\3\1\0\2\3\2\0\2\3\31\0\4\3\1\u04e5"+
    "\26\3\1\0\2\3\42\0\1\u04e6\32\0\2\3\31\0"+
    "\4\3\1\u04e7\26\3\1\0\2\3\2\0\2\3\31\0"+
    "\2\3\1\u04e8\30\3\1\0\2\3\2\0\2\3\31\0"+
    "\2\3\1\u04e9\30\3\1\0\2\3\2\0\2\3\31\0"+
    "\5\3\1\u04ea\25\3\1\0\2\3\2\0\2\3\31\0"+
    "\11\3\1\u04eb\21\3\1\0\2\3\2\0\2\3\31\0"+
    "\2\3\1\u04ec\30\3\1\0\2\3\2\0\2\3\31\0"+
    "\4\3\1\u04ed\26\3\1\0\2\3\2\0\2\3\31\0"+
    "\7\3\1\u04ee\23\3\1\0\2\3\2\0\2\3\31\0"+
    "\20\3\1\u04ef\12\3\1\0\2\3\2\0\2\3\31\0"+
    "\20\3\1\u04f0\12\3\1\0\2\3\2\0\2\3\31\0"+
    "\5\3\1\u04f1\25\3\1\0\2\3\2\0\2\3\31\0"+
    "\12\3\1\u04f2\12\3\1\u04f3\5\3\1\0\2\3\2\0"+
    "\2\3\31\0\17\3\1\u04f4\13\3\1\0\2\3\2\0"+
    "\2\3\31\0\5\3\1\u04f5\25\3\1\0\2\3\2\0"+
    "\2\3\31\0\20\3\1\u04f6\12\3\1\0\2\3\2\0"+
    "\2\3\31\0\7\3\1\u04f7\23\3\1\0\2\3\2\0"+
    "\2\3\31\0\5\3\1\u04f8\25\3\1\0\2\3\2\0"+
    "\2\3\31\0\1\u04f9\32\3\1\0\2\3\2\0\2\3"+
    "\31\0\5\3\1\u04fa\25\3\1\0\2\3\2\0\2\3"+
    "\31\0\30\3\1\u04fb\2\3\1\0\2\3\2\0\2\3"+
    "\31\0\4\3\1\u04fc\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\4\3\1\u04fd\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\1\u04fe\32\3\1\0\2\3\2\0\2\3\31\0"+
    "\16\3\1\u04ff\14\3\1\0\2\3\2\0\2\3\31\0"+
    "\17\3\1\u0500\13\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\3\1\u0501\31\3\1\0\2\3\2\0\2\3\31\0"+
    "\1\u0502\32\3\1\0\2\3\2\0\2\3\31\0\6\3"+
    "\1\u0503\24\3\1\0\2\3\2\0\2\3\31\0\4\3"+
    "\1\u0504\26\3\1\0\2\3\2\0\2\3\31\0\17\3"+
    "\1\u0505\13\3\1\0\2\3\2\0\2\3\31\0\4\3"+
    "\1\u0506\26\3\1\0\2\3\2\0\2\3\31\0\12\3"+
    "\1\u0507\20\3\1\0\2\3\2\0\2\3\31\0\20\3"+
    "\1\u0508\12\3\1\0\2\3\2\0\2\3\31\0\16\3"+
    "\1\u0509\14\3\1\0\2\3\2\0\2\3\31\0\27\3"+
    "\1\u050a\3\3\1\0\2\3\2\0\2\3\31\0\14\3"+
    "\1\u050b\16\3\1\0\2\3\2\0\2\3\31\0\17\3"+
    "\1\u050c\13\3\1\0\2\3\2\0\2\3\31\0\16\3"+
    "\1\u050d\14\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u050e\30\3\1\0\2\3\2\0\2\3\31\0\17\3"+
    "\1\u050f\13\3\1\0\2\3\2\0\2\3\31\0\2\3"+
    "\1\u0510\30\3\1\0\2\3\2\0\2\3\31\0\22\3"+
    "\1\u0511\10\3\1\0\2\3\2\0\2\3\31\0\22\3"+
    "\1\u0512\10\3\1\0\2\3\2\0\2\3\31\0\20\3"+
    "\1\u0513\12\3\1\0\2\3\2\0\2\3\31\0\4\3"+
    "\1\u0514\26\3\1\0\2\3\55\0\1\u0515\17\0\2\3"+
    "\31\0\16\3\1\u0516\14\3\1\0\2\3\2\0\2\3"+
    "\31\0\17\3\1\u0517\13\3\1\0\2\3\2\0\2\3"+
    "\31\0\1\3\1\u0518\31\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u0519\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\6\3\1\u051a\24\3\1\0\2\3\2\0\2\3"+
    "\31\0\6\3\1\u051b\24\3\1\0\2\3\2\0\2\3"+
    "\31\0\4\3\1\u051c\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\20\3\1\u051d\12\3\1\0\2\3\2\0\2\3"+
    "\31\0\16\3\1\u051e\14\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u051f\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\6\3\1\u0520\24\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u0521\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\15\3\1\u0522\15\3\1\0\2\3\2\0\2\3"+
    "\31\0\7\3\1\u0523\23\3\1\0\2\3\2\0\2\3"+
    "\31\0\12\3\1\u0524\20\3\1\0\2\3\2\0\2\3"+
    "\31\0\4\3\1\u0525\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\25\3\1\u0526\5\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u0527\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\16\3\1\u0528\14\3\1\0\2\3\2\0\2\3"+
    "\31\0\15\3\1\u0529\15\3\1\0\2\3\2\0\2\3"+
    "\31\0\17\3\1\u052a\13\3\1\0\2\3\2\0\2\3"+
    "\31\0\7\3\1\u052b\23\3\1\0\2\3\2\0\2\3"+
    "\31\0\6\3\1\u052c\24\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u052d\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\1\3\1\u052e\31\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u052f\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\25\3\1\u0530\5\3\1\0\2\3\2\0\2\3"+
    "\31\0\21\3\1\u0531\11\3\1\0\2\3\2\0\2\3"+
    "\31\0\5\3\1\u0532\25\3\1\0\2\3\2\0\2\3"+
    "\31\0\4\3\1\u0533\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\14\3\1\u0534\16\3\1\0\2\3\51\0\1\u0535"+
    "\23\0\2\3\31\0\20\3\1\u0536\12\3\1\0\2\3"+
    "\2\0\2\3\31\0\14\3\1\u0537\16\3\1\0\2\3"+
    "\2\0\2\3\31\0\6\3\1\u0538\24\3\1\0\2\3"+
    "\2\0\2\3\31\0\1\3\1\u0539\31\3\1\0\2\3"+
    "\2\0\2\3\31\0\7\3\1\u053a\23\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u053b\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u053c\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u053d\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\5\3\1\u053e\25\3\1\0\2\3"+
    "\2\0\2\3\31\0\6\3\1\u053f\24\3\1\0\2\3"+
    "\2\0\2\3\31\0\7\3\1\u0540\23\3\1\0\2\3"+
    "\2\0\2\3\31\0\17\3\1\u0541\13\3\1\0\2\3"+
    "\2\0\2\3\31\0\16\3\1\u0542\14\3\1\0\2\3"+
    "\2\0\2\3\31\0\5\3\1\u0543\25\3\1\0\2\3"+
    "\2\0\2\3\31\0\16\3\1\u0544\14\3\1\0\2\3"+
    "\2\0\2\3\31\0\13\3\1\u0545\17\3\1\0\2\3"+
    "\2\0\2\3\31\0\12\3\1\u0546\20\3\1\0\2\3"+
    "\2\0\2\3\31\0\5\3\1\u0547\25\3\1\0\2\3"+
    "\50\0\1\u0548\24\0\2\3\31\0\6\3\1\u0549\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u054a\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\14\3\1\u054b\16\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u054c\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\6\3\1\u054d\24\3"+
    "\1\0\2\3\2\0\2\3\31\0\17\3\1\u054e\13\3"+
    "\1\0\2\3\2\0\2\3\31\0\22\3\1\u054f\10\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0550\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\2\3\1\u0551\30\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0552\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\7\3\1\u0553\23\3"+
    "\1\0\2\3\2\0\2\3\31\0\12\3\1\u0554\20\3"+
    "\1\0\2\3\2\0\2\3\31\0\11\3\1\u0555\21\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0556\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\22\3\1\u0557\10\3"+
    "\1\0\2\3\2\0\2\3\31\0\4\3\1\u0558\26\3"+
    "\1\0\2\3\2\0\2\3\31\0\5\3\1\u0559\25\3"+
    "\1\0\2\3\2\0\2\3\31\0\1\u055a\32\3\1\0"+
    "\2\3\2\0\2\3\31\0\5\3\1\u055b\25\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u055c\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\2\3\1\u055d\30\3\1\0"+
    "\2\3\2\0\2\3\31\0\4\3\1\u055e\26\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u055f\32\3\1\0\2\3"+
    "\2\0\2\3\31\0\4\3\1\u0560\26\3\1\0\2\3"+
    "\2\0\2\3\31\0\5\3\1\u0561\25\3\1\0\2\3"+
    "\2\0\2\3\31\0\1\u0562\32\3\1\0\2\3\2\0"+
    "\2\3\31\0\12\3\1\u0563\20\3\1\0\2\3\2\0"+
    "\2\3\31\0\25\3\1\u0564\5\3\1\0\2\3\2\0"+
    "\2\3\31\0\16\3\1\u0565\14\3\1\0\2\3\2\0"+
    "\2\3\31\0\17\3\1\u0566\13\3\1\0\2\3\2\0"+
    "\2\3\31\0\13\3\1\u0567\17\3\1\0\2\3\2\0"+
    "\2\3\31\0\4\3\1\u0568\26\3\1\0\2\3\2\0"+
    "\2\3\31\0\2\3\1\u0569\30\3\1\0\2\3\2\0"+
    "\2\3\31\0\21\3\1\u056a\11\3\1\0\2\3\2\0"+
    "\2\3\31\0\4\3\1\u056b\26\3\1\0\2\3\2\0"+
    "\2\3\31\0\1\3\1\u056c\2\3\1\u056d\26\3\1\0"+
    "\2\3\2\0\2\3\31\0\1\u056e\32\3\1\0\2\3"+
    "\2\0\2\3\31\0\2\3\1\u056f\30\3\1\0\2\3"+
    "\2\0\2\3\31\0\1\u0570\32\3\1\0\2\3\2\0"+
    "\2\3\31\0\15\3\1\u0571\15\3\1\0\2\3\2\0"+
    "\2\3\31\0\4\3\1\u0572\26\3\1\0\2\3\2\0"+
    "\2\3\31\0\15\3\1\u0573\15\3\1\0\2\3\2\0"+
    "\2\3\31\0\7\3\1\u0574\23\3\1\0\2\3\2\0"+
    "\2\3\31\0\1\u0575\32\3\1\0\2\3\2\0\2\3"+
    "\31\0\7\3\1\u0576\23\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u0577\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\16\3\1\u0578\14\3\1\0\2\3\2\0\2\3"+
    "\31\0\2\3\1\u0579\30\3\1\0\2\3\2\0\2\3"+
    "\31\0\7\3\1\u057a\23\3\1\0\2\3\2\0\2\3"+
    "\31\0\17\3\1\u057b\13\3\1\0\2\3\2\0\2\3"+
    "\31\0\4\3\1\u057c\26\3\1\0\2\3\2\0\2\3"+
    "\31\0\1\u057d\32\3\1\0\2\3\2\0\2\3\31\0"+
    "\15\3\1\u057e\15\3\1\0\2\3\2\0\2\3\31\0"+
    "\7\3\1\u057f\23\3\1\0\2\3\2\0\2\3\31\0"+
    "\2\3\1\u0580\30\3\1\0\2\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[66080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\3\11\6\1\3\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\33\1\1\11\2\1\12\11"+
    "\167\1\1\0\1\1\1\0\306\1\1\0\1\1\1\0"+
    "\42\1\1\0\337\1\1\0\245\1\2\0\32\1\1\0"+
    "\227\1\1\0\145\1\1\0\22\1\1\11\111\1\1\0"+
    "\77\1\1\0\56\1\1\0\37\1\1\0\22\1\1\11"+
    "\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1408];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  public String foundLine;
  public int line;
  public int columnSt;
  public int columnNd;  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ERROR;
            } 
            // fall through
          case 349: break;
          case 2: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength()-1; return IDENTIFICADOR;
            } 
            // fall through
          case 350: break;
          case 3: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength()-1; return CONSTANTE_ENTERA;
            } 
            // fall through
          case 351: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 352: break;
          case 5: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RESTA;
            } 
            // fall through
          case 353: break;
          case 6: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DIVISION;
            } 
            // fall through
          case 354: break;
          case 7: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MULTIPLICACION;
            } 
            // fall through
          case 355: break;
          case 8: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SUMA;
            } 
            // fall through
          case 356: break;
          case 9: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MOD;
            } 
            // fall through
          case 357: break;
          case 10: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MENOR;
            } 
            // fall through
          case 358: break;
          case 11: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ASIGNACION;
            } 
            // fall through
          case 359: break;
          case 12: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MAYOR;
            } 
            // fall through
          case 360: break;
          case 13: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXCLAMACION;
            } 
            // fall through
          case 361: break;
          case 14: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength()-1; return CONSTANTE_BOOLEANA;
            } 
            // fall through
          case 362: break;
          case 15: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PUNTO_COMA;
            } 
            // fall through
          case 363: break;
          case 16: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COMA;
            } 
            // fall through
          case 364: break;
          case 17: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PUNTO;
            } 
            // fall through
          case 365: break;
          case 18: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CORCHETEA;
            } 
            // fall through
          case 366: break;
          case 19: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CORCHETEC;
            } 
            // fall through
          case 367: break;
          case 20: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PARENTESISA;
            } 
            // fall through
          case 368: break;
          case 21: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PARENTESISC;
            } 
            // fall through
          case 369: break;
          case 22: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LLAVEA;
            } 
            // fall through
          case 370: break;
          case 23: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LLAVEC;
            } 
            // fall through
          case 371: break;
          case 24: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ARROBA;
            } 
            // fall through
          case 372: break;
          case 25: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NUMERAL;
            } 
            // fall through
          case 373: break;
          case 26: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONSTANTE_DECIMAL;
            } 
            // fall through
          case 374: break;
          case 27: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength()-1; return CADENA;
            } 
            // fall through
          case 375: break;
          case 28: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MENOR_IGUAL;
            } 
            // fall through
          case 376: break;
          case 29: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IGUALACION;
            } 
            // fall through
          case 377: break;
          case 30: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MAYOR_IGUAL;
            } 
            // fall through
          case 378: break;
          case 31: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DIFERENCIA;
            } 
            // fall through
          case 379: break;
          case 32: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return AND;
            } 
            // fall through
          case 380: break;
          case 33: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OR;
            } 
            // fall through
          case 381: break;
          case 34: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CORCHETES;
            } 
            // fall through
          case 382: break;
          case 35: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PARENTESIS;
            } 
            // fall through
          case 383: break;
          case 36: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LLAVES;
            } 
            // fall through
          case 384: break;
          case 37: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NUMERALES;
            } 
            // fall through
          case 385: break;
          case 38: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return AT;
            } 
            // fall through
          case 386: break;
          case 39: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return AS;
            } 
            // fall through
          case 387: break;
          case 40: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TO;
            } 
            // fall through
          case 388: break;
          case 41: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NO;
            } 
            // fall through
          case 389: break;
          case 42: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BY;
            } 
            // fall through
          case 390: break;
          case 43: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IN;
            } 
            // fall through
          case 391: break;
          case 44: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IF;
            } 
            // fall through
          case 392: break;
          case 45: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IS;
            } 
            // fall through
          case 393: break;
          case 46: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ON;
            } 
            // fall through
          case 394: break;
          case 47: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OF;
            } 
            // fall through
          case 395: break;
          case 48: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return GO;
            } 
            // fall through
          case 396: break;
          case 49: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ADA;
            } 
            // fall through
          case 397: break;
          case 50: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ADD;
            } 
            // fall through
          case 398: break;
          case 51: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ARE;
            } 
            // fall through
          case 399: break;
          case 52: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ANY;
            } 
            // fall through
          case 400: break;
          case 53: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ALL;
            } 
            // fall through
          case 401: break;
          case 54: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ASC;
            } 
            // fall through
          case 402: break;
          case 55: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return AVG;
            } 
            // fall through
          case 403: break;
          case 56: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DAY;
            } 
            // fall through
          case 404: break;
          case 57: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DEC;
            } 
            // fall through
          case 405: break;
          case 58: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return END;
            } 
            // fall through
          case 406: break;
          case 59: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TOP;
            } 
            // fall through
          case 407: break;
          case 60: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NOT;
            } 
            // fall through
          case 408: break;
          case 61: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FOR;
            } 
            // fall through
          case 409: break;
          case 62: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PAD;
            } 
            // fall through
          case 410: break;
          case 63: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return USE;
            } 
            // fall through
          case 411: break;
          case 64: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BIT;
            } 
            // fall through
          case 412: break;
          case 65: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INT;
            } 
            // fall through
          case 413: break;
          case 66: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SET;
            } 
            // fall through
          case 414: break;
          case 67: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SUM;
            } 
            // fall through
          case 415: break;
          case 68: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SQL;
            } 
            // fall through
          case 416: break;
          case 69: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OFF;
            } 
            // fall through
          case 417: break;
          case 70: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return GET;
            } 
            // fall through
          case 418: break;
          case 71: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return KEY;
            } 
            // fall through
          case 419: break;
          case 72: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MAX;
            } 
            // fall through
          case 420: break;
          case 73: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MIN;
            } 
            // fall through
          case 421: break;
          case 74: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DATE;
            } 
            // fall through
          case 422: break;
          case 75: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DENY;
            } 
            // fall through
          case 423: break;
          case 76: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DESC;
            } 
            // fall through
          case 424: break;
          case 77: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DROP;
            } 
            // fall through
          case 425: break;
          case 78: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DUMP;
            } 
            // fall through
          case 426: break;
          case 79: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DBCC;
            } 
            // fall through
          case 427: break;
          case 80: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DISK;
            } 
            // fall through
          case 428: break;
          case 81: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXEC;
            } 
            // fall through
          case 429: break;
          case 82: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXIT;
            } 
            // fall through
          case 430: break;
          case 83: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ELSE;
            } 
            // fall through
          case 431: break;
          case 84: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRAN;
            } 
            // fall through
          case 432: break;
          case 85: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRUE;
            } 
            // fall through
          case 433: break;
          case 86: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRIM;
            } 
            // fall through
          case 434: break;
          case 87: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return THEN;
            } 
            // fall through
          case 435: break;
          case 88: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TIME;
            } 
            // fall through
          case 436: break;
          case 89: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return READ;
            } 
            // fall through
          case 437: break;
          case 90: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return REAL;
            } 
            // fall through
          case 438: break;
          case 91: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RULE;
            } 
            // fall through
          case 439: break;
          case 92: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ROWS;
            } 
            // fall through
          case 440: break;
          case 93: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NEXT;
            } 
            // fall through
          case 441: break;
          case 94: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NULL;
            } 
            // fall through
          case 442: break;
          case 95: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NONE;
            } 
            // fall through
          case 443: break;
          case 96: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LAST;
            } 
            // fall through
          case 444: break;
          case 97: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LEFT;
            } 
            // fall through
          case 445: break;
          case 98: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LIKE;
            } 
            // fall through
          case 446: break;
          case 99: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LOAD;
            } 
            // fall through
          case 447: break;
          case 100: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FROM;
            } 
            // fall through
          case 448: break;
          case 101: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FULL;
            } 
            // fall through
          case 449: break;
          case 102: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FILE;
            } 
            // fall through
          case 450: break;
          case 103: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CASE;
            } 
            // fall through
          case 451: break;
          case 104: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CAST;
            } 
            // fall through
          case 452: break;
          case 105: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CHAR;
            } 
            // fall through
          case 453: break;
          case 106: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return HOUR;
            } 
            // fall through
          case 454: break;
          case 107: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PROC;
            } 
            // fall through
          case 455: break;
          case 108: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PLAN;
            } 
            // fall through
          case 456: break;
          case 109: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return USER;
            } 
            // fall through
          case 457: break;
          case 110: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BULK;
            } 
            // fall through
          case 458: break;
          case 111: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BOTH;
            } 
            // fall through
          case 459: break;
          case 112: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INTO;
            } 
            // fall through
          case 460: break;
          case 113: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SAVE;
            } 
            // fall through
          case 461: break;
          case 114: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SIZE;
            } 
            // fall through
          case 462: break;
          case 115: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SOME;
            } 
            // fall through
          case 463: break;
          case 116: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ONLY;
            } 
            // fall through
          case 464: break;
          case 117: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OPEN;
            } 
            // fall through
          case 465: break;
          case 118: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OVER;
            } 
            // fall through
          case 466: break;
          case 119: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return YEAR;
            } 
            // fall through
          case 467: break;
          case 120: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return GOTO;
            } 
            // fall through
          case 468: break;
          case 121: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ZONE;
            } 
            // fall through
          case 469: break;
          case 122: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return KILL;
            } 
            // fall through
          case 470: break;
          case 123: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WHEN;
            } 
            // fall through
          case 471: break;
          case 124: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WITH;
            } 
            // fall through
          case 472: break;
          case 125: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WORK;
            } 
            // fall through
          case 473: break;
          case 126: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return VIEW;
            } 
            // fall through
          case 474: break;
          case 127: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return JOIN;
            } 
            // fall through
          case 475: break;
          case 128: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ALTER;
            } 
            // fall through
          case 476: break;
          case 129: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TABLE;
            } 
            // fall through
          case 477: break;
          case 130: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RIGHT;
            } 
            // fall through
          case 478: break;
          case 131: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NAMES;
            } 
            // fall through
          case 479: break;
          case 132: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NCHAR;
            } 
            // fall through
          case 480: break;
          case 133: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LEVEL;
            } 
            // fall through
          case 481: break;
          case 134: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LOCAL;
            } 
            // fall through
          case 482: break;
          case 135: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LOWER;
            } 
            // fall through
          case 483: break;
          case 136: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FALSE;
            } 
            // fall through
          case 484: break;
          case 137: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FETCH;
            } 
            // fall through
          case 485: break;
          case 138: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FLOAT;
            } 
            // fall through
          case 486: break;
          case 139: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FIRST;
            } 
            // fall through
          case 487: break;
          case 140: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FOUND;
            } 
            // fall through
          case 488: break;
          case 141: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CROSS;
            } 
            // fall through
          case 489: break;
          case 142: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CLOSE;
            } 
            // fall through
          case 490: break;
          case 143: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CHECK;
            } 
            // fall through
          case 491: break;
          case 144: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COUNT;
            } 
            // fall through
          case 492: break;
          case 145: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PRINT;
            } 
            // fall through
          case 493: break;
          case 146: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PRIOR;
            } 
            // fall through
          case 494: break;
          case 147: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PIVOT;
            } 
            // fall through
          case 495: break;
          case 148: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return UNION;
            } 
            // fall through
          case 496: break;
          case 149: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return UPPER;
            } 
            // fall through
          case 497: break;
          case 150: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return USAGE;
            } 
            // fall through
          case 498: break;
          case 151: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return USING;
            } 
            // fall through
          case 499: break;
          case 152: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BEGIN;
            } 
            // fall through
          case 500: break;
          case 153: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BREAK;
            } 
            // fall through
          case 501: break;
          case 154: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INDEX;
            } 
            // fall through
          case 502: break;
          case 155: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INNER;
            } 
            // fall through
          case 503: break;
          case 156: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INPUT;
            } 
            // fall through
          case 504: break;
          case 157: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SPACE;
            } 
            // fall through
          case 505: break;
          case 158: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SQLCA;
            } 
            // fall through
          case 506: break;
          case 159: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ORDER;
            } 
            // fall through
          case 507: break;
          case 160: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OUTER;
            } 
            // fall through
          case 508: break;
          case 161: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return GRANT;
            } 
            // fall through
          case 509: break;
          case 162: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return GROUP;
            } 
            // fall through
          case 510: break;
          case 163: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MATCH;
            } 
            // fall through
          case 511: break;
          case 164: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MERGE;
            } 
            // fall through
          case 512: break;
          case 165: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MONTH;
            } 
            // fall through
          case 513: break;
          case 166: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WRITE;
            } 
            // fall through
          case 514: break;
          case 167: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WHERE;
            } 
            // fall through
          case 515: break;
          case 168: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WHILE;
            } 
            // fall through
          case 516: break;
          case 169: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return VALUE;
            } 
            // fall through
          case 517: break;
          case 170: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ARYING;
            } 
            // fall through
          case 518: break;
          case 171: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ACTION;
            } 
            // fall through
          case 519: break;
          case 172: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DELETE;
            } 
            // fall through
          case 520: break;
          case 173: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DOUBLE;
            } 
            // fall through
          case 521: break;
          case 174: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DOMAIN;
            } 
            // fall through
          case 522: break;
          case 175: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXCEPT;
            } 
            // fall through
          case 523: break;
          case 176: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXISTS;
            } 
            // fall through
          case 524: break;
          case 177: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ERRLVL;
            } 
            // fall through
          case 525: break;
          case 178: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ESCAPE;
            } 
            // fall through
          case 526: break;
          case 179: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RETURN;
            } 
            // fall through
          case 527: break;
          case 180: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return REVERT;
            } 
            // fall through
          case 528: break;
          case 181: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return REVOKE;
            } 
            // fall through
          case 529: break;
          case 182: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NULLIF;
            } 
            // fall through
          case 530: break;
          case 183: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LINENO;
            } 
            // fall through
          case 531: break;
          case 184: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CREATE;
            } 
            // fall through
          case 532: break;
          case 185: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CURSOR;
            } 
            // fall through
          case 533: break;
          case 186: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COLUMN;
            } 
            // fall through
          case 534: break;
          case 187: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COMMIT;
            } 
            // fall through
          case 535: break;
          case 188: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return HAVING;
            } 
            // fall through
          case 536: break;
          case 189: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PASCAL;
            } 
            // fall through
          case 537: break;
          case 190: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PUBLIC;
            } 
            // fall through
          case 538: break;
          case 191: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return UNIQUE;
            } 
            // fall through
          case 539: break;
          case 192: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return UPDATE;
            } 
            // fall through
          case 540: break;
          case 193: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BACKUP;
            } 
            // fall through
          case 541: break;
          case 194: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BROWSE;
            } 
            // fall through
          case 542: break;
          case 195: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INSERT;
            } 
            // fall through
          case 543: break;
          case 196: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SELECT;
            } 
            // fall through
          case 544: break;
          case 197: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SECOND;
            } 
            // fall through
          case 545: break;
          case 198: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SCROLL;
            } 
            // fall through
          case 546: break;
          case 199: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SCHEMA;
            } 
            // fall through
          case 547: break;
          case 200: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OPTION;
            } 
            // fall through
          case 548: break;
          case 201: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OUTPUT;
            } 
            // fall through
          case 549: break;
          case 202: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return GLOBAL;
            } 
            // fall through
          case 550: break;
          case 203: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MINUTE;
            } 
            // fall through
          case 551: break;
          case 204: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MODULE;
            } 
            // fall through
          case 552: break;
          case 205: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return VALUES;
            } 
            // fall through
          case 553: break;
          case 206: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DEFAULT;
            } 
            // fall through
          case 554: break;
          case 207: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DECLARE;
            } 
            // fall through
          case 555: break;
          case 208: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DECIMAL;
            } 
            // fall through
          case 556: break;
          case 209: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXECUTE;
            } 
            // fall through
          case 557: break;
          case 210: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXTRACT;
            } 
            // fall through
          case 558: break;
          case 211: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRIGGER;
            } 
            // fall through
          case 559: break;
          case 212: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TSEQUAL;
            } 
            // fall through
          case 560: break;
          case 213: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RESTORE;
            } 
            // fall through
          case 561: break;
          case 214: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NATURAL;
            } 
            // fall through
          case 562: break;
          case 215: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NUMERIC;
            } 
            // fall through
          case 563: break;
          case 216: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NOCHECK;
            } 
            // fall through
          case 564: break;
          case 217: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LEADING;
            } 
            // fall through
          case 565: break;
          case 218: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FOREIGN;
            } 
            // fall through
          case 566: break;
          case 219: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FORTRAN;
            } 
            // fall through
          case 567: break;
          case 220: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CATALOG;
            } 
            // fall through
          case 568: break;
          case 221: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CASCADE;
            } 
            // fall through
          case 569: break;
          case 222: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CURRENT;
            } 
            // fall through
          case 570: break;
          case 223: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONNECT;
            } 
            // fall through
          case 571: break;
          case 224: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONVERT;
            } 
            // fall through
          case 572: break;
          case 225: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COLLATE;
            } 
            // fall through
          case 573: break;
          case 226: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COMPUTE;
            } 
            // fall through
          case 574: break;
          case 227: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PARTIAL;
            } 
            // fall through
          case 575: break;
          case 228: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PERCENT;
            } 
            // fall through
          case 576: break;
          case 229: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PREPARE;
            } 
            // fall through
          case 577: break;
          case 230: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PRIMARY;
            } 
            // fall through
          case 578: break;
          case 231: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return UNPIVOT;
            } 
            // fall through
          case 579: break;
          case 232: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return UNKNOWN;
            } 
            // fall through
          case 580: break;
          case 233: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BETWEEN;
            } 
            // fall through
          case 581: break;
          case 234: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INTEGER;
            } 
            // fall through
          case 582: break;
          case 235: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INCLUDE;
            } 
            // fall through
          case 583: break;
          case 236: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SETUSER;
            } 
            // fall through
          case 584: break;
          case 237: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SECTION;
            } 
            // fall through
          case 585: break;
          case 238: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SESSION;
            } 
            // fall through
          case 586: break;
          case 239: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SQLCODE;
            } 
            // fall through
          case 587: break;
          case 240: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OFFSETS;
            } 
            // fall through
          case 588: break;
          case 241: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OPENXML;
            } 
            // fall through
          case 589: break;
          case 242: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WAITFOR;
            } 
            // fall through
          case 590: break;
          case 243: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return VARCHAR;
            } 
            // fall through
          case 591: break;
          case 244: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return VARYING;
            } 
            // fall through
          case 592: break;
          case 245: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ALLOCATE;
            } 
            // fall through
          case 593: break;
          case 246: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ABSOLUTE;
            } 
            // fall through
          case 594: break;
          case 247: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DATABASE;
            } 
            // fall through
          case 595: break;
          case 248: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DEFERRED;
            } 
            // fall through
          case 596: break;
          case 249: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DESCRIBE;
            } 
            // fall through
          case 597: break;
          case 250: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DISTINCT;
            } 
            // fall through
          case 598: break;
          case 251: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXTERNAL;
            } 
            // fall through
          case 599: break;
          case 252: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return END_EXEC;
            } 
            // fall through
          case 600: break;
          case 253: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TEXTSIZE;
            } 
            // fall through
          case 601: break;
          case 254: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRAILING;
            } 
            // fall through
          case 602: break;
          case 255: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRUNCATE;
            } 
            // fall through
          case 603: break;
          case 256: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return READTEXT;
            } 
            // fall through
          case 604: break;
          case 257: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RELATIVE;
            } 
            // fall through
          case 605: break;
          case 258: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RESTRICT;
            } 
            // fall through
          case 606: break;
          case 259: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ROLLBACK;
            } 
            // fall through
          case 607: break;
          case 260: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ROWCOUNT;
            } 
            // fall through
          case 608: break;
          case 261: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NATIONAL;
            } 
            // fall through
          case 609: break;
          case 262: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LANGUAGE;
            } 
            // fall through
          case 610: break;
          case 263: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FREETEXT;
            } 
            // fall through
          case 611: break;
          case 264: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FUNCTION;
            } 
            // fall through
          case 612: break;
          case 265: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CASCADED;
            } 
            // fall through
          case 613: break;
          case 266: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COALESCE;
            } 
            // fall through
          case 614: break;
          case 267: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONTAINS;
            } 
            // fall through
          case 615: break;
          case 268: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONTINUE;
            } 
            // fall through
          case 616: break;
          case 269: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return HOLDLOCK;
            } 
            // fall through
          case 617: break;
          case 270: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PRESERVE;
            } 
            // fall through
          case 618: break;
          case 271: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return POSITION;
            } 
            // fall through
          case 619: break;
          case 272: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IDENTITY;
            } 
            // fall through
          case 620: break;
          case 273: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INTERVAL;
            } 
            // fall through
          case 621: break;
          case 274: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SHUTDOWN;
            } 
            // fall through
          case 622: break;
          case 275: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SMALLINT;
            } 
            // fall through
          case 623: break;
          case 276: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SQLERROR;
            } 
            // fall through
          case 624: break;
          case 277: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SQLSTATE;
            } 
            // fall through
          case 625: break;
          case 278: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OVERLAPS;
            } 
            // fall through
          case 626: break;
          case 279: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WHENEVER;
            } 
            // fall through
          case 627: break;
          case 280: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ASSERTION;
            } 
            // fall through
          case 628: break;
          case 281: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXCEPTION;
            } 
            // fall through
          case 629: break;
          case 282: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TEMPORARY;
            } 
            // fall through
          case 630: break;
          case 283: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRANSLATE;
            } 
            // fall through
          case 631: break;
          case 284: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TIMESTAMP;
            } 
            // fall through
          case 632: break;
          case 285: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RAISERROR;
            } 
            // fall through
          case 633: break;
          case 286: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CLUSTERED;
            } 
            // fall through
          case 634: break;
          case 287: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CHARACTER;
            } 
            // fall through
          case 635: break;
          case 288: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COLLATION;
            } 
            // fall through
          case 636: break;
          case 289: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PRECISION;
            } 
            // fall through
          case 637: break;
          case 290: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PROCEDURE;
            } 
            // fall through
          case 638: break;
          case 291: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INDICATOR;
            } 
            // fall through
          case 639: break;
          case 292: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INTERSECT;
            } 
            // fall through
          case 640: break;
          case 293: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INITIALLY;
            } 
            // fall through
          case 641: break;
          case 294: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ISOLATION;
            } 
            // fall through
          case 642: break;
          case 295: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IMMEDIATE;
            } 
            // fall through
          case 643: break;
          case 296: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SUBSTRING;
            } 
            // fall through
          case 644: break;
          case 297: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OPENQUERY;
            } 
            // fall through
          case 645: break;
          case 298: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WRITETEXT;
            } 
            // fall through
          case 646: break;
          case 299: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DEALLOCATE;
            } 
            // fall through
          case 647: break;
          case 300: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DEFERRABLE;
            } 
            // fall through
          case 648: break;
          case 301: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DESCRIPTOR;
            } 
            // fall through
          case 649: break;
          case 302: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DISCONNECT;
            } 
            // fall through
          case 650: break;
          case 303: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return REFERENCES;
            } 
            // fall through
          case 651: break;
          case 304: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ROWGUIDCOL;
            } 
            // fall through
          case 652: break;
          case 305: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FILLFACTOR;
            } 
            // fall through
          case 653: break;
          case 306: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CHECKPOINT;
            } 
            // fall through
          case 654: break;
          case 307: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONNECTION;
            } 
            // fall through
          case 655: break;
          case 308: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONSTRAINT;
            } 
            // fall through
          case 656: break;
          case 309: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PRIVILEGES;
            } 
            // fall through
          case 657: break;
          case 310: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return UPDATETEXT;
            } 
            // fall through
          case 658: break;
          case 311: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return BIT_LENGTH;
            } 
            // fall through
          case 659: break;
          case 312: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return STATISTICS;
            } 
            // fall through
          case 660: break;
          case 313: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SQLWARNING;
            } 
            // fall through
          case 661: break;
          case 314: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OPENROWSET;
            } 
            // fall through
          case 662: break;
          case 315: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DIAGNOSTICS;
            } 
            // fall through
          case 663: break;
          case 316: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DISTRIBUTED;
            } 
            // fall through
          case 664: break;
          case 317: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TABLESAMPLE;
            } 
            // fall through
          case 665: break;
          case 318: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRANSACTION;
            } 
            // fall through
          case 666: break;
          case 319: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRANSLATION;
            } 
            // fall through
          case 667: break;
          case 320: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TRY_CONVERT;
            } 
            // fall through
          case 668: break;
          case 321: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RECONFIGURE;
            } 
            // fall through
          case 669: break;
          case 322: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return REPLICATION;
            } 
            // fall through
          case 670: break;
          case 323: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CHAR_LENGTH;
            } 
            // fall through
          case 671: break;
          case 324: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONSTRAINTS;
            } 
            // fall through
          case 672: break;
          case 325: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IDENTITYCOL;
            } 
            // fall through
          case 673: break;
          case 326: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return INSENSITIVE;
            } 
            // fall through
          case 674: break;
          case 327: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SYSTEM_USER;
            } 
            // fall through
          case 675: break;
          case 328: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NONCLUSTERED;
            } 
            // fall through
          case 676: break;
          case 329: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CURRENT_DATE;
            } 
            // fall through
          case 677: break;
          case 330: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CURRENT_TIME;
            } 
            // fall through
          case 678: break;
          case 331: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CURRENT_USER;
            } 
            // fall through
          case 679: break;
          case 332: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SESSION_USER;
            } 
            // fall through
          case 680: break;
          case 333: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OCTET_LENGTH;
            } 
            // fall through
          case 681: break;
          case 334: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return WITHIN_GROUP;
            } 
            // fall through
          case 682: break;
          case 335: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return AUTHORIZATION;
            } 
            // fall through
          case 683: break;
          case 336: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TIMEZONE_HOUR;
            } 
            // fall through
          case 684: break;
          case 337: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return FREETEXTTABLE;
            } 
            // fall through
          case 685: break;
          case 338: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CORRESPONDING;
            } 
            // fall through
          case 686: break;
          case 339: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONTAINSTABLE;
            } 
            // fall through
          case 687: break;
          case 340: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SECURITYAUDIT;
            } 
            // fall through
          case 688: break;
          case 341: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OPENDATASOURCE;
            } 
            // fall through
          case 689: break;
          case 342: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return TIMEZONE_MINUTE;
            } 
            // fall through
          case 690: break;
          case 343: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IDENTITY_INSERT;
            } 
            // fall through
          case 691: break;
          case 344: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CHARACTER_LENGTH;
            } 
            // fall through
          case 692: break;
          case 345: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CURRENT_TIMESTAMP;
            } 
            // fall through
          case 693: break;
          case 346: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SEMANTICKEYPHRASETABLE;
            } 
            // fall through
          case 694: break;
          case 347: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SEMANTICSIMILARITYTABLE;
            } 
            // fall through
          case 695: break;
          case 348: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SEMANTICSIMILARITYDETAILSTABLE;
            } 
            // fall through
          case 696: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
