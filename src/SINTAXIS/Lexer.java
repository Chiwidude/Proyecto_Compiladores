/* The following code was generated by JFlex 1.7.0 */

package SINTAXIS;
import static SINTAXIS.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/PROYECTO_COMPILADORES/PROYECTO/src/SINTAXIS/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\1\72\1\72\1\3\22\0\1\66\1\15\1\0"+
    "\1\32\1\0\1\11\1\16\1\71\1\25\1\26\1\7\1\10\1\21"+
    "\1\5\1\22\1\6\2\67\10\2\1\0\1\20\1\12\1\13\1\14"+
    "\1\0\1\31\1\33\1\50\1\44\1\34\1\35\1\43\1\55\1\45"+
    "\1\51\1\64\1\57\1\42\1\60\1\41\1\53\1\46\1\65\1\40"+
    "\1\52\1\37\1\47\1\62\1\61\1\36\1\54\1\56\1\23\1\0"+
    "\1\24\1\0\1\63\1\0\4\1\1\70\25\1\1\27\1\17\1\30"+
    "\7\0\1\72\u1fa2\0\1\72\1\72\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\1\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\5\1\2\15\4\1\1\15\14\1\1\15"+
    "\1\1\1\31\1\32\1\3\1\1\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\31"+
    "\1\45\6\31\1\45\23\31\1\45\11\31\1\45\44\31"+
    "\2\45\15\31\3\45\10\31\1\45\17\31\2\0\1\46"+
    "\1\0\1\3\3\0\1\1\2\0\2\31\1\45\10\31"+
    "\1\45\14\31\1\45\54\31\1\45\37\31\1\45\6\31"+
    "\1\45\3\31\1\45\6\31\1\45\14\31\2\45\7\31"+
    "\1\45\10\31\1\0\1\3\1\0\1\3\14\31\1\45"+
    "\10\31\1\0\4\31\1\45\3\31\1\45\2\31\1\45"+
    "\16\31\1\45\14\31\1\45\24\31\1\45\37\31\2\45"+
    "\2\31\2\45\1\31\2\3\2\0\1\3\3\1\2\0"+
    "\15\31\1\0\1\45\32\31\1\45\51\31\1\45\2\0"+
    "\5\31\1\45\1\0\46\31\1\0\7\31\1\45\2\31"+
    "\1\45\10\31\1\45\5\31\1\0\1\31\1\45\3\31"+
    "\1\45\4\31\1\45\5\31\1\0\11\31\1\0\10\31"+
    "\1\0\7\31\1\0\1\45\23\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[702];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\73"+
    "\0\73\0\73\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4"+
    "\0\73\0\73\0\73\0\u02ff\0\73\0\u033a\0\73\0\u0375"+
    "\0\73\0\73\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887"+
    "\0\u08c2\0\u08fd\0\u0938\0\261\0\u0973\0\166\0\u09ae\0\u09e9"+
    "\0\u0a24\0\73\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\u0a5f\0\166\0\u0a9a\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620"+
    "\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8"+
    "\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0"+
    "\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80"+
    "\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58"+
    "\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130"+
    "\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308"+
    "\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0"+
    "\0\u251b\0\u2556\0\73\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d"+
    "\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d"+
    "\0\u1098\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca"+
    "\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2"+
    "\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a"+
    "\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152"+
    "\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a"+
    "\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502"+
    "\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da"+
    "\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2"+
    "\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a"+
    "\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62"+
    "\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a"+
    "\0\u3b00\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7"+
    "\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af"+
    "\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387"+
    "\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524\0\u455f"+
    "\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737"+
    "\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899\0\u48d4\0\u490f"+
    "\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac\0\u4ae7"+
    "\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf"+
    "\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97"+
    "\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9\0\u5034\0\u506f"+
    "\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1\0\u520c\0\u5247"+
    "\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u53a9\0\u53e4\0\u541f"+
    "\0\u545a\0\u5495\0\u54d0\0\u550b\0\u5546\0\u5581\0\u55bc\0\u55f7"+
    "\0\u5632\0\u566d\0\u56a8\0\u56e3\0\u571e\0\u5759\0\u5794\0\u57cf"+
    "\0\u580a\0\u5845\0\u5880\0\u58bb\0\u58f6\0\u5931\0\u596c\0\u59a7"+
    "\0\u59e2\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\u5b09\0\u4772\0\u5b44"+
    "\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b\0\u5ca6\0\u5ce1\0\u5d1c"+
    "\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\u5e43\0\u5e7e\0\u5eb9\0\u5ef4"+
    "\0\u5f2f\0\u5f6a\0\u5fa5\0\u5fe0\0\u601b\0\u6056\0\u6091\0\u60cc"+
    "\0\u6107\0\u6142\0\u617d\0\u61b8\0\u61f3\0\u622e\0\u6269\0\u62a4"+
    "\0\u62df\0\u631a\0\u6355\0\u6390\0\u63cb\0\u6406\0\u6441\0\u647c"+
    "\0\u64b7\0\u64f2\0\u652d\0\u6568\0\u65a3\0\u65de\0\u6619\0\u6654"+
    "\0\u668f\0\u66ca\0\u6705\0\u6740\0\u677b\0\u67b6\0\u67f1\0\u682c"+
    "\0\u6867\0\u68a2\0\u27df\0\u68dd\0\u6918\0\u6953\0\u698e\0\u69c9"+
    "\0\u6a04\0\u6a3f\0\u6a7a\0\u6ab5\0\u6af0\0\u6b2b\0\u6b66\0\u6ba1"+
    "\0\u6bdc\0\u6c17\0\u6c52\0\u6c8d\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79"+
    "\0\u6db4\0\u6def\0\u6e2a\0\u6e65\0\u6ea0\0\u6edb\0\u6f16\0\u6f51"+
    "\0\u6f8c\0\u6fc7\0\u7002\0\u703d\0\u7078\0\u70b3\0\u70ee\0\u7129"+
    "\0\u7164\0\u719f\0\u71da\0\u7215\0\u7250\0\u728b\0\u72c6\0\u7301"+
    "\0\u733c\0\u7377\0\u73b2\0\u73ed\0\u7428\0\u7463\0\u749e\0\u74d9"+
    "\0\u7514\0\u754f\0\u758a\0\u75c5\0\u7600\0\u763b\0\u7676\0\u76b1"+
    "\0\u76ec\0\u7727\0\u7762\0\u779d\0\u77d8\0\u7813\0\u784e\0\u7889"+
    "\0\u78c4\0\u78ff\0\u793a\0\u3fd7\0\u7975\0\u79b0\0\u79eb\0\u7a26"+
    "\0\u7a61\0\u7a9c\0\u7ad7\0\u5546\0\u0127\0\u7b12\0\u7b4d\0\u7b88"+
    "\0\u7bc3\0\u7bfe\0\u7c39\0\u281a\0\u7c74\0\u7caf\0\u7cea\0\u7d25"+
    "\0\u7d60\0\u7d9b\0\u7dd6\0\u7e11\0\u7e4c\0\u7e87\0\u7ec2\0\u7efd"+
    "\0\u7f38\0\u7f73\0\u7fae\0\u7fe9\0\u8024\0\u805f\0\u809a\0\u80d5"+
    "\0\u8110\0\u814b\0\u8186\0\u81c1\0\u81fc\0\u8237\0\u8272\0\u82ad"+
    "\0\u82e8\0\u8323\0\u835e\0\u8399\0\u83d4\0\u840f\0\u844a\0\u8485"+
    "\0\u84c0\0\u84fb\0\u8536\0\u8571\0\u85ac\0\u85e7\0\u8622\0\u865d"+
    "\0\u8698\0\u86d3\0\u870e\0\u34c7\0\u8749\0\u8784\0\u87bf\0\u87fa"+
    "\0\u8835\0\u8870\0\u88ab\0\u88e6\0\u8921\0\u1f1d\0\u895c\0\u835e"+
    "\0\u8997\0\u89d2\0\u4260\0\u8a0d\0\u8a48\0\u8a83\0\u8abe\0\73"+
    "\0\u8af9\0\u8b34\0\u8b6f\0\u8baa\0\u8be5\0\u8c20\0\u8c5b\0\u8c96"+
    "\0\u8cd1\0\u8d0c\0\u8d47\0\u8d82\0\u8dbd\0\u8df8\0\u8e33\0\u8e6e"+
    "\0\u8ea9\0\u8ee4\0\u8f1f\0\u8f5a\0\u8f95\0\u8fd0\0\u900b\0\u9046"+
    "\0\u9081\0\u90bc\0\u90f7\0\u9132\0\u916d\0\u91a8\0\u91e3\0\u921e"+
    "\0\u9259\0\u9294\0\u92cf\0\u930a\0\u9345\0\u9380\0\u93bb\0\u93f6"+
    "\0\u9431\0\u946c\0\u94a7\0\u94e2\0\u951d\0\u9558\0\u9593\0\u95ce"+
    "\0\u9609\0\u9644\0\u967f\0\u96ba\0\u96f5\0\u9730\0\u8baa\0\u976b"+
    "\0\u97a6\0\u97e1\0\u981c\0\u9857\0\u9892\0\u98cd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[702];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\3\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\2\1\63\1\3\1\5\1\64\1\3"+
    "\1\65\75\0\2\66\30\0\33\66\1\0\2\66\4\0"+
    "\1\4\17\0\1\67\44\0\1\4\6\0\2\5\61\0"+
    "\1\5\11\0\1\70\74\0\1\71\76\0\1\72\72\0"+
    "\1\73\72\0\1\74\72\0\1\75\75\0\1\76\73\0"+
    "\1\77\77\0\1\100\74\0\1\101\74\0\1\102\74\0"+
    "\1\103\41\0\2\66\30\0\1\66\1\104\2\66\1\105"+
    "\1\106\1\107\1\110\1\66\1\111\2\66\1\112\1\113"+
    "\1\66\1\114\7\66\1\115\3\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\116\1\66\1\117\2\66\1\120\6\66"+
    "\1\121\1\122\1\123\1\66\1\124\12\66\1\0\2\66"+
    "\3\0\2\66\30\0\3\66\1\125\1\66\1\126\1\127"+
    "\1\130\7\66\1\131\13\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\132\1\66\1\133\2\66\1\134\4\66\1\135"+
    "\3\66\1\136\1\137\1\140\12\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\141\1\66\1\142\11\66\1\143\1\66"+
    "\1\144\1\66\1\145\12\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\146\1\66\1\147\6\66\1\150\2\66\1\151"+
    "\3\66\1\152\12\66\1\0\2\66\3\0\2\66\30\0"+
    "\1\153\1\66\1\154\13\66\1\155\1\66\1\156\12\66"+
    "\1\0\2\66\3\0\2\66\30\0\1\157\1\66\1\160"+
    "\2\66\1\161\1\66\1\162\4\66\1\163\1\66\1\164"+
    "\1\66\1\165\12\66\1\0\2\66\3\0\2\66\30\0"+
    "\1\166\4\66\1\167\1\66\1\170\2\66\1\171\1\66"+
    "\1\172\3\66\1\173\12\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\174\17\66\1\175\12\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\176\1\66\1\177\2\66\1\200\1\66"+
    "\1\201\4\66\1\202\1\66\1\203\1\66\1\204\12\66"+
    "\1\0\2\66\3\0\2\66\30\0\6\66\1\205\4\66"+
    "\1\206\3\66\1\207\13\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\210\1\66\1\211\2\66\1\212\6\66\1\213"+
    "\1\66\1\214\1\66\1\215\1\105\11\66\1\0\2\66"+
    "\3\0\2\66\30\0\1\66\1\216\4\66\1\217\1\66"+
    "\1\105\6\66\1\220\5\66\1\221\5\66\1\0\2\66"+
    "\3\0\2\66\30\0\1\222\1\66\1\223\1\66\1\224"+
    "\4\66\1\225\1\226\1\227\1\230\1\66\1\231\1\66"+
    "\1\232\1\233\3\66\1\234\4\66\1\235\1\0\2\66"+
    "\3\0\2\66\30\0\5\66\1\236\1\237\1\66\1\240"+
    "\1\241\1\66\1\242\1\243\12\66\1\244\3\66\1\0"+
    "\2\66\3\0\2\66\30\0\2\66\1\245\30\66\1\0"+
    "\2\66\3\0\2\66\30\0\2\66\1\246\2\66\1\247"+
    "\1\66\1\250\10\66\1\251\12\66\1\0\2\66\3\0"+
    "\2\66\30\0\20\66\1\252\12\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\253\13\66\1\254\14\66\1\0"+
    "\2\66\3\0\2\66\30\0\1\255\1\66\1\256\13\66"+
    "\1\257\1\66\1\260\12\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\261\4\66\1\262\4\66\1\263\3\66\1\264"+
    "\1\66\1\265\12\66\1\0\2\66\3\0\2\66\30\0"+
    "\1\266\15\66\1\267\14\66\1\0\2\66\3\0\2\66"+
    "\30\0\20\66\1\270\12\66\1\0\2\66\3\0\2\65"+
    "\1\0\12\65\1\271\1\272\43\65\1\0\5\65\1\273"+
    "\3\0\1\67\14\0\1\274\15\0\1\274\31\0\1\67"+
    "\1\274\3\0\2\70\1\0\2\70\1\275\7\70\1\276"+
    "\1\277\43\70\1\0\5\70\2\0\1\300\2\71\1\300"+
    "\3\71\1\301\6\71\1\302\1\303\43\71\1\300\5\71"+
    "\2\300\1\0\2\66\30\0\2\105\31\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\105\16\66\1\304\11\66"+
    "\1\0\2\66\3\0\2\66\30\0\1\66\1\105\17\66"+
    "\1\105\11\66\1\0\2\66\3\0\2\66\30\0\4\66"+
    "\1\305\2\66\1\306\23\66\1\0\2\66\3\0\2\66"+
    "\30\0\4\66\1\307\26\66\1\0\2\66\3\0\2\66"+
    "\30\0\4\66\1\310\26\66\1\0\2\66\3\0\2\66"+
    "\30\0\17\66\1\311\13\66\1\0\2\66\3\0\2\66"+
    "\30\0\11\66\1\105\5\66\1\312\13\66\1\0\2\66"+
    "\3\0\2\66\30\0\22\66\1\105\10\66\1\0\2\66"+
    "\3\0\2\66\30\0\4\66\1\313\14\66\1\105\11\66"+
    "\1\0\2\66\3\0\2\66\30\0\1\314\5\66\1\253"+
    "\1\315\1\316\1\317\5\66\1\320\13\66\1\0\2\66"+
    "\3\0\2\66\30\0\20\66\1\321\12\66\1\0\2\66"+
    "\3\0\2\66\30\0\25\66\1\321\5\66\1\0\2\66"+
    "\3\0\2\66\30\0\11\66\1\322\21\66\1\0\2\66"+
    "\3\0\2\66\30\0\1\323\16\66\1\324\13\66\1\0"+
    "\2\66\3\0\2\66\30\0\14\66\1\325\10\66\1\326"+
    "\5\66\1\0\2\66\3\0\2\66\30\0\2\66\1\327"+
    "\1\66\1\330\4\66\1\331\4\66\1\332\14\66\1\0"+
    "\2\66\3\0\2\66\30\0\5\66\1\333\25\66\1\0"+
    "\2\66\3\0\2\66\30\0\1\66\1\334\31\66\1\0"+
    "\2\66\3\0\2\66\30\0\17\66\1\335\13\66\1\0"+
    "\2\66\3\0\2\66\30\0\11\66\1\336\21\66\1\0"+
    "\2\66\3\0\2\66\30\0\15\66\1\337\15\66\1\0"+
    "\2\66\3\0\2\66\30\0\3\66\1\340\21\66\1\341"+
    "\5\66\1\0\2\66\3\0\2\66\30\0\1\342\13\66"+
    "\1\343\1\66\1\344\2\66\1\345\11\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\346\30\66\1\0\2\66"+
    "\3\0\2\66\30\0\25\66\1\347\5\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\350\30\66\1\0\2\66"+
    "\3\0\2\66\30\0\13\66\1\105\17\66\1\0\2\66"+
    "\3\0\2\66\30\0\16\66\1\351\14\66\1\0\2\66"+
    "\3\0\2\66\30\0\1\352\3\66\1\353\2\66\1\354"+
    "\1\355\1\356\1\66\1\357\3\66\1\360\7\66\1\361"+
    "\3\66\1\0\2\66\3\0\2\66\30\0\7\66\1\335"+
    "\23\66\1\0\2\66\3\0\2\66\30\0\22\66\1\362"+
    "\10\66\1\0\2\66\3\0\2\66\30\0\7\66\1\363"+
    "\16\66\1\364\4\66\1\0\2\66\3\0\2\66\30\0"+
    "\4\66\1\365\20\66\1\366\5\66\1\0\2\66\3\0"+
    "\2\66\30\0\3\66\1\246\27\66\1\0\2\66\3\0"+
    "\2\66\30\0\12\66\1\245\20\66\1\0\2\66\3\0"+
    "\2\66\30\0\7\66\1\367\15\66\1\370\5\66\1\0"+
    "\2\66\3\0\2\66\30\0\4\66\1\105\1\66\1\371"+
    "\2\66\1\372\21\66\1\0\2\66\3\0\2\66\30\0"+
    "\6\66\1\373\10\66\1\246\13\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\374\7\66\1\246\16\66\1\375\3\66"+
    "\1\0\2\66\3\0\2\66\30\0\6\66\1\376\15\66"+
    "\1\335\6\66\1\0\2\66\3\0\2\66\30\0\1\377"+
    "\10\66\1\u0100\14\66\1\305\4\66\1\0\2\66\3\0"+
    "\2\66\30\0\7\66\1\130\23\66\1\0\2\66\3\0"+
    "\2\66\30\0\4\66\1\u0101\26\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\u0102\15\66\1\u0103\12\66\1\0"+
    "\2\66\3\0\2\66\30\0\20\66\1\u0104\12\66\1\0"+
    "\2\66\3\0\2\66\30\0\6\66\1\u0105\1\u0106\23\66"+
    "\1\0\2\66\3\0\2\66\30\0\5\66\1\u0107\1\66"+
    "\1\u0108\23\66\1\0\2\66\3\0\2\66\30\0\5\66"+
    "\1\u0109\6\66\1\u010a\16\66\1\0\2\66\3\0\2\66"+
    "\30\0\4\66\1\u010b\12\66\1\u010c\13\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\u010d\15\66\1\u010e\12\66"+
    "\1\0\2\66\3\0\2\66\30\0\14\66\1\u010f\3\66"+
    "\1\130\12\66\1\0\2\66\3\0\2\66\30\0\1\u0110"+
    "\1\66\1\u0111\30\66\1\0\2\66\3\0\2\66\30\0"+
    "\5\66\1\u0112\25\66\1\0\2\66\3\0\2\66\30\0"+
    "\1\u0113\4\66\1\u0114\1\u0115\1\u0116\4\66\1\u0117\10\66"+
    "\1\u0118\5\66\1\0\2\66\3\0\2\66\30\0\27\66"+
    "\1\304\3\66\1\0\2\66\3\0\2\66\30\0\7\66"+
    "\1\u0119\4\66\1\u011a\16\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\66\1\105\3\66\1\u011b\11\66\1\u011c\13\66"+
    "\1\0\2\66\3\0\2\66\30\0\5\66\1\u011d\25\66"+
    "\1\0\2\66\3\0\2\66\30\0\2\66\1\u011e\13\66"+
    "\1\u011f\1\66\1\u0120\12\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\346\32\66\1\0\2\66\3\0\2\66\30\0"+
    "\15\66\1\u0121\15\66\1\0\2\66\3\0\2\66\30\0"+
    "\27\66\1\u0122\3\66\1\0\2\66\3\0\2\66\30\0"+
    "\17\66\1\u0123\13\66\1\0\2\66\3\0\2\66\30\0"+
    "\13\66\1\u0124\2\66\1\u0125\5\66\1\u0126\6\66\1\0"+
    "\2\66\3\0\2\66\30\0\1\66\1\u0127\11\66\1\305"+
    "\17\66\1\0\2\66\3\0\2\66\30\0\1\u0128\1\66"+
    "\1\u0129\13\66\1\u012a\14\66\1\0\2\66\3\0\2\66"+
    "\30\0\11\66\1\u012b\21\66\1\0\2\66\3\0\2\66"+
    "\30\0\4\66\1\u012c\15\66\1\270\10\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\u012d\15\66\1\u012e\12\66"+
    "\1\0\2\66\3\0\2\66\30\0\7\66\1\u012f\23\66"+
    "\1\0\2\66\3\0\2\66\30\0\4\66\1\u0130\26\66"+
    "\1\0\2\66\3\0\2\66\30\0\4\66\1\u0131\26\66"+
    "\1\0\2\66\3\0\2\66\30\0\2\66\1\u0132\30\66"+
    "\1\0\2\66\3\0\2\66\30\0\1\66\1\u0133\2\66"+
    "\1\u0134\1\66\1\305\2\66\1\u0135\1\66\1\u0136\2\66"+
    "\1\u0137\1\u0138\13\66\1\0\2\66\3\0\2\66\30\0"+
    "\20\66\1\u0139\12\66\1\0\2\66\3\0\2\66\30\0"+
    "\25\66\1\u013a\5\66\1\0\2\66\3\0\2\66\30\0"+
    "\27\66\1\335\3\66\1\0\2\66\3\0\2\66\30\0"+
    "\4\66\1\u013b\2\66\1\u013c\1\66\1\u013d\5\66\1\u013e"+
    "\5\66\1\u013f\5\66\1\0\2\66\3\0\2\66\30\0"+
    "\1\u0140\32\66\1\0\2\66\3\0\2\66\30\0\5\66"+
    "\1\u0141\4\66\1\u0142\20\66\1\0\2\66\3\0\2\66"+
    "\30\0\14\66\1\u0143\16\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\u0144\32\66\1\0\2\66\3\0\2\66\30\0"+
    "\15\66\1\u0145\7\66\1\105\5\66\1\0\2\66\3\0"+
    "\2\66\30\0\23\66\1\335\7\66\1\0\2\66\3\0"+
    "\2\66\30\0\25\66\1\335\5\66\1\0\2\66\3\0"+
    "\2\66\30\0\17\66\1\u0146\13\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\u0147\32\66\1\0\2\66\3\0\2\66"+
    "\30\0\7\66\1\u0148\23\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\66\1\305\31\66\1\0\2\66\3\0\2\66"+
    "\30\0\7\66\1\253\23\66\1\0\2\66\3\0\2\66"+
    "\30\0\10\66\1\u0149\22\66\1\0\2\66\3\0\2\66"+
    "\30\0\4\66\1\u014a\26\66\1\0\2\66\3\0\2\66"+
    "\30\0\2\66\1\u014b\1\66\1\307\26\66\1\0\2\66"+
    "\3\0\2\66\30\0\4\66\1\u014c\26\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\u014d\30\66\1\0\2\66"+
    "\3\0\2\66\30\0\1\u011a\32\66\1\0\2\66\3\0"+
    "\2\66\30\0\4\66\1\105\26\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\u0117\17\66\1\u014e\12\66\1\0\2\66"+
    "\3\0\2\66\30\0\20\66\1\u014f\12\66\1\0\2\66"+
    "\3\0\2\66\30\0\4\66\1\u0150\26\66\1\0\2\66"+
    "\3\0\2\66\30\0\6\66\1\335\24\66\1\0\2\66"+
    "\3\0\2\66\30\0\21\66\1\105\11\66\1\0\2\66"+
    "\3\0\2\66\30\0\7\66\1\u0106\23\66\1\0\2\66"+
    "\3\0\2\66\30\0\3\66\1\105\1\u0101\26\66\1\0"+
    "\2\66\3\0\2\66\30\0\5\66\1\u0128\25\66\1\0"+
    "\2\66\3\0\2\66\30\0\6\66\1\u0151\24\66\1\0"+
    "\2\66\3\0\2\66\30\0\1\66\1\u0152\4\66\1\215"+
    "\24\66\1\0\2\66\3\0\2\66\30\0\16\66\1\u0153"+
    "\14\66\1\0\2\66\3\0\2\66\30\0\16\66\1\u0154"+
    "\14\66\1\0\2\66\3\0\2\66\30\0\2\66\1\u0155"+
    "\13\66\1\143\14\66\1\0\2\66\3\0\2\66\30\0"+
    "\4\66\1\u0156\26\66\1\0\2\66\3\0\2\66\30\0"+
    "\5\66\1\u012f\25\66\1\0\2\66\3\0\2\66\30\0"+
    "\5\66\1\u0157\1\66\1\u0158\23\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\u0159\30\66\1\0\2\66\3\0"+
    "\2\66\30\0\16\66\1\346\14\66\1\0\2\66\20\0"+
    "\1\65\73\0\1\65\55\0\1\67\2\0\1\u015a\2\0"+
    "\1\u015a\6\0\1\u015a\47\0\1\67\4\0\2\70\1\0"+
    "\2\70\1\275\1\u015b\6\70\1\276\1\277\43\70\1\0"+
    "\5\70\20\0\1\70\73\0\1\70\53\0\7\300\1\u015c"+
    "\64\300\2\71\1\300\2\71\1\u015d\1\301\6\71\1\302"+
    "\1\303\43\71\1\300\5\71\11\300\1\u015c\6\300\1\71"+
    "\63\300\1\u015c\7\300\1\71\53\300\1\0\2\66\30\0"+
    "\16\66\1\u012a\14\66\1\0\2\66\3\0\2\66\30\0"+
    "\2\66\1\u011a\30\66\1\0\2\66\3\0\2\66\30\0"+
    "\20\66\1\u015e\12\66\1\0\2\66\3\0\2\66\30\0"+
    "\16\66\1\u015f\14\66\1\0\2\66\3\0\2\66\30\0"+
    "\12\66\1\u0160\20\66\1\0\2\66\3\0\2\66\30\0"+
    "\20\66\1\u0161\12\66\1\0\2\66\3\0\2\66\30\0"+
    "\2\66\1\u0162\30\66\1\0\2\66\3\0\2\66\30\0"+
    "\1\u0163\1\66\1\105\30\66\1\0\2\66\3\0\2\66"+
    "\30\0\7\66\1\u0164\23\66\1\0\2\66\3\0\2\66"+
    "\30\0\2\66\1\u0165\30\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\u0166\1\66\1\u0167\30\66\1\0\2\66\3\0"+
    "\2\66\30\0\7\66\1\u0168\6\66\1\u0169\14\66\1\0"+
    "\2\66\3\0\2\66\30\0\11\66\1\u016a\21\66\1\0"+
    "\2\66\3\0\2\66\30\0\11\66\1\105\21\66\1\0"+
    "\2\66\3\0\2\66\30\0\22\66\1\u016b\10\66\1\0"+
    "\2\66\3\0\2\66\30\0\4\66\1\u016c\4\66\1\u016d"+
    "\12\66\1\105\6\66\1\0\2\66\3\0\2\66\30\0"+
    "\15\66\1\143\15\66\1\0\2\66\3\0\2\66\30\0"+
    "\1\270\32\66\1\0\2\66\3\0\2\66\30\0\11\66"+
    "\1\u0151\21\66\1\0\2\66\3\0\2\66\30\0\2\66"+
    "\1\u016e\2\66\1\u016f\25\66\1\0\2\66\3\0\2\66"+
    "\30\0\2\66\1\u0170\30\66\1\0\2\66\3\0\2\66"+
    "\30\0\4\66\1\105\12\66\1\u0171\13\66\1\0\2\66"+
    "\3\0\2\66\30\0\7\66\1\u0172\23\66\1\0\2\66"+
    "\3\0\2\66\2\0\1\u0173\25\0\33\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\105\30\66\1\0\2\66"+
    "\3\0\2\66\30\0\1\u0174\32\66\1\0\2\66\3\0"+
    "\2\66\30\0\7\66\1\u0175\23\66\1\0\2\66\3\0"+
    "\2\66\30\0\4\66\1\u0176\26\66\1\0\2\66\3\0"+
    "\2\66\30\0\13\66\1\u0177\17\66\1\0\2\66\3\0"+
    "\2\66\30\0\6\66\1\u0178\7\66\1\u0179\14\66\1\0"+
    "\2\66\3\0\2\66\30\0\2\66\1\105\3\66\1\u015e"+
    "\24\66\1\0\2\66\3\0\2\66\30\0\22\66\1\u017a"+
    "\2\66\1\105\5\66\1\0\2\66\3\0\2\66\30\0"+
    "\30\66\1\u017b\2\66\1\0\2\66\3\0\2\66\30\0"+
    "\6\66\1\105\24\66\1\0\2\66\3\0\2\66\30\0"+
    "\2\66\1\u017c\30\66\1\0\2\66\3\0\2\66\30\0"+
    "\32\66\1\u017d\1\0\2\66\3\0\2\66\30\0\17\66"+
    "\1\u017e\13\66\1\0\2\66\3\0\2\66\30\0\1\66"+
    "\1\u017f\5\66\1\105\23\66\1\0\2\66\3\0\2\66"+
    "\30\0\14\66\1\u0180\16\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\u0181\32\66\1\0\2\66\3\0\2\66\30\0"+
    "\2\66\1\u0182\30\66\1\0\2\66\3\0\2\66\30\0"+
    "\20\66\1\u0183\12\66\1\0\2\66\3\0\2\66\30\0"+
    "\7\66\1\u0184\23\66\1\0\2\66\3\0\2\66\30\0"+
    "\4\66\1\u0185\26\66\1\0\2\66\3\0\2\66\30\0"+
    "\2\66\1\u0186\15\66\1\u0187\12\66\1\0\2\66\3\0"+
    "\2\66\30\0\12\66\1\246\20\66\1\0\2\66\3\0"+
    "\2\66\30\0\7\66\1\u0188\23\66\1\0\2\66\3\0"+
    "\2\66\30\0\11\66\1\u0189\5\66\1\105\2\66\1\u018a"+
    "\10\66\1\0\2\66\3\0\2\66\30\0\14\66\1\u018b"+
    "\1\66\1\u018c\14\66\1\0\2\66\3\0\2\66\30\0"+
    "\2\66\1\u018d\30\66\1\0\2\66\3\0\2\66\30\0"+
    "\7\66\1\u018e\23\66\1\0\2\66\3\0\2\66\30\0"+
    "\2\66\1\u018f\30\66\1\0\2\66\3\0\2\66\30\0"+
    "\2\66\1\105\6\66\1\u0190\21\66\1\0\2\66\3\0"+
    "\2\66\30\0\12\66\1\u0191\20\66\1\0\2\66\3\0"+
    "\2\66\30\0\22\66\1\u0192\10\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\66\1\304\31\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\u0106\30\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\u0193\30\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\66\1\105\31\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\u0106\32\66\1\0\2\66\3\0\2\66"+
    "\30\0\11\66\1\u0131\21\66\1\0\2\66\3\0\2\66"+
    "\30\0\2\66\1\u0194\30\66\1\0\2\66\3\0\2\66"+
    "\30\0\25\66\1\105\5\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\246\32\66\1\0\2\66\3\0\2\66\30\0"+
    "\11\66\1\111\21\66\1\0\2\66\3\0\2\66\30\0"+
    "\7\66\1\105\23\66\1\0\2\66\3\0\2\66\30\0"+
    "\17\66\1\246\13\66\1\0\2\66\3\0\2\66\30\0"+
    "\2\66\1\105\4\66\1\u0195\23\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\u0196\1\66\1\u0197\26\66\1\0"+
    "\2\66\3\0\2\66\30\0\6\66\1\377\24\66\1\0"+
    "\2\66\3\0\2\66\30\0\1\u0198\32\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\105\1\66\1\105\4\66"+
    "\1\u0199\21\66\1\0\2\66\3\0\2\66\30\0\1\u0165"+
    "\32\66\1\0\2\66\3\0\2\66\30\0\17\66\1\u018d"+
    "\13\66\1\0\2\66\3\0\2\66\30\0\17\66\1\u019a"+
    "\13\66\1\0\2\66\3\0\2\66\30\0\5\66\1\u019b"+
    "\25\66\1\0\2\66\3\0\2\66\30\0\11\66\1\u019c"+
    "\21\66\1\0\2\66\3\0\2\66\30\0\5\66\1\u019d"+
    "\11\66\1\u019e\13\66\1\0\2\66\3\0\2\66\30\0"+
    "\7\66\1\u019f\23\66\1\0\2\66\3\0\2\66\30\0"+
    "\5\66\1\u01a0\25\66\1\0\2\66\3\0\2\66\30\0"+
    "\4\66\1\u01a1\1\66\1\u01a2\10\66\1\u01a3\7\66\1\u01a4"+
    "\3\66\1\0\2\66\3\0\2\66\30\0\7\66\1\u01a5"+
    "\4\66\1\u01a6\16\66\1\0\2\66\3\0\2\66\30\0"+
    "\6\66\1\246\24\66\1\0\2\66\3\0\2\66\30\0"+
    "\13\66\1\u01a7\11\66\1\u01a8\5\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\66\1\u01a9\31\66\1\0\2\66\3\0"+
    "\2\66\30\0\5\66\1\105\25\66\1\0\2\66\3\0"+
    "\2\66\30\0\4\66\1\u01aa\26\66\1\0\2\66\3\0"+
    "\2\66\30\0\11\66\1\u0100\21\66\1\0\2\66\3\0"+
    "\2\66\30\0\11\66\1\u01ab\21\66\1\0\2\66\3\0"+
    "\2\66\30\0\11\66\1\u01ac\1\66\1\u0168\3\66\1\u01ad"+
    "\13\66\1\0\2\66\3\0\2\66\30\0\6\66\1\246"+
    "\11\66\1\u011a\4\66\1\u01ae\1\66\1\u01af\3\66\1\0"+
    "\2\66\3\0\2\66\30\0\11\66\1\u01b0\21\66\1\0"+
    "\2\66\3\0\2\66\30\0\7\66\1\u01b1\23\66\1\0"+
    "\2\66\3\0\2\66\30\0\20\66\1\246\12\66\1\0"+
    "\2\66\3\0\2\66\30\0\16\66\1\111\14\66\1\0"+
    "\2\66\3\0\2\66\30\0\16\66\1\203\14\66\1\0"+
    "\2\66\3\0\2\66\30\0\20\66\1\346\11\66\1\u01b2"+
    "\1\0\2\66\3\0\2\66\30\0\6\66\1\u01b3\24\66"+
    "\1\0\2\66\3\0\2\66\30\0\1\u0154\32\66\1\0"+
    "\2\66\3\0\2\66\30\0\22\66\1\335\10\66\1\0"+
    "\2\66\3\0\2\66\30\0\6\66\1\115\24\66\1\0"+
    "\2\66\3\0\2\66\30\0\24\66\1\u014e\6\66\1\0"+
    "\2\66\3\0\2\66\30\0\26\66\1\u01b4\4\66\1\0"+
    "\2\66\3\0\2\66\30\0\1\u012f\32\66\1\0\2\66"+
    "\3\0\2\66\30\0\26\66\1\130\4\66\1\0\2\66"+
    "\3\0\2\66\30\0\24\66\1\105\6\66\1\0\2\66"+
    "\3\0\2\66\30\0\30\66\1\u01b5\2\66\1\0\2\66"+
    "\3\0\2\66\30\0\12\66\1\105\20\66\1\0\2\66"+
    "\3\0\2\66\30\0\6\66\1\u01b6\24\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\u01b7\13\66\1\u01b8\14\66"+
    "\1\0\2\66\3\0\2\66\30\0\2\66\1\u01b9\15\66"+
    "\1\105\12\66\1\0\2\66\3\0\2\66\30\0\7\66"+
    "\1\u01ba\23\66\1\0\2\66\3\0\2\66\30\0\14\66"+
    "\1\246\16\66\1\0\2\66\3\0\2\66\30\0\4\66"+
    "\1\u01bb\26\66\1\0\2\66\3\0\2\66\30\0\2\66"+
    "\1\u01bc\30\66\1\0\2\66\3\0\2\66\30\0\7\66"+
    "\1\u01bd\23\66\1\0\2\66\3\0\2\66\30\0\2\66"+
    "\1\u01be\30\66\1\0\2\66\3\0\2\66\30\0\14\66"+
    "\1\u01bf\16\66\1\0\2\66\3\0\2\66\30\0\2\66"+
    "\1\u01c0\30\66\1\0\2\66\3\0\2\66\30\0\4\66"+
    "\1\307\7\66\1\u01c1\3\66\1\u010a\12\66\1\0\2\66"+
    "\3\0\2\66\30\0\17\66\1\u01c2\13\66\1\0\2\66"+
    "\3\0\2\66\30\0\1\u01c3\32\66\1\0\2\66\3\0"+
    "\2\66\30\0\4\66\1\u01c4\26\66\1\0\2\66\3\0"+
    "\2\66\30\0\20\66\1\254\12\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\u01c5\30\66\1\0\2\66\3\0"+
    "\2\66\30\0\4\66\1\u01c6\26\66\1\0\2\66\3\0"+
    "\2\66\30\0\11\66\1\335\21\66\1\0\2\66\3\0"+
    "\2\66\30\0\17\66\1\u01c7\13\66\1\0\2\66\3\0"+
    "\2\66\30\0\4\66\1\u01c8\26\66\1\0\2\66\3\0"+
    "\2\66\30\0\7\66\1\u01c9\23\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\u01ca\6\66\1\u01cb\5\66\1\u01cc"+
    "\6\66\1\u01cd\4\66\1\0\2\66\3\0\2\66\30\0"+
    "\17\66\1\u01ce\13\66\1\0\2\66\3\0\2\66\30\0"+
    "\2\66\1\u01cf\30\66\1\0\2\66\3\0\2\66\30\0"+
    "\6\66\1\u01d0\24\66\1\0\2\66\3\0\2\66\30\0"+
    "\2\66\1\u011a\10\66\1\u0136\17\66\1\0\2\66\3\0"+
    "\2\66\30\0\5\66\1\u01d1\25\66\1\0\2\66\3\0"+
    "\2\66\30\0\14\66\1\321\16\66\1\0\2\66\3\0"+
    "\2\66\30\0\15\66\1\u0100\15\66\1\0\2\66\3\0"+
    "\2\66\30\0\20\66\1\105\12\66\1\0\2\66\3\0"+
    "\2\66\30\0\14\66\1\u0165\16\66\1\0\2\66\3\0"+
    "\2\66\30\0\14\66\1\143\16\66\1\0\2\66\3\0"+
    "\2\66\30\0\4\66\1\u01d2\26\66\1\0\2\66\3\0"+
    "\2\66\30\0\4\66\1\u01d3\26\66\1\0\2\66\3\0"+
    "\2\66\30\0\5\66\1\335\1\u01d4\24\66\1\0\2\66"+
    "\3\0\2\66\30\0\12\66\1\u01d5\20\66\1\0\2\66"+
    "\3\0\2\66\30\0\11\66\1\150\7\66\1\304\11\66"+
    "\1\0\2\66\3\0\2\66\30\0\14\66\1\u01d6\16\66"+
    "\1\0\2\66\3\0\2\66\30\0\26\66\1\105\4\66"+
    "\1\0\2\66\4\0\1\67\64\0\1\67\3\0\1\300"+
    "\2\u015b\1\300\2\u015b\1\u01d7\1\u01d8\6\u015b\1\u01d9\1\u01da"+
    "\43\u015b\1\300\5\u015b\10\300\1\u01db\1\u015c\63\300\1\0"+
    "\2\u01dc\1\0\1\u01dc\1\u01dd\1\u01de\7\u01dc\1\u01df\1\u01e0"+
    "\43\u01dc\1\0\5\u01dc\3\0\2\66\30\0\11\66\1\u010d"+
    "\21\66\1\0\2\66\3\0\2\66\30\0\20\66\1\346"+
    "\12\66\1\0\2\66\3\0\2\66\30\0\20\66\1\u01e1"+
    "\12\66\1\0\2\66\3\0\2\66\30\0\7\66\1\u01a7"+
    "\23\66\1\0\2\66\3\0\2\66\30\0\5\66\1\111"+
    "\25\66\1\0\2\66\3\0\2\66\30\0\15\66\1\u01e2"+
    "\15\66\1\0\2\66\3\0\2\66\30\0\7\66\1\u01e3"+
    "\23\66\1\0\2\66\3\0\2\66\30\0\4\66\1\335"+
    "\26\66\1\0\2\66\3\0\2\66\30\0\14\66\1\u01e4"+
    "\16\66\1\0\2\66\3\0\2\66\30\0\5\66\1\u01e5"+
    "\25\66\1\0\2\66\3\0\2\66\30\0\1\u01e6\32\66"+
    "\1\0\2\66\3\0\2\66\30\0\25\66\1\u0100\5\66"+
    "\1\0\2\66\3\0\2\66\30\0\5\66\1\u01e7\25\66"+
    "\1\0\2\66\3\0\2\66\30\0\6\66\1\u01e8\24\66"+
    "\1\0\2\66\3\0\2\66\30\0\5\66\1\u01e9\10\66"+
    "\1\u01ea\14\66\1\0\2\66\3\0\2\66\30\0\20\66"+
    "\1\u01eb\12\66\1\0\2\66\3\0\2\66\30\0\5\66"+
    "\1\u01ec\25\66\1\0\2\66\3\0\2\66\30\0\1\u01c0"+
    "\32\66\1\0\2\66\3\0\2\66\30\0\13\66\1\u01ed"+
    "\17\66\1\0\2\66\3\0\2\66\30\0\4\66\1\u018d"+
    "\26\66\1\0\2\66\3\0\2\66\30\0\27\66\1\u0106"+
    "\3\66\1\0\2\66\37\0\1\u01ee\36\0\2\66\30\0"+
    "\13\66\1\335\17\66\1\0\2\66\3\0\2\66\30\0"+
    "\2\66\1\u01ef\30\66\1\0\2\66\3\0\2\66\30\0"+
    "\17\66\1\u01f0\13\66\1\0\2\66\3\0\2\66\30\0"+
    "\20\66\1\u01f1\12\66\1\0\2\66\3\0\2\66\30\0"+
    "\17\66\1\u01f2\13\66\1\0\2\66\3\0\2\66\30\0"+
    "\7\66\1\304\23\66\1\0\2\66\3\0\2\66\30\0"+
    "\22\66\1\305\10\66\1\0\2\66\3\0\2\66\30\0"+
    "\11\66\1\u01f3\21\66\1\0\2\66\3\0\2\66\30\0"+
    "\17\66\1\u01f4\3\66\1\u01f5\7\66\1\0\2\66\3\0"+
    "\2\66\30\0\14\66\1\u0100\16\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\u01ca\30\66\1\0\2\66\3\0"+
    "\2\66\30\0\4\66\1\u01f6\26\66\1\0\2\66\3\0"+
    "\2\66\30\0\5\66\1\346\25\66\1\0\2\66\3\0"+
    "\2\66\30\0\4\66\1\u01f7\26\66\1\0\2\66\3\0"+
    "\2\66\30\0\5\66\1\u01f8\25\66\1\0\2\66\3\0"+
    "\2\66\30\0\6\66\1\u01f9\24\66\1\0\2\66\3\0"+
    "\2\66\30\0\16\66\1\u01fa\14\66\1\0\2\66\3\0"+
    "\2\66\30\0\5\66\1\u01fb\12\66\1\u01e6\12\66\1\0"+
    "\2\66\3\0\2\66\30\0\5\66\1\246\25\66\1\0"+
    "\2\66\3\0\2\66\30\0\24\66\1\335\6\66\1\0"+
    "\2\66\3\0\2\66\30\0\15\66\1\u01fc\15\66\1\0"+
    "\2\66\3\0\2\66\30\0\20\66\1\u01fd\12\66\1\0"+
    "\2\66\3\0\2\66\30\0\14\66\1\u01fe\16\66\1\0"+
    "\2\66\3\0\2\66\30\0\5\66\1\u0100\25\66\1\0"+
    "\2\66\3\0\2\66\30\0\20\66\1\u01ec\12\66\1\0"+
    "\2\66\3\0\2\66\30\0\17\66\1\105\13\66\1\0"+
    "\2\66\3\0\2\66\30\0\16\66\1\u01ff\14\66\1\0"+
    "\2\66\3\0\2\66\30\0\5\66\1\u01b1\25\66\1\0"+
    "\2\66\3\0\2\66\30\0\7\66\1\u0200\23\66\1\0"+
    "\2\66\3\0\2\66\30\0\2\66\1\u0201\30\66\1\0"+
    "\2\66\3\0\2\66\30\0\14\66\1\u0202\16\66\1\0"+
    "\2\66\3\0\2\66\30\0\6\66\1\u0150\24\66\1\0"+
    "\2\66\3\0\2\66\30\0\4\66\1\u0203\26\66\1\0"+
    "\2\66\3\0\2\66\30\0\10\66\1\u0204\22\66\1\0"+
    "\2\66\3\0\2\66\30\0\16\66\1\u0205\14\66\1\0"+
    "\2\66\3\0\2\66\30\0\5\66\1\201\25\66\1\0"+
    "\2\66\3\0\2\66\30\0\7\66\1\u0206\23\66\1\0"+
    "\2\66\3\0\2\66\30\0\1\u0207\32\66\1\0\2\66"+
    "\3\0\2\66\30\0\4\66\1\u0208\26\66\1\0\2\66"+
    "\3\0\2\66\30\0\1\u0209\27\66\1\u01b5\2\66\1\0"+
    "\2\66\3\0\2\66\30\0\24\66\1\u020a\6\66\1\0"+
    "\2\66\3\0\2\66\30\0\2\66\1\u020b\30\66\1\0"+
    "\2\66\3\0\2\66\30\0\20\66\1\u011a\12\66\1\0"+
    "\2\66\3\0\2\66\30\0\2\66\1\u020c\30\66\1\0"+
    "\2\66\3\0\2\66\30\0\2\66\1\u020d\30\66\1\0"+
    "\2\66\3\0\2\66\30\0\1\u020e\15\66\1\u020f\14\66"+
    "\1\0\2\66\3\0\2\66\30\0\2\66\1\u0210\30\66"+
    "\1\0\2\66\3\0\2\66\30\0\4\66\1\u0211\26\66"+
    "\1\0\2\66\3\0\2\66\30\0\2\66\1\u0186\30\66"+
    "\1\0\2\66\3\0\2\66\30\0\1\u0212\32\66\1\0"+
    "\2\66\3\0\2\66\30\0\25\66\1\346\5\66\1\0"+
    "\2\66\3\0\2\66\30\0\16\66\1\246\14\66\1\0"+
    "\2\66\3\0\2\66\30\0\7\66\1\u0213\23\66\1\0"+
    "\2\66\3\0\2\66\30\0\16\66\1\u0100\14\66\1\0"+
    "\2\66\3\0\2\66\30\0\2\66\1\u0117\30\66\1\0"+
    "\2\66\3\0\2\66\30\0\16\66\1\u0214\14\66\1\0"+
    "\2\66\3\0\2\66\30\0\2\66\1\u0215\30\66\1\0"+
    "\2\66\3\0\2\66\30\0\1\u0216\32\66\1\0\2\66"+
    "\3\0\2\66\30\0\16\66\1\u0217\14\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\u0218\30\66\1\0\2\66"+
    "\3\0\2\66\30\0\16\66\1\322\14\66\1\0\2\66"+
    "\3\0\2\66\30\0\14\66\1\335\16\66\1\0\2\66"+
    "\3\0\2\66\30\0\20\66\1\u0219\12\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\135\30\66\1\0\2\66"+
    "\3\0\2\66\30\0\7\66\1\u021a\23\66\1\0\2\66"+
    "\3\0\2\66\30\0\4\66\1\u021b\26\66\1\0\2\66"+
    "\3\0\2\66\30\0\3\66\1\105\27\66\1\0\2\66"+
    "\3\0\2\66\30\0\11\66\1\u021c\21\66\1\0\2\66"+
    "\3\0\2\66\30\0\5\66\1\u021d\14\66\1\305\10\66"+
    "\1\0\2\66\3\0\2\66\30\0\14\66\1\u021e\16\66"+
    "\1\0\2\66\3\0\2\66\30\0\16\66\1\u021f\14\66"+
    "\1\0\2\66\3\0\2\66\30\0\5\66\1\246\1\u0220"+
    "\24\66\1\0\2\66\3\0\2\66\30\0\1\111\32\66"+
    "\1\0\2\66\3\0\2\66\30\0\1\66\1\u0221\31\66"+
    "\1\0\2\66\3\0\2\66\30\0\17\66\1\305\13\66"+
    "\1\0\2\66\3\0\2\66\30\0\11\66\1\246\21\66"+
    "\1\0\2\66\3\0\2\66\30\0\5\66\1\u0222\25\66"+
    "\1\0\2\66\3\0\2\66\30\0\16\66\1\u0223\14\66"+
    "\1\0\2\66\3\0\2\66\30\0\6\66\1\u0224\24\66"+
    "\1\0\2\66\3\0\2\66\30\0\16\66\1\u0225\14\66"+
    "\1\0\2\66\3\0\2\66\30\0\25\66\1\u0226\5\66"+
    "\1\0\2\66\3\0\2\66\30\0\1\66\1\u01b3\31\66"+
    "\1\0\2\66\3\0\2\66\30\0\4\66\1\u0227\26\66"+
    "\1\0\2\66\3\0\2\66\30\0\2\66\1\u0228\30\66"+
    "\1\0\2\66\3\0\2\66\30\0\7\66\1\u0229\23\66"+
    "\1\0\2\66\3\0\2\66\30\0\5\66\1\u022a\25\66"+
    "\1\0\2\66\3\0\2\66\30\0\1\105\17\66\1\u021e"+
    "\12\66\1\0\2\66\3\0\2\66\30\0\4\66\1\u010d"+
    "\26\66\1\0\2\66\3\0\2\66\30\0\1\u022b\32\66"+
    "\1\0\2\66\3\0\2\66\30\0\2\66\1\u0171\30\66"+
    "\1\0\2\66\3\0\2\66\30\0\4\66\1\u022c\26\66"+
    "\1\0\2\66\3\0\2\66\30\0\1\66\1\u022d\1\66"+
    "\1\u022e\1\66\1\u022f\24\66\1\u0230\1\0\2\66\3\0"+
    "\2\66\30\0\7\66\1\u0231\23\66\1\0\2\66\3\0"+
    "\2\66\30\0\10\66\1\u019e\22\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\u017f\30\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\u0232\30\66\1\0\2\66\3\0"+
    "\2\66\30\0\16\66\1\u0233\14\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\u0234\30\66\1\0\2\66\2\0"+
    "\1\300\2\u015b\1\300\2\u015b\1\u01d7\7\u015b\1\u01d9\1\u01da"+
    "\43\u015b\1\300\5\u015b\3\300\2\u015b\1\300\2\u015b\1\275"+
    "\1\u01d8\6\u015b\1\u01d9\1\u01da\43\u015b\1\300\5\u015b\11\300"+
    "\1\u015c\6\300\1\u015b\63\300\1\u015c\7\300\1\u015b\53\300"+
    "\5\0\1\u0235\1\u0236\65\0\2\u01dc\1\0\12\u01dc\1\u01df"+
    "\1\u01e0\43\u01dc\1\0\5\u01dc\3\0\2\u01dc\1\0\1\u01dc"+
    "\1\70\10\u01dc\1\u01df\1\u01e0\43\u01dc\1\0\5\u01dc\3\0"+
    "\2\u01dc\1\0\3\u01dc\1\71\6\u01dc\1\u01df\1\u01e0\43\u01dc"+
    "\1\0\5\u01dc\20\0\1\u01dc\73\0\1\u01dc\54\0\2\66"+
    "\30\0\5\66\1\u0237\25\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\130\32\66\1\0\2\66\3\0\2\66\30\0"+
    "\7\66\1\246\23\66\1\0\2\66\3\0\2\66\30\0"+
    "\5\66\1\u0238\25\66\1\0\2\66\3\0\2\66\30\0"+
    "\5\66\1\335\25\66\1\0\2\66\3\0\2\66\30\0"+
    "\16\66\1\u0239\14\66\1\0\2\66\3\0\2\66\30\0"+
    "\20\66\1\u0225\12\66\1\0\2\66\3\0\2\66\30\0"+
    "\16\66\1\u023a\14\66\1\0\2\66\3\0\2\66\30\0"+
    "\6\66\1\u01c0\24\66\1\0\2\66\3\0\2\66\30\0"+
    "\6\66\1\u023b\24\66\1\0\2\66\3\0\2\66\30\0"+
    "\6\66\1\u0100\24\66\1\0\2\66\3\0\2\66\30\0"+
    "\4\66\1\u023c\26\66\1\0\2\66\40\0\1\u023d\35\0"+
    "\2\66\30\0\17\66\1\u023e\13\66\1\0\2\66\3\0"+
    "\2\66\30\0\16\66\1\231\14\66\1\0\2\66\3\0"+
    "\2\66\30\0\5\66\1\u01ae\25\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\u0105\6\66\1\u01a5\23\66\1\0\2\66"+
    "\3\0\2\66\30\0\20\66\1\u023f\12\66\1\0\2\66"+
    "\3\0\2\66\30\0\4\66\1\u0240\26\66\1\0\2\66"+
    "\3\0\2\66\30\0\20\66\1\u0241\12\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\147\30\66\1\0\2\66"+
    "\3\0\2\66\30\0\16\66\1\222\14\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\u0242\30\66\1\0\2\66"+
    "\3\0\2\66\30\0\10\66\1\u0243\22\66\1\0\2\66"+
    "\3\0\2\66\30\0\11\66\1\u01bd\21\66\1\0\2\66"+
    "\3\0\2\66\30\0\16\66\1\u01c0\14\66\1\0\2\66"+
    "\3\0\2\66\30\0\1\u0201\32\66\1\0\2\66\3\0"+
    "\2\66\30\0\14\66\1\u0117\16\66\1\0\2\66\3\0"+
    "\2\66\30\0\16\66\1\u0244\14\66\1\0\2\66\3\0"+
    "\2\66\30\0\10\66\1\105\22\66\1\0\2\66\3\0"+
    "\2\66\30\0\14\66\1\u010f\16\66\1\0\2\66\3\0"+
    "\2\66\30\0\11\66\1\u012f\21\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\u0128\32\66\1\0\2\66\3\0\2\66"+
    "\30\0\2\66\1\u0245\30\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\u0246\32\66\1\0\2\66\3\0\2\66\30\0"+
    "\22\66\1\346\10\66\1\0\2\66\3\0\2\66\30\0"+
    "\20\66\1\115\12\66\1\0\2\66\3\0\2\66\30\0"+
    "\1\66\1\u0247\31\66\1\0\2\66\3\0\2\66\30\0"+
    "\2\66\1\u0248\30\66\1\0\2\66\3\0\2\66\30\0"+
    "\11\66\1\u0249\21\66\1\0\2\66\3\0\2\66\30\0"+
    "\13\66\1\u024a\17\66\1\0\2\66\3\0\2\66\30\0"+
    "\6\66\1\u024b\24\66\1\0\2\66\3\0\2\66\30\0"+
    "\17\66\1\u0144\13\66\1\0\2\66\3\0\2\66\30\0"+
    "\17\66\1\u024c\13\66\1\0\2\66\3\0\2\66\30\0"+
    "\16\66\1\u024d\14\66\1\0\2\66\3\0\2\66\30\0"+
    "\6\66\1\u01b2\24\66\1\0\2\66\3\0\2\66\30\0"+
    "\11\66\1\u01ed\21\66\1\0\2\66\3\0\2\66\30\0"+
    "\5\66\1\u024e\25\66\1\0\2\66\3\0\2\66\30\0"+
    "\4\66\1\u024f\26\66\1\0\2\66\3\0\2\66\30\0"+
    "\20\66\1\u0201\12\66\1\0\2\66\3\0\2\66\30\0"+
    "\17\66\1\307\13\66\1\0\2\66\3\0\2\66\30\0"+
    "\5\66\1\222\25\66\1\0\2\66\3\0\2\66\30\0"+
    "\5\66\1\253\25\66\1\0\2\66\3\0\2\66\30\0"+
    "\7\66\1\u0250\23\66\1\0\2\66\3\0\2\66\30\0"+
    "\1\66\1\u0251\31\66\1\0\2\66\3\0\2\66\30\0"+
    "\26\66\1\346\4\66\1\0\2\66\3\0\2\66\30\0"+
    "\2\66\1\u0252\30\66\1\0\2\66\3\0\2\66\30\0"+
    "\16\66\1\u0253\14\66\1\0\2\66\3\0\2\66\30\0"+
    "\1\u0254\32\66\1\0\2\66\3\0\2\66\30\0\17\66"+
    "\1\u013c\7\66\1\u0100\3\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\66\1\335\31\66\1\0\2\66\3\0\2\66"+
    "\30\0\1\u0255\32\66\1\0\2\66\3\0\2\66\30\0"+
    "\17\66\1\u0256\13\66\1\0\2\66\3\0\2\66\30\0"+
    "\16\66\1\u010d\14\66\1\0\2\66\3\0\2\66\30\0"+
    "\16\66\1\u0257\14\66\1\0\2\66\3\0\2\66\30\0"+
    "\20\66\1\u0258\12\66\1\0\2\66\3\0\2\66\30\0"+
    "\4\66\1\u0259\26\66\1\0\2\66\3\0\2\66\30\0"+
    "\17\66\1\u025a\13\66\1\0\2\66\3\0\2\66\30\0"+
    "\1\105\32\66\1\0\2\66\3\0\2\66\30\0\5\66"+
    "\1\304\25\66\1\0\2\66\3\0\2\66\30\0\25\66"+
    "\1\u025b\5\66\1\0\2\66\3\0\2\66\30\0\16\66"+
    "\1\u0117\14\66\1\0\2\66\3\0\2\66\30\0\5\66"+
    "\1\u019e\25\66\1\0\2\66\3\0\2\66\30\0\5\66"+
    "\1\u025c\25\66\1\0\2\66\3\0\2\66\30\0\1\u025d"+
    "\32\66\1\0\2\66\3\0\2\66\30\0\25\66\1\u0106"+
    "\5\66\1\0\2\66\3\0\2\66\30\0\20\66\1\u025e"+
    "\12\66\1\0\2\66\3\0\2\66\30\0\14\66\1\u025f"+
    "\16\66\1\0\2\66\3\0\2\66\30\0\1\u0260\32\66"+
    "\1\0\2\66\3\0\2\66\30\0\27\66\1\305\3\66"+
    "\1\0\2\66\3\0\2\66\30\0\6\66\1\u0261\24\66"+
    "\1\0\2\66\11\0\1\300\64\0\2\66\30\0\16\66"+
    "\1\u0262\14\66\1\0\2\66\3\0\2\66\30\0\1\325"+
    "\1\66\1\377\30\66\1\0\2\66\3\0\2\66\30\0"+
    "\13\66\1\u0254\1\66\1\335\15\66\1\0\2\66\3\0"+
    "\2\66\30\0\15\66\1\u0263\15\66\1\0\2\66\3\0"+
    "\2\66\30\0\6\66\1\u013c\24\66\1\0\2\66\37\0"+
    "\1\u0264\36\0\2\66\30\0\1\u0265\32\66\1\0\2\66"+
    "\3\0\2\66\30\0\6\66\1\u0266\24\66\1\0\2\66"+
    "\3\0\2\66\30\0\1\121\32\66\1\0\2\66\3\0"+
    "\2\66\30\0\6\66\1\u0267\24\66\1\0\2\66\3\0"+
    "\2\66\30\0\6\66\1\u0268\24\66\1\0\2\66\3\0"+
    "\2\66\30\0\16\66\1\u0269\14\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\66\1\u026a\31\66\1\0\2\66\3\0"+
    "\2\66\30\0\3\66\1\u026b\27\66\1\0\2\66\3\0"+
    "\2\66\30\0\11\66\1\u0254\21\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\u026c\30\66\1\0\2\66\3\0"+
    "\2\66\30\0\5\66\1\u026d\25\66\1\0\2\66\3\0"+
    "\2\66\30\0\4\66\1\u026e\26\66\1\0\2\66\3\0"+
    "\2\66\30\0\20\66\1\u0229\12\66\1\0\2\66\3\0"+
    "\2\66\30\0\4\66\1\u026f\26\66\1\0\2\66\3\0"+
    "\2\66\30\0\13\66\1\u0270\17\66\1\0\2\66\3\0"+
    "\2\66\30\0\6\66\1\u0271\24\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\u0272\32\66\1\0\2\66\3\0\2\66"+
    "\30\0\2\66\1\105\13\66\1\u015f\14\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\u0273\30\66\1\0\2\66"+
    "\3\0\2\66\30\0\14\66\1\u01e6\16\66\1\0\2\66"+
    "\3\0\2\66\30\0\6\66\1\u0274\24\66\1\0\2\66"+
    "\3\0\2\66\30\0\4\66\1\u0275\26\66\1\0\2\66"+
    "\3\0\2\66\30\0\4\66\1\u019e\26\66\1\0\2\66"+
    "\3\0\2\66\30\0\7\66\1\u0276\23\66\1\0\2\66"+
    "\3\0\2\66\30\0\16\66\1\u0181\14\66\1\0\2\66"+
    "\3\0\2\66\30\0\4\66\1\u0277\26\66\1\0\2\66"+
    "\3\0\2\66\30\0\6\66\1\u0278\24\66\1\0\2\66"+
    "\3\0\2\66\30\0\16\66\1\u0279\14\66\1\0\2\66"+
    "\3\0\2\66\30\0\4\66\1\u027a\26\66\1\0\2\66"+
    "\3\0\2\66\30\0\30\66\1\u027b\2\66\1\0\2\66"+
    "\3\0\2\66\30\0\6\66\1\304\24\66\1\0\2\66"+
    "\3\0\2\66\30\0\4\66\1\u027c\26\66\1\0\2\66"+
    "\3\0\2\66\30\0\26\66\1\u027d\4\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\u0216\30\66\1\0\2\66"+
    "\3\0\2\66\30\0\13\66\1\u018d\17\66\1\0\2\66"+
    "\3\0\2\66\30\0\33\66\1\u027e\2\66\3\0\2\66"+
    "\30\0\23\66\1\u01bd\7\66\1\0\2\66\3\0\2\66"+
    "\30\0\14\66\1\u027f\16\66\1\0\2\66\46\0\1\u0280"+
    "\27\0\2\66\30\0\25\66\1\u0281\5\66\1\0\2\66"+
    "\3\0\2\66\30\0\27\66\1\u01a4\3\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\u0282\30\66\1\0\2\66"+
    "\3\0\2\66\30\0\11\66\1\366\21\66\1\0\2\66"+
    "\3\0\2\66\30\0\22\66\1\u0251\10\66\1\0\2\66"+
    "\3\0\2\66\30\0\11\66\1\u0283\21\66\1\0\2\66"+
    "\3\0\2\66\30\0\4\66\1\u0284\26\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\377\30\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\u0285\30\66\1\0\2\66"+
    "\3\0\2\66\30\0\30\66\1\u0286\2\66\1\0\2\66"+
    "\3\0\2\66\30\0\20\66\1\u0287\12\66\1\0\2\66"+
    "\3\0\2\66\30\0\17\66\1\u0284\13\66\1\0\2\66"+
    "\3\0\2\66\30\0\16\66\1\u0288\14\66\1\0\2\66"+
    "\3\0\2\66\30\0\22\66\1\366\10\66\1\0\2\66"+
    "\3\0\2\66\30\0\22\66\1\215\10\66\1\0\2\66"+
    "\3\0\2\66\30\0\21\66\1\u0289\11\66\1\0\2\66"+
    "\3\0\2\66\30\0\21\66\1\u028a\11\66\1\0\2\66"+
    "\3\0\2\66\30\0\11\66\1\u028b\21\66\1\0\2\66"+
    "\3\0\2\66\30\0\16\66\1\u028c\14\66\1\0\2\66"+
    "\3\0\2\66\30\0\1\u028d\32\66\1\0\2\66\3\0"+
    "\2\66\30\0\17\66\1\u028e\13\66\1\0\2\66\57\0"+
    "\1\u028f\16\0\2\66\30\0\4\66\1\u026d\26\66\1\0"+
    "\2\66\3\0\2\66\30\0\13\66\1\143\17\66\1\0"+
    "\2\66\3\0\2\66\30\0\30\66\1\u0290\2\66\1\0"+
    "\2\66\3\0\2\66\30\0\20\66\1\u0106\12\66\1\0"+
    "\2\66\3\0\2\66\30\0\4\66\1\u0291\26\66\1\0"+
    "\2\66\3\0\2\66\30\0\5\66\1\u0130\25\66\1\0"+
    "\2\66\3\0\2\66\30\0\1\66\1\u010d\2\66\1\u0292"+
    "\7\66\1\u01bf\16\66\1\0\2\66\3\0\2\66\30\0"+
    "\6\66\1\374\24\66\1\0\2\66\3\0\2\66\30\0"+
    "\6\66\1\u0293\24\66\1\0\2\66\3\0\2\66\30\0"+
    "\11\66\1\u0283\16\66\1\u0294\2\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\u0295\32\66\1\0\2\66\3\0\2\66"+
    "\30\0\17\66\1\u0296\4\66\1\u0297\6\66\1\0\2\66"+
    "\3\0\2\66\30\0\11\66\1\u018d\21\66\1\0\2\66"+
    "\3\0\2\66\30\0\17\66\1\u0298\13\66\1\0\2\66"+
    "\3\0\2\66\30\0\2\66\1\246\30\66\1\0\2\66"+
    "\42\0\1\u0299\33\0\2\66\30\0\12\66\1\u029a\12\66"+
    "\1\u029b\5\66\1\0\2\66\3\0\2\66\30\0\1\325"+
    "\32\66\1\0\2\66\3\0\2\66\30\0\16\66\1\u029c"+
    "\14\66\1\0\2\66\3\0\2\66\30\0\4\66\1\u0234"+
    "\26\66\1\0\2\66\3\0\2\66\30\0\16\66\1\u029d"+
    "\14\66\1\0\2\66\3\0\2\66\30\0\14\66\1\u029e"+
    "\16\66\1\0\2\66\3\0\2\66\30\0\16\66\1\u029f"+
    "\14\66\1\0\2\66\3\0\2\66\30\0\2\66\1\u02a0"+
    "\30\66\1\0\2\66\3\0\2\66\30\0\20\66\1\u02a1"+
    "\12\66\1\0\2\66\55\0\1\u02a2\20\0\2\66\30\0"+
    "\20\66\1\u02a3\12\66\1\0\2\66\3\0\2\66\30\0"+
    "\16\66\1\u02a4\14\66\1\0\2\66\3\0\2\66\30\0"+
    "\25\66\1\u02a5\5\66\1\0\2\66\3\0\2\66\30\0"+
    "\6\66\1\u02a6\24\66\1\0\2\66\3\0\2\66\30\0"+
    "\1\66\1\u01a8\31\66\1\0\2\66\3\0\2\66\30\0"+
    "\25\66\1\u02a7\5\66\1\0\2\66\3\0\2\66\30\0"+
    "\21\66\1\u02a8\11\66\1\0\2\66\3\0\2\66\30\0"+
    "\14\66\1\u02a9\16\66\1\0\2\66\51\0\1\u02aa\24\0"+
    "\2\66\30\0\14\66\1\u011a\16\66\1\0\2\66\3\0"+
    "\2\66\30\0\6\66\1\u01a7\24\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\u02ab\30\66\1\0\2\66\3\0"+
    "\2\66\30\0\17\66\1\u01a4\13\66\1\0\2\66\3\0"+
    "\2\66\30\0\16\66\1\u02ac\14\66\1\0\2\66\3\0"+
    "\2\66\30\0\13\66\1\u02ad\17\66\1\0\2\66\3\0"+
    "\2\66\30\0\5\66\1\u0144\25\66\1\0\2\66\50\0"+
    "\1\u0280\25\0\2\66\30\0\17\66\1\u01f4\13\66\1\0"+
    "\2\66\3\0\2\66\30\0\7\66\1\u02ae\23\66\1\0"+
    "\2\66\3\0\2\66\30\0\12\66\1\u02af\20\66\1\0"+
    "\2\66\3\0\2\66\30\0\1\u02b0\32\66\1\0\2\66"+
    "\3\0\2\66\30\0\5\66\1\u02b1\25\66\1\0\2\66"+
    "\3\0\2\66\30\0\5\66\1\u02b2\25\66\1\0\2\66"+
    "\3\0\2\66\30\0\1\u02b3\32\66\1\0\2\66\3\0"+
    "\2\66\30\0\16\66\1\u02b4\14\66\1\0\2\66\3\0"+
    "\2\66\30\0\17\66\1\u02b5\13\66\1\0\2\66\3\0"+
    "\2\66\30\0\4\66\1\u02b6\26\66\1\0\2\66\3\0"+
    "\2\66\30\0\2\66\1\u02b7\30\66\1\0\2\66\3\0"+
    "\2\66\30\0\21\66\1\u02b8\11\66\1\0\2\66\3\0"+
    "\2\66\30\0\1\66\1\u02b9\2\66\1\u0291\26\66\1\0"+
    "\2\66\3\0\2\66\30\0\2\66\1\u02ba\30\66\1\0"+
    "\2\66\3\0\2\66\30\0\4\66\1\u02bb\26\66\1\0"+
    "\2\66\3\0\2\66\30\0\1\u02bc\32\66\1\0\2\66"+
    "\3\0\2\66\30\0\16\66\1\u02bd\14\66\1\0\2\66"+
    "\3\0\2\66\30\0\7\66\1\u02be\23\66\1\0\2\66"+
    "\3\0\2\66\30\0\17\66\1\u02b7\13\66\1\0\2\66"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[39176];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\3\11\6\1\3\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\37\1\12\11\165\1\2\0"+
    "\1\11\1\0\1\1\3\0\1\1\2\0\226\1\1\0"+
    "\1\1\1\0\26\1\1\0\145\1\2\0\4\1\2\0"+
    "\15\1\1\0\106\1\2\0\6\1\1\0\46\1\1\0"+
    "\31\1\1\0\1\1\1\11\16\1\1\0\11\1\1\0"+
    "\10\1\1\0\7\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[702];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  public String foundLine;
  public int line;
  public int columnSt;
  public int columnNd;  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ERROR;
            } 
            // fall through
          case 39: break;
          case 2: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength()-1; return CONSTANTE_ENTERA;
            } 
            // fall through
          case 40: break;
          case 3: 
            { /*Ignore*/
            } 
            // fall through
          case 41: break;
          case 4: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RESTA;
            } 
            // fall through
          case 42: break;
          case 5: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DIVISION;
            } 
            // fall through
          case 43: break;
          case 6: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MULTIPLICACION;
            } 
            // fall through
          case 44: break;
          case 7: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return SUMA;
            } 
            // fall through
          case 45: break;
          case 8: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MOD;
            } 
            // fall through
          case 46: break;
          case 9: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MENOR;
            } 
            // fall through
          case 47: break;
          case 10: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ASIGNACION;
            } 
            // fall through
          case 48: break;
          case 11: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MAYOR;
            } 
            // fall through
          case 49: break;
          case 12: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return EXCLAMACION;
            } 
            // fall through
          case 50: break;
          case 13: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength()-1; return CONSTANTE_BOOLEANA;
            } 
            // fall through
          case 51: break;
          case 14: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PUNTO_COMA;
            } 
            // fall through
          case 52: break;
          case 15: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return COMA;
            } 
            // fall through
          case 53: break;
          case 16: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PUNTO;
            } 
            // fall through
          case 54: break;
          case 17: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CORCHETEA;
            } 
            // fall through
          case 55: break;
          case 18: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CORCHETEC;
            } 
            // fall through
          case 56: break;
          case 19: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PARENTESISA;
            } 
            // fall through
          case 57: break;
          case 20: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PARENTESISC;
            } 
            // fall through
          case 58: break;
          case 21: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LLAVEA;
            } 
            // fall through
          case 59: break;
          case 22: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LLAVEC;
            } 
            // fall through
          case 60: break;
          case 23: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return ARROBA;
            } 
            // fall through
          case 61: break;
          case 24: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NUMERAL;
            } 
            // fall through
          case 62: break;
          case 25: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength()-1; return IDENTIFICADOR;
            } 
            // fall through
          case 63: break;
          case 26: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CONSTANTE_DECIMAL;
            } 
            // fall through
          case 64: break;
          case 27: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MENOR_IGUAL;
            } 
            // fall through
          case 65: break;
          case 28: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return IGUALACION;
            } 
            // fall through
          case 66: break;
          case 29: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return MAYOR_IGUAL;
            } 
            // fall through
          case 67: break;
          case 30: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return DIFERENCIA;
            } 
            // fall through
          case 68: break;
          case 31: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return AND;
            } 
            // fall through
          case 69: break;
          case 32: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return OR;
            } 
            // fall through
          case 70: break;
          case 33: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return CORCHETES;
            } 
            // fall through
          case 71: break;
          case 34: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return PARENTESIS;
            } 
            // fall through
          case 72: break;
          case 35: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return LLAVES;
            } 
            // fall through
          case 73: break;
          case 36: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return NUMERALES;
            } 
            // fall through
          case 74: break;
          case 37: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength() -1; return RESERVADA;
            } 
            // fall through
          case 75: break;
          case 38: 
            { foundLine = yytext(); line = yyline; columnSt = yycolumn; columnNd = yycolumn + yylength()-1; return CADENA;
            } 
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
